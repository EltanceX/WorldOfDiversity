<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Survivalcraft</name>
    </assembly>
    <members>
        <member name="F:Game.MovingBlocksRaycastResult.ValuesDictionaryForMods">
            <summary>
            模组如果需要添加或使用额外信息，可以在这个ValuesDictionary读写元素
            </summary>
        </member>
        <member name="F:Game.ComponentBody.CollisionBox.ValuesDictionaryForMods">
            <summary>
            模组如果需要添加或使用额外信息，可以在这个ValuesDictionary读写元素
            </summary>
        </member>
        <member name="F:Game.ComponentFactors.OtherFactors">
            <summary>
            模组如果有自定义的Factors，可以使用这个OtherFactors。例如使用OtherFactors["AttackRate"]来定义攻击频率。
            </summary>
        </member>
        <member name="F:Game.ComponentFactors.m_strengthFactors">
            <summary>
            这四个Factors是可以调整的影响因素
            </summary>
        </member>
        <member name="M:Game.ComponentFactors.Load(TemplatesDatabase.ValuesDictionary,GameEntitySystem.IdToEntityMap)">
            <summary>
            AttackSpeed: 生物攻速
            DigSpeed: 挖掘速度
            ChaseRange: 非玩家生物的仇恨距离
            </summary>
            <param name="valuesDictionary"></param>
            <param name="idToEntityMap"></param>
        </member>
        <member name="M:Game.ComponentFactors.Update(System.Single)">
            <summary>
            对等级系统的更新进行了调整。
            第一步是计算上一帧Factors的最终结果，并进行赋值。此时已经经过了所有模组的修改。
            第二步是GenerateFactors对四个属性进行生成，此时四个m_xxxFactors会拥有初始值。
            再往后面则是各模组对Factors的增删改。
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Game.ComponentGui.DisplaySmallMessage(Game.MessageWidget.Message,System.Boolean)">
            <summary>
            模组如果需要自定义类型的DisplaySmallMessage，比如彩虹渐变色的Message，可以自己建立对应的Message类型，并调用这个方法
            </summary>
            <param name="message"></param>
            <param name="playNotificationSound"></param>
        </member>
        <member name="P:Game.ComponentHealth.AttackResilience">
            <summary>
            攻击抗性
            </summary>
        </member>
        <member name="P:Game.ComponentHealth.FallResilience">
            <summary>
            掉落抗性
            </summary>
        </member>
        <member name="P:Game.ComponentHealth.AttackResilienceFactor">
            <summary>
            攻击抗性加成系数
            </summary>
        </member>
        <member name="P:Game.ComponentHealth.FallResilienceFactor">
            <summary>
            掉落抗性加成系数
            </summary>
        </member>
        <member name="P:Game.ComponentHealth.FireResilienceFactor">
            <summary>
            火焰伤害抗性系数
            </summary>
        </member>
        <member name="P:Game.ComponentHealth.HealFactor">
            <summary>
            生命恢复速度系数
            </summary>
        </member>
        <member name="T:Game.ComponentLevel.Factor">
            <summary>
            这里的Factor类型从struct改为class，是由于模组在修改Factor的时候，通常是需要修改引用的值。
            如果是struct则只能复制并修改值，不能修改引用。
            Description: 在玩家信息面板上显示影响因素的名称，如“未患流感”
            Value：该影响因素的具体数值
            Name：该Factor的索引名称，模组使用Name来在m_xxxFactors列表中查找对应的Factor
            FactorAdditionType：该影响因子是乘算还是加算
            </summary>
        </member>
        <member name="M:Game.ComponentLevel.GenerateStrengthFactors">
            <summary>
            生成玩家的所有关于力量的因素
            </summary>
        </member>
        <member name="M:Game.ComponentLevel.GenerateResilienceFactors">
            <summary>
            生成玩家所有关于防御的因素
            </summary>
        </member>
        <member name="M:Game.ComponentLevel.GenerateSpeedFactors">
            <summary>
            生成玩家所有关于速度的因素
            </summary>
        </member>
        <member name="M:Game.ComponentLevel.GenerateHungerFactors">
            <summary>
            生成玩家所有关于饥饿的因素
            </summary>
        </member>
        <member name="F:Game.ComponentLoot.Loot.ValuesDictionaryForMods">
            <summary>
            模组如果需要添加或使用额外信息，可以在这个ValuesDictionary读写元素
            </summary>
        </member>
        <member name="P:Game.ComponentMiner.HitInterval">
            <summary>
            伤害间隔(原版为0.66f)
            </summary>
        </member>
        <member name="F:Game.ComponentMiner.m_digSpeedBasedOnStrengthFactor">
            <summary>
            挖掘速度是否受玩家力量属性加成
            </summary>
        </member>
        <member name="M:Game.ComponentMiner.Raycast(Engine.Ray3,Game.RaycastMode,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Single})">
            <summary>
            发出射线检测，检测玩家点击到的目标
            </summary>
            <param name="ray"></param>
            <param name="mode">发出射线的意图</param>
            <param name="raycastTerrain">该射线是否和地形交互，为false时则忽略地形</param>
            <param name="raycastBodies">该射线是否和生物等实体交互，为false时则忽略实体</param>
            <param name="raycastMovingBlocks">该射线是否和移动方块交互，为false时则忽略移动方块</param>
            <param name="Reach">进行Raycast的距离</param>
            <returns></returns>
        </member>
        <member name="P:Game.ComponentModel.ModelOffset">
            <summary>
            模型偏移
            </summary>
        </member>
        <member name="P:Game.ComponentModel.Transparent">
            <summary>
            模型透明度
            </summary>
        </member>
        <member name="P:Game.ComponentModel.ModelScale">
            <summary>
            模型大小缩放
            </summary>
        </member>
        <member name="P:Game.ComponentModel.TextureRoute">
            <summary>
            纹理路径
            </summary>
        </member>
        <member name="P:Game.ComponentModel.ModelRoute">
            <summary>
            模型路径
            </summary>
        </member>
        <member name="M:Game.ComponentSleep.CanSleep(System.String@)">
            <summary>
            为了模组间兼容性，该方法不再建议覆盖。
            控制睡觉需要的条件，需要通过控制m_conditionsToSleep更改，具体查看Load()中的添加。
            模组作者可以在自己的Component中添加对应的m_conditionsToSleep
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Attackment">
            <summary>
            The spell "Attackment" is wrong,
            But it is not recommended to change it because many mods rely on this class.
            Change of its name will make a lot of mods unavailable.
            </summary>
        </member>
        <member name="F:Game.Attackment.DictionaryForOtherMods">
            <summary>
            模组可以向Dictionary里面添加内容，另一个模组可以从Dictionary读取内容，以实现模组联动效果
            </summary>
        </member>
        <member name="M:Game.BasePerspectiveCamera.CalculateBaseProjectionMatrix">
            <summary>
            计算基础投影矩阵，创建透视视野
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Block.GetTextureSlotCount(System.Int32)">
            <summary>
            设置材质(正方形)单行格子(分割后每个材质)数,对放置后的方块无效
            </summary>
            <param name="value">材质(正方形)单行格子(分割后每个材质)数</param>
        </member>
        <member name="M:Game.Block.GenerateTerrainVertices(Game.BlockGeometryGenerator,Game.TerrainGeometry,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            生成地形顶点(用于绘制放置的方块)
            </summary>
            <param name="generator"></param>
            <param name="geometry"></param>
            <param name="value"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Game.Block.DrawBlock(Engine.Graphics.PrimitivesRenderer3D,System.Int32,Engine.Color,System.Single,Engine.Matrix@,Game.DrawBlockEnvironmentData)">
            <summary>
            绘制方块_用于绘制方块物品形态
            </summary>
            <param name="primitivesRenderer"></param>
            <param name="value"></param>
            <param name="color"></param>
            <param name="size"></param>
            <param name="matrix"></param>
            <param name="environmentData"></param>
        </member>
        <member name="M:Game.Block.GetPlacementValue(Game.SubsystemTerrain,Game.ComponentMiner,System.Int32,Game.TerrainRaycastResult)">
            <summary>
            方块放置方向
            </summary>
        </member>
        <member name="F:Game.BlockDropValue.ValuesDictionaryForMods">
            <summary>
            模组如果需要添加或使用额外信息，可以在这个ValuesDictionary读写元素
            </summary>
        </member>
        <member name="F:Game.BlockPlacementData.ValuesDictionaryForMods">
            <summary>
            模组如果需要添加或使用额外信息，可以在这个ValuesDictionary读写元素
            </summary>
        </member>
        <member name="F:Game.BodyRaycastResult.ValuesDictionaryForMods">
            <summary>
            模组如果需要添加或使用额外信息，可以在这个ValuesDictionary读写元素
            </summary>
        </member>
        <member name="F:Game.ClothingData.Mount">
            <summary>
            装备
            </summary>
        </member>
        <member name="F:Game.ClothingData.Dismount">
            <summary>
            卸载
            </summary>
        </member>
        <member name="F:Game.ClothingData.Update">
            <summary>
            ComponentClothing更新时触发。
            </summary>
        </member>
        <member name="F:Game.ClothingData.DictionaryForOtherMods">
            <summary>
            模组可以向Dictionary里面添加特殊数据，另一个模组可以从Dictionary读取数据，以实现模组联动效果
            </summary>
        </member>
        <member name="M:Game.ClothingData.ApplyArmorProtection(Game.ComponentClothing,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Int32,Game.Attackment,System.Single@)">
            <summary>
            计算单件护甲的防御
            </summary>
            <param name="componentClothing"></param>
            <param name="clothesBeforeProtection">在结算防御前，玩家的衣物列表</param>
            <param name="clothesAfterProtection">在结算防御后，玩家将会有的的衣物列表</param>
            <param name="sequence">表示这是结算到第几件护甲</param>
            <param name="attackment">导致这次ApplyArmorProtection的攻击，注意attackment.AttackPower指的是被任何护甲结算前的原始攻击力</param>
            <param name="attackPowerAfterProtection">被该件护甲结算后，剩余的攻击力</param>
        </member>
        <member name="M:Game.ClothingData.UpdateGraduallyDamagedOverTime(Game.ComponentClothing,System.Int32,System.Single)">
            <summary>
            在ComponentClothing中每帧都会调用的UpdateGraduallyDamagedOverTime()，主要用于控制衣物随时间逐渐损坏
            </summary>
            <param name="componentClothing"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Game.ClothingData.OnClotheSet(Game.ComponentClothing)">
            <summary>
            在ComponentClothing执行SetClothes()时触发，用于调整ComponentClothing中的一些参数
            </summary>
            <param name="componentClothing"></param>
        </member>
        <member name="F:Game.ClothingSlot.ClothingSlots">
            <summary>
            调用自定义部位（比如手臂）的ClothingSlot，可以用ClothingSlot.ClothingSlots["Arms"]
            </summary>
        </member>
        <member name="F:Game.FluidInfo.ValuesDictionaryForMods">
            <summary>
            模组如果需要添加或使用额外信息，可以在这个ValuesDictionary读写元素
            </summary>
        </member>
        <member name="F:Game.PlayerInput.ValuesDictionaryForMods">
            <summary>
            模组如果需要添加或使用额外信息，可以在这个ValuesDictionary读写元素
            </summary>
        </member>
        <member name="F:Game.PlayerStats.DeathRecord.ValuesDictionaryForMods">
            <summary>
            模组如果需要添加或使用额外信息，可以在这个ValuesDictionary读写元素
            目前API暂不支持直接保存到存档死亡信息中，建议模组自行保存额外死亡信息到自己的Subsystem中
            </summary>
        </member>
        <member name="F:Game.PlayerStats.ValuesDictionaryForMods">
            <summary>
            模组如果需要添加或使用额外信息，可以在这个ValuesDictionary读写元素
            目前API暂不支持直接保存到存档中，建议模组自行保存额外信息到自己的Subsystem中
            </summary>
        </member>
        <member name="F:Game.Projectile.DamageToPickable">
            <summary>
            弹射物结算时掉的耐久
            </summary>
        </member>
        <member name="M:Game.Projectile.Load(TemplatesDatabase.ValuesDictionary)">
            <summary>
            在进入加载存档时执行
            </summary>
        </member>
        <member name="F:Game.Projectile.BodiesToIgnore">
            <summary>
            弹射物飞行的时候会忽略List中的ComponentBody
            </summary>
        </member>
        <member name="F:Game.ScannedItemData.ValuesDictionaryForMods">
            <summary>
            模组如果需要添加或使用额外信息，可以在这个ValuesDictionary读写元素
            </summary>
        </member>
        <member name="M:Game.Terrain.ReplaceContents(System.Int32,System.Int32)">
            <summary>
            方块值的最低10位，替换为目标Content
            </summary>
        </member>
        <member name="M:Game.Terrain.ReplaceContents(System.Int32)">
            <summary>
            方块值的最低10位，替换为目标Content(value始终为0时)
            </summary>
        </member>
        <member name="F:Game.TerrainRaycastResult.ValuesDictionaryForMods">
            <summary>
            模组如果需要添加或使用额外信息，可以在这个ValuesDictionary读写元素
            </summary>
        </member>
        <member name="F:Game.TouchInput.ValuesDictionaryForMods">
            <summary>
            模组如果需要添加或使用额外信息，可以在这个ValuesDictionary读写元素
            </summary>
        </member>
        <member name="F:Game.WorldItem.DictionaryForOtherMods">
            <summary>
            模组可以向Dictionary里面添加内容，另一个模组可以从Dictionary读取内容，以实现模组联动效果
            </summary>
        </member>
        <member name="M:Game.PerformanceManager.AddExtraStat(System.String)">
            <summary>
            在性能信息下方添加一行信息，需每帧添加，不支持中文
            </summary>
        </member>
        <member name="P:Game.ScreensManager.PreviousScreen">
            <summary>
            上一个Screen
            </summary>
        </member>
        <member name="M:Game.SettingsManager.LoadSettings">
            <summary>
            文件存在则读取并返回真否则返回假
            </summary>
        </member>
        <member name="F:Game.VersionsManager.PlatformID">
            <summary>
            Win32NT:Windows
            Unix:Linux
            </summary>
        </member>
        <member name="M:Game.WorldsManager.GetSubsystemNode(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            保证和旧引用的兼容性，这里不使用默认参数
            </summary>
        </member>
        <member name="P:Game.APIUpdateManager.IsNeedUpdate">
            <summary>
            API是否需要更新？ture：需要；false：不需要；null：正在获取
            </summary>
        </member>
        <member name="P:Game.APIUpdateManager.CurrentVersion">
            <summary>
            当前API版本
            </summary>
        </member>
        <member name="P:Game.APIUpdateManager.LatestVersion">
            <summary>
            网络上最新的API的版本
            </summary>
        </member>
        <member name="M:Game.APIUpdateManager.GetLatestAPIJsonDocument">
            <summary>
            获取 Gitee release最后一个版本的Json文件数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.APIUpdateManager.ParseVersionFromString(System.String)">
            <summary>
            将API版本字符串转为浮点数
            </summary>
            <param name="version"></param>
            <returns>浮点数的版本</returns>
            <exception cref="T:System.FormatException">字符串格式不正确</exception>
        </member>
        <member name="M:Game.APIUpdateManager.GetLatestVersion(System.Boolean)">
            <summary>
            获取 Gitee release最后一个版本的版本号
            </summary>
            <param name="url">平台Json文件的API链接</param>
            <returns>最新版本号</returns>
        </member>
        <member name="M:Game.BlocksManager.GetBlockIndex(System.String,System.Boolean)">
            <summary>
            通过方块名称来获取方块的Index
            </summary>
            <param name="BlockName">方块名称</param>
            <param name="throwIfNotFound">在方块未查找到时是否抛出异常</param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:Game.BlocksManager.GetBlockIndex``1(System.Boolean,System.Boolean)">
            <summary>
            获取方块的Index
            </summary>
            <typeparam name="T">方块类型</typeparam>
            <param name="throwIfNotFound">在方块没有查找到时是否抛出异常</param>
            <param name="mustBeInSameType">方块是否要求必须要和目标类型完全一致</param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:Game.BlocksManager.GetBlockIndex(System.Type,System.Boolean,System.Boolean)">
            <summary>
            获取方块的Index
            </summary>
            <param name="blockType">方块类型</param>
            <param name="throwIfNotFound">在方块没有查找到时是否抛出异常</param>
            <param name="mustBeInSameType">方块是否要求必须要和目标类型完全一致</param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:Game.BlocksManager.GetBlockGeneral``1(System.Boolean)">
            <summary>
            获取一个方块的通用Block类，具有较好的模组兼容稳定性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="throwIfNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:Game.BlocksManager.GetBlock``1(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="throwIfNotFound">在方块没有查找到时是否抛出异常</param>
            <param name="mustBeInSameType">方块是否要求必须要和目标类型完全一致</param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">没有找到对应的方块</exception>
            <exception cref="T:System.InvalidCastException">有名称相同的方块，但类型不相容</exception>
        </member>
        <member name="M:Game.BlocksManager.GetBlock(System.Type,System.Boolean,System.Boolean)">
            <param name="blockType">方块类型</param>
            <param name="throwIfNotFound">在方块没有查找到时是否抛出异常</param>
            <param name="mustBeInSameType">方块是否要求必须要和目标类型完全一致</param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">没有找到对应的方块</exception>
            <exception cref="T:System.InvalidCastException">有名称相同的方块，但类型不相容</exception>
        </member>
        <member name="M:Game.ContentManager.Dispose(System.String)">
            <summary>
            可能需要带上文件后缀，即获取名字+获取的后缀
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Game.FastDebugModEntity.GetFiles(System.String,System.Action{System.String,System.IO.Stream})">
            <summary>
            获取指定后缀文件列表，带.
            </summary>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="T:Game.JsonModelReader">
             此处基础坐标系为YZX
             
            
        </member>
        <member name="F:Game.LanguageControl.LanguageTypes">
            <summary>
            语言标识符、与相应的CultureInfo
            </summary>
        </member>
        <member name="M:Game.LanguageControl.LName">
            <returns>当前语言的标识符</returns>
        </member>
        <member name="M:Game.LanguageControl.Get(System.String,System.Int32)">
            <summary>
            获取在当前语言类名键对应的字符串
            </summary>
            <param name="className">类名</param>
            <param name="key">键</param>
            <returns>本地化字符串</returns>
        </member>
        <member name="M:Game.ModEntity.GetFiles(System.String,System.Action{System.String,System.IO.Stream})">
            <summary>
            获取模组的文件时调用。
            </summary>
            <param name="extension">文件扩展名</param>
            <param name="action">参数1文件名参数，2打开的文件流</param>
        </member>
        <member name="M:Game.ModEntity.GetFilesAndExist(System.String,System.Action{System.String,System.IO.Stream})">
            <param name="extension">文件扩展名</param>
            <param name="action">参数1文件名参数，2打开的文件流</param>
            <return>列表是否为空</return>
        </member>
        <member name="M:Game.ModEntity.GetFile(System.String,System.Action{System.IO.Stream})">
            <summary>
            获取指定文件
            </summary>
            <param name="filename"></param>
            <param name="stream">参数1打开的文件流</param>
            <returns></returns>
        </member>
        <member name="M:Game.ModEntity.LoadLauguage">
            <summary>
            初始化语言包
            </summary>
        </member>
        <member name="M:Game.ModEntity.ModInitialize">
            <summary>
            Mod初始化
            </summary>
        </member>
        <member name="M:Game.ModEntity.InitResources">
            <summary>
            初始化Content资源
            </summary>
        </member>
        <member name="M:Game.ModEntity.LoadBlocksData">
            <summary>
            初始化BlocksData资源
            </summary>
        </member>
        <member name="M:Game.ModEntity.LoadXdb(System.Xml.Linq.XElement@)">
            <summary>
            初始化Database数据
            </summary>
            <param name="xElement"></param>
        </member>
        <member name="M:Game.ModEntity.LoadClo(Game.ClothingBlock,System.Xml.Linq.XElement@)">
            <summary>
            初始化Clothing数据
            </summary>
            <param name="block"></param>
            <param name="xElement"></param>
        </member>
        <member name="M:Game.ModEntity.LoadCr(System.Xml.Linq.XElement@)">
            <summary>
            初始化CraftingRecipe
            </summary>
            <param name="xElement"></param>
        </member>
        <member name="M:Game.ModEntity.GetAssemblies">
            <summary>
            加载mod程序集
            </summary>
        </member>
        <member name="M:Game.ModEntity.CheckDependencies(System.Collections.Generic.List{Game.ModEntity})">
            <summary>
            检查依赖项
            </summary>
        </member>
        <member name="M:Game.ModEntity.SaveSettings(System.Xml.Linq.XElement)">
            <summary>
            保存设置
            </summary>
            <param name="xElement"></param>
        </member>
        <member name="M:Game.ModEntity.LoadSettings(System.Xml.Linq.XElement)">
            <summary>
            加载设置
            </summary>
            <param name="xElement"></param>
        </member>
        <member name="M:Game.ModEntity.OnBlocksInitalized">
            <summary>
            BlocksManager初始化完毕
            </summary>
        </member>
        <member name="F:Game.ModInfo.NonPersistentMod">
            <summary>
            该项为true表示：在存档中不记录该模组的modInfo，当玩家在未装载该模组，并运行之前带有该模组的存档时，不报错
            适用于不在存档中存储特殊信息的辅助模组
            </summary>
        </member>
        <member name="M:Game.ModListManager.InspectionModLists(System.String)">
             <summary>
            检查文件夹中各个整合包（更新和补充） 
             </summary>
             <param name="folderPath">按照系统格式的文件夹路径</param>
             <returns></returns>
        </member>
        <member name="M:Game.ModListManager.AnalysisModList(System.String)">
             <summary>
            解析整合包文件 
            可以用整合包的模组路径代替全局模组路径
             </summary>
             <param name="filePath">整合包的路径</param>
             <returns>整合包的模组路径</returns>
        </member>
        <member name="M:Game.ModLoader.__ModInitialize">
            <summary>
            当ModLoader类被实例化时执行
            </summary>
        </member>
        <member name="M:Game.ModLoader.GetModFiles(System.String,System.Action{System.String,System.IO.Stream},System.Boolean@)">
            <summary>
            在加载本模组的资源时触发。
            注意：模组的dll只能由原版逻辑加载
            </summary>
            <param name="extension">准备调用的文件的扩展名</param>
            <param name="action">执行的操作</param>
            <param name="skip">跳过SC本体对模组获取文件的执行。由于该方法只会在调用你的模组的资源时触发，所以不必担心兼容性问题。</param>
        </member>
        <member name="M:Game.ModLoader.GetModFile(System.String,System.Action{System.IO.Stream},System.Boolean@,System.Boolean@)">
            <summary>
            在系统读取本模组的文件时触发
            注意：modinfo文件、mod图标只能由原版逻辑加载。如果需要修改调整，请自己在模组中重新写一遍加载逻辑
            </summary>
            <param name="filename">获取模组文件的名称或前缀</param>
            <param name="stream">文件流</param>
            <param name="skip">跳过SC本体对模组获取文件的执行。由于该方法只会在调用你的模组的资源时触发，所以不必担心兼容性问题。</param>
            <param name="fileFound">在skip过后，返回是否得到文件</param>
        </member>
        <member name="M:Game.ModLoader.CompareModVersion(System.String,System.String)">
            <summary>
            在加载存档前，比较当前模组的版本和存档上次使用模组的版本
            仅比较本模组
            </summary>
            <param name="currentVersion">当前模组的版本</param>
            <param name="lastVersion">存档上一次使用模组的版本</param>
            <returns>返回true表示当前版本模组能加载目标版本模组的存档，返回false则不加载</returns>
        </member>
        <member name="M:Game.ModLoader.ModDispose">
            <summary>
            Mod被卸载时执行
            </summary>
        </member>
        <member name="M:Game.ModLoader.ViewFogColor(System.Single,System.Single,Engine.Color@)">
            <summary>
            视图雾颜色调整
            </summary>
            <param name="ViewUnderWaterDepth">大于0则表示在水下</param>
            <param name="ViewUnderMagmaDepth">大于0则表示在岩浆中</param>
            <param name="viewFogColor">视图雾颜色</param>
        </member>
        <member name="M:Game.ModLoader.CalculateLighting(System.Single@)">
            <summary>
            方块亮度
            （黑暗区域亮度）
            </summary>
            <param name="brightness">亮度值</param>
        </member>
        <member name="M:Game.ModLoader.OnMinerHit(Game.ComponentMiner,Game.ComponentBody,Engine.Vector3,Engine.Vector3,System.Single@,System.Single@,System.Single@,System.Boolean@)">
            <param name="attackPower">伤害值</param>
            <param name="playerProbability">玩家命中率</param>
            <param name="creatureProbability">生物命中率</param>
        </member>
        <member name="M:Game.ModLoader.SetHitInterval(Game.ComponentMiner,System.Double@)">
            <summary>
            设置伤害间隔
            </summary>
        </member>
        <member name="M:Game.ModLoader.OnMinerHit2(Game.ComponentMiner,Game.ComponentBody,Engine.Vector3,Engine.Vector3,System.Int32@,Game.Attackment@)">
            <summary>
            在生物攻击时执行
            </summary>
            <param name="componentMiner">攻击者</param>
            <param name="componentBody">被攻击方的ComponentBody</param>
            <param name="hitPoint">命中点</param>
            <param name="hitDirection">命中时的击退方向</param>
            <param name="durabilityReduction">攻击后，手中武器掉的耐久量</param>
            <param name="attackment">发起的攻击</param>
        </member>
        <member name="M:Game.ModLoader.OnMinerDig(Game.ComponentMiner,Game.TerrainRaycastResult,System.Single@,System.Boolean@)">
            <summary>
            当人物挖掘时执行
            </summary>
            <param name="miner"></param>
            <param name="raycastResult"></param>
            <returns></returns>
        </member>
        <member name="M:Game.ModLoader.BeforeMinerPlace(Game.ComponentMiner,Game.TerrainRaycastResult,System.Int32,System.Int32,System.Int32,Game.BlockPlacementData,System.Boolean@)">
            <summary>
            在人物放置时执行，在OnMinerPlace之前
            </summary>
            <param name="componentMiner"></param>
            <param name="terrainRaycastResult"></param>
            <param name="x">放置方块的坐标x</param>
            <param name="y">放置方块的坐标y</param>
            <param name="z">放置方块的坐标z</param>
            <param name="placementData">包含放置方块的方块表面等信息</param>
            <param name="PlacementNotAllowed">返回true则玩家不能放置方块</param>
        </member>
        <member name="M:Game.ModLoader.OnMinerPlace(Game.ComponentMiner,Game.TerrainRaycastResult,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            当人物放置时执行，若Placed为true则不执行原放置操作
            </summary>
            <param name="miner"></param>
            <param name="raycastResult"></param>
            <returns></returns>
        </member>
        <member name="M:Game.ModLoader.SetRainAndSnowColor(Engine.Color@,Engine.Color@)">
            <summary>
            设置雨和雪的颜色
            </summary>
            <param name="rainColor"></param>
            <param name="snowColor"></param>
            <returns></returns>
        </member>
        <member name="M:Game.ModLoader.SetFurnitureDesignColor(Game.FurnitureDesign,Game.Block,System.Int32,System.Int32@,Engine.Color@)">
            <summary>
            设置家具的颜色
            </summary>
        </member>
        <member name="M:Game.ModLoader.AttackPowerParameter(Game.ComponentBody,Game.ComponentCreature,Engine.Vector3,Engine.Vector3,System.Single@,System.Single@,System.Boolean@)">
            <summary>
            更改击退和晕眩效果
            </summary>
            <param name="target">目标</param>
            <param name="attacker">攻击者</param>
            <param name="hitPoint">伤害位置</param>
            <param name="impulseFactor">击退效果</param>
            <param name="stunTimeFactor">眩晕时间</param>
            <param name="recalculate">是否重写眩晕？</param>
        </member>
        <member name="M:Game.ModLoader.ClothingProcessSlotItems(Game.ComponentPlayer,Game.Block,System.Int32,System.Int32,System.Int32)">
            <returns>如果为 true：不移交到下一个 mod 处理</returns>
        </member>
        <member name="M:Game.ModLoader.OnEatPickable(Game.ComponentEatPickableBehavior,Game.Pickable,System.Boolean@)">
            <summary>
            动物吃掉落物时执行
            </summary>
        </member>
        <member name="M:Game.ModLoader.OnPlayerSpawned(Game.PlayerData.SpawnMode,Game.ComponentPlayer,Engine.Vector3)">
            <summary>
            人物出生时执行
            </summary>
        </member>
        <member name="M:Game.ModLoader.OnPlayerDead(Game.PlayerData)">
            <summary>
            当人物死亡时执行。在玩家进入世界且玩家处于死亡状态时也会执行
            可以通过playerData.m_stateMachine.PreviousState == "Playing"，来判断是刚死的，还是加载世界的时候就已经死了。并规避由于退出重进世界造成的“反复死亡判断”bug
            </summary>
            <param name="playerData"></param>
        </member>
        <member name="M:Game.ModLoader.AttackBody(Game.ComponentBody,Game.ComponentCreature,Engine.Vector3,Engine.Vector3,System.Single@,System.Boolean)">
            <summary>
            当Miner执行AttackBody方法时执行
            </summary>
            <param name="target"></param>
            <param name="attacker"></param>
            <param name="hitPoint"></param>
            <param name="hitDirection"></param>
            <param name="attackPower"></param>
            <param name="isMeleeAttack"></param>
            <returns>false移交到下一个Mod处理,true不移交</returns>
        </member>
        <member name="M:Game.ModLoader.ProcessAttackment(Game.Attackment)">
            <summary>
            在攻击时执行
            </summary>
            <param name="attackment"></param>
        </member>
        <member name="M:Game.ModLoader.OnSetModel(Game.ComponentModel,Engine.Graphics.Model,System.Boolean@)">
            <summary>
            当模型对象进行模型设值时执行
            </summary>
        </member>
        <member name="M:Game.ModLoader.OnModelAnimate(Game.ComponentCreatureModel,System.Boolean@)">
            <summary>
            当动物模型对象作出动画时执行
            Skip为是否跳过原动画代码
            </summary>
        </member>
        <member name="M:Game.ModLoader.ApplyArmorProtection(Game.ComponentClothing,System.Single,System.Boolean,System.Boolean@)">
            <summary>
            计算护甲免伤时执行
            </summary>
            <param name="componentClothing"></param>
            <param name="attackPower">未计算免伤前的伤害</param>
            <returns>免伤后的伤害，当多个mod都有免伤计算时，取最小值</returns>
        </member>
        <member name="M:Game.ModLoader.OnLevelUpdate(Game.ComponentLevel)">
            <summary>
            等级组件更新时执行
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Game.ModLoader.OnFactorsUpdate(Game.ComponentFactors,System.Single)">
            <summary>
            因素控制力量、抗性、速度、饥饿速率组件更新时执行
            </summary>
            <param name="componentFactors"></param>
        </member>
        <member name="M:Game.ModLoader.GuiUpdate(Game.ComponentGui)">
            <summary>
            Gui组件帧更新时执行
            </summary>
            <param name="componentGui"></param>
        </member>
        <member name="M:Game.ModLoader.GuiDraw(Game.ComponentGui,Game.Camera,System.Int32)">
            <summary>
            Gui组件绘制时执行
            </summary>
            <param name="componentGui"></param>
            <param name="camera"></param>
            <param name="drawOrder"></param>
        </member>
        <member name="M:Game.ModLoader.UpdateInput(Game.ComponentInput,Game.WidgetInput)">
            <summary>
            更新输入时执行
            </summary>
            <param name="componentInput"></param>
        </member>
        <member name="M:Game.ModLoader.DrawToScreen(Game.ViewWidget,Game.Widget.DrawContext)">
            <summary>
            ViewWidget绘制屏幕时执行
            </summary>
        </member>
        <member name="M:Game.ModLoader.ClothingWidgetOpen(Game.ComponentGui,Game.ClothingWidget)">
            <summary>
            衣物背包界面被打开时执行
            </summary>
            <param name="componentGui"></param>
            <param name="clothingWidget"></param>
        </member>
        <member name="M:Game.ModLoader.OnBlockExploded(Game.SubsystemTerrain,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            当方块被炸掉时执行
            </summary>
        </member>
        <member name="M:Game.ModLoader.OnEntityAdd(GameEntitySystem.Entity)">
            <summary>
            当实体被添加时执行
            </summary>
        </member>
        <member name="M:Game.ModLoader.OnEntityRemove(GameEntitySystem.Entity)">
            <summary>
            当实体被移除时执行
            </summary>
        </member>
        <member name="M:Game.ModLoader.InitializeCreatureTypes(Game.SubsystemCreatureSpawn,System.Collections.Generic.List{Game.SubsystemCreatureSpawn.CreatureType})">
            <summary>
            自然生成生物列表初始化时执行
            </summary>
            <param name="spawn"></param>
            <param name="creatureTypes"></param>
        </member>
        <member name="M:Game.ModLoader.SpawnEntity(Game.SubsystemSpawn,GameEntitySystem.Entity,Game.SpawnEntityData,System.Boolean@)">
            <summary>
            生物出生时执行
            </summary>
            <param name="spawn"></param>
            <param name="entity"></param>
            <param name="spawnEntityData"></param>
        </member>
        <member name="M:Game.ModLoader.OnDespawned(GameEntitySystem.Entity,Game.ComponentSpawn)">
            <summary>
            当生物消失时执行
            </summary>
            <param name="entity"></param>
            <param name="componentSpawn"></param>
        </member>
        <member name="M:Game.ModLoader.OnComponentBodyExploded(Game.ComponentBody,Game.Injury@,Engine.Vector3@,System.Boolean@,System.Single@)">
            <summary>
            生物等实体在遭受爆炸时执行
            </summary>
            <param name="componentBody">遭受爆炸的实体Body</param>
            <param name="explosionInjury">该爆炸的Injuty</param>
            <param name="Impulse">爆炸的击退力</param>
            <param name="SetOnFire">爆炸是否会让实体着火</param>
            <param name="Fluctuation">爆炸的击退、伤害浮动系数。目前只对非生物的船等实体有效</param>
        </member>
        <member name="M:Game.ModLoader.DeadBeforeDrops(Game.ComponentHealth,Game.KillParticleSystem@,System.Boolean@)">
            <summary>
            死亡前瞬间执行
            </summary>
        </member>
        <member name="M:Game.ModLoader.TerrainChangeCell(Game.SubsystemTerrain,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            重定义方块更改方法，Skip为true则不执行原ChangeCell代码
            </summary>
        </member>
        <member name="M:Game.ModLoader.OnCreatureInjure(Game.ComponentHealth,System.Single,Game.ComponentCreature,System.Boolean,System.String,System.Boolean@)">
            <summary>
            重定义生物受伤方法，Skip为true则不执行原Injure代码
            </summary>
        </member>
        <member name="M:Game.ModLoader.CalculateCreatureInjuryAmount(Game.Injury)">
            <summary>
            计算生物收到伤害的量
            </summary>
        </member>
        <member name="M:Game.ModLoader.OnCreatureDying(Game.ComponentHealth,Game.Injury)">
            <summary>
            如果动物受到Injure且生命值小于0时，执行操作。
            如果在函数执行完毕后Health > 0，则取消死亡判定。
            通常用于各种模组的“不死图腾”机制
            </summary>
            <param name="componentHealth"></param>
        </member>
        <member name="M:Game.ModLoader.OnCreatureDied(Game.ComponentHealth,Game.Injury,System.Int32@,System.Boolean@)">
            <summary>
            在动物收到Injure()且生命值低于0时，执行操作。
            </summary>
            <param name="componentHealth"></param>
        </member>
        <member name="M:Game.ModLoader.ChangeVisualEffectOnInjury(Game.ComponentHealth,System.Single,System.Single@,System.Boolean@,System.Int32@,System.Single@)">
            <summary>
            每帧更新的时候，调整血量带来的视觉效果
            </summary>
            <param name="componentHealth"></param>
            <param name="lastHealth">在扣血之前的生命值</param>
            <param name="redScreenFactor">玩家的红屏效果</param>
            <param name="playPainSound">是否播放受伤音效</param>
            <param name="healthBarFlashCount">玩家血条闪烁次数</param>
            <param name="creatureModelRedFactor">生物模型变红，为0时不变红，为1时完全红色</param>
        </member>
        <member name="M:Game.ModLoader.ChangeSkyColor(Engine.Color,Engine.Vector3,System.Single,System.Int32)">
            <summary>
            更改天空颜色
            </summary>
        </member>
        <member name="M:Game.ModLoader.SetShaderParameter(Engine.Graphics.Shader,Game.Camera)">
            <summary>
            设置着色器参数
            </summary>
            <param name="shader"></param>
            <param name="camera"></param>
        </member>
        <member name="M:Game.ModLoader.ModelShaderParameter(Engine.Graphics.Shader,Game.Camera,System.Collections.Generic.List{Game.SubsystemModelsRenderer.ModelData},System.Nullable{System.Single})">
            <summary>
            更改模型着色器参数的值
            </summary>
        </member>
        <member name="M:Game.ModLoader.SkyDrawExtra(Game.SubsystemSky,Game.Camera)">
            <summary>
            天空额外绘制
            </summary>
        </member>
        <member name="M:Game.ModLoader.GetMaxInstancesCount">
            <summary>
            设置生物最大组件数，多个Mod时取最大
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.ModLoader.OnModelRendererDrawExtra(Game.SubsystemModelsRenderer,Game.SubsystemModelsRenderer.ModelData,Game.Camera,System.Nullable{System.Single})">
            <summary>
            绘制额外模型数据的方法，如人物头顶的名字
            </summary>
            <param name="modelsRenderer"></param>
            <param name="modelData">正在绘制的模型</param>
            <param name="camera"></param>
            <param name="alphaThreshold"></param>
        </member>
        <member name="M:Game.ModLoader.SetHitValueParticleSystem(Game.HitValueParticleSystem,Game.Attackment)">
            <summary>
            设定伤害粒子参数
            </summary>
            <param name="hitValueParticleSystem">粒子</param>
            <param name="attackment">产生该攻击粒子的攻击，为null表示攻击没有命中</param>
        </member>
        <member name="M:Game.ModLoader.OnSaveSpawnData(Game.ComponentSpawn,Game.SpawnEntityData)">
            <summary>
            当储存生物数据时
            </summary>
            <param name="spawn"></param>
            <param name="spawnEntityData"></param>
        </member>
        <member name="M:Game.ModLoader.OnReadSpawnData(GameEntitySystem.Entity,Game.SpawnEntityData)">
            <summary>
            当读取生物数据时
            </summary>
        </member>
        <member name="M:Game.ModLoader.OnTerrainContentsGenerated(Game.TerrainChunk)">
            <summary>
            区块地形生成时
            注意此方法运行在子线程中
            </summary>
            <param name="chunk"></param>
        </member>
        <member name="M:Game.ModLoader.ToFreeChunks(Game.TerrainUpdater,Game.TerrainChunk,System.Boolean@)">
            <summary>
            当区块即将被释放时
            KeepWorking为True时该区块会继续保持运作，不被释放
            </summary>
        </member>
        <member name="M:Game.ModLoader.ToAllocateChunks(Game.TerrainUpdater,Game.TerrainUpdater.UpdateLocation[])">
            <summary>
            加载指定区块,如有区块数变动返回 true，否则返回 false
            </summary>
        </member>
        <member name="M:Game.ModLoader.SubsystemUpdate(System.Single)">
            <summary>
            子系统帧更新时执行
            </summary>
        </member>
        <member name="M:Game.ModLoader.OnProjectLoaded(GameEntitySystem.Project)">
            <summary>
            当Project被加载时执行
            </summary>
            <param name="project"></param>
        </member>
        <member name="M:Game.ModLoader.OnProjectDisposed">
            <summary>
            当Project被释放时执行
            </summary>
        </member>
        <member name="M:Game.ModLoader.BlocksInitalized">
            <summary>
            方块初始化完成时执行
            </summary>
        </member>
        <member name="M:Game.ModLoader.BeforeGameLoading(Game.PlayScreen,System.Object)">
            <summary>
            存档开始加载前执行
            </summary>
            <param name="playScreen">世界选择界面</param>
            <param name="item">类型为WorldInfo，存储即将进入的存档信息</param>
            <returns>返回类型应当保证为WorldInfo，返回null可以阻止玩家进入存档</returns>
        </member>
        <member name="M:Game.ModLoader.OnLoadingStart(System.Collections.Generic.List{System.Action})">
            <summary>
            加载任务开始时执行
            在BlocksManager初始化之前
            </summary>
        </member>
        <member name="M:Game.ModLoader.OnLoadingFinished(System.Collections.Generic.List{System.Action})">
            <summary>
            加载任务结束时执行
            在BlocksManager初始化之后
            </summary>
            <param name="actions"></param>
        </member>
        <member name="M:Game.ModLoader.SaveSettings(System.Xml.Linq.XElement)">
            <summary>
            模组设置保存时执行
            </summary>
            <param name="xElement">一个空容器，模组作者需将自己的设置信息存入这个空容器内</param>
        </member>
        <member name="M:Game.ModLoader.LoadSettings(System.Xml.Linq.XElement)">
            <summary>
            模组设置加载时执行
            模组作者有必要在读取模组设置后将设置数据放入自己的类或结构中
            API在运行时不会保存着模组设置
            </summary>
            <param name="xElement"></param>
        </member>
        <member name="M:Game.ModLoader.OnXdbLoad(System.Xml.Linq.XElement)">
            <summary>
            Xdb文件加载时执行
            </summary>
            <param name="xElement"></param>
        </member>
        <member name="M:Game.ModLoader.ProjectXmlLoad(System.Xml.Linq.XElement)">
            <summary>
            Project.xml加载时执行
            </summary>
            <param name="xElement"></param>
        </member>
        <member name="M:Game.ModLoader.ProjectXmlSave(System.Xml.Linq.XElement)">
            <summary>
            Project.xml保存时执行
            </summary>
            <param name="xElement"></param>
        </member>
        <member name="M:Game.ModLoader.OnProjectXmlSaved(System.Xml.Linq.XElement)">
            <summary>
            Project.xml在所有的Entity和Subsystem保存完毕后再执行
            </summary>
            <param name="xElement"></param>
        </member>
        <member name="M:Game.ModLoader.OnCraftingRecipeDecode(System.Collections.Generic.List{Game.CraftingRecipe},System.Xml.Linq.XElement,System.Boolean@)">
            <summary>
            配方解码时执行
            </summary>
            <param name="element">配方的Xelement</param>
            <param name="Decoded">是否解码成功，不成功交由下一个Mod处理</param>
        </member>
        <member name="M:Game.ModLoader.MatchRecipe(System.String[],System.String[],System.Boolean@)">
            <summary>
            配方匹配时执行
            </summary>
            <param name="requiredIngredients"></param>
            <param name="actualIngredient"></param>
            <param name="Matched">是否匹配成功，不成功交由下一个Mod处理</param>
        </member>
        <member name="M:Game.ModLoader.DecodeResult(System.String,System.Boolean@)">
            <summary>
            获得解码结果时执行
            </summary>
            <param name="result">结果字符串</param>
            <param name="Decoded">是否解码成功，不成功交由下一个Mod处理</param>
            <returns></returns>
        </member>
        <member name="M:Game.ModLoader.DecodeIngredient(System.String,System.String@,System.Nullable{System.Int32}@,System.Boolean@)">
            <summary>
            解码配方
            </summary>
            <param name="ingredient"></param>
            <param name="craftingId"></param>
            <param name="data"></param>
            <param name="Decoded">是否解码成功，不成功交由下一个Mod处理</param>
        </member>
        <member name="M:Game.ModLoader.OnCameraChange(Game.ComponentPlayer,Game.ComponentGui)">
            <summary>
            改变相机模式时执行
            </summary>
            <param name="m_componentPlayer"></param>
            <param name="componentGui"></param>
        </member>
        <member name="M:Game.ModLoader.OnCapture">
            <summary>
            屏幕截图时执行
            </summary>
        </member>
        <member name="M:Game.ModLoader.MenuPlayMusic(System.String@)">
            <summary>
            更改主页背景音乐
            </summary>
        </member>
        <member name="M:Game.ModLoader.CallNearbyCreaturesHelp(Game.ComponentHerdBehavior,Game.ComponentCreature,System.Single,System.Single,System.Boolean)">
            <summary>
            摇人行为
            </summary>
            <param name="herdBehavior"></param>
            <param name="target"></param>
            <param name="maxRange"></param>
            <param name="maxChaseTime"></param>
            <param name="isPersistent"></param>
        </member>
        <member name="M:Game.ModLoader.OnTreasureGenerate(Game.SubsystemTerrain,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            挖掘触发宝物生成时，注意这里能获取到上个Mod生成宝物的情况
            </summary>
            <param name="BlockValue">宝物的方块值</param>
            <param name="Count">宝物数量</param>
            <param name="IsGenerate">是否继续让其它Mod处理</param>
        </member>
        <member name="M:Game.ModLoader.OnWidgetConstruct(Game.Widget@)">
            <summary>
            当界面被创建时
            </summary>
            <param name="widget"></param>
        </member>
        <member name="M:Game.ModLoader.BeforeWidgetDrawItemRender(Game.Widget.DrawItem,System.Boolean@,System.Action@,Engine.Rectangle@,Game.Widget.DrawContext)">
            <summary>
            在 DrawItem 被绘制前。
            </summary>
            <param name="drawItem">被绘制的 DrawItem。</param>
            <param name="skipVanillaDraw">是否跳过原版绘制代码。</param>
            <param name="afterWidgetDraw">原版绘制完成后的回调。</param>
            <param name="scissorRectangle">绘制时的 ScissorRectangle。</param>
            <param name="drawContext">绘制上下文。</param>
        </member>
        <member name="M:Game.ModLoader.OnDrawItemAssigned(Game.Widget.DrawContext)">
            <summary>
            在 DrawItem 排序后。
            </summary>
            <param name="drawContext">绘制上下文。</param>
        </member>
        <member name="M:Game.ModLoader.OnModalPanelWidgetSet(Game.ComponentGui,Game.Widget,Game.Widget)">
            <summary>
            当ModalPanelWidget被设置时执行
            </summary>
            <param name="Old"></param>
            <param name="New"></param>
        </member>
        <member name="M:Game.ModLoader.GenerateChunkVertices(Game.TerrainChunk,System.Boolean)">
            <summary>
            生成地形顶点时使用
            </summary>
            <param name="chunk"></param>
        </member>
        <member name="M:Game.ModLoader.GenerateChunkLightSources(Engine.DynamicArray{Game.TerrainUpdater.LightSource},Game.TerrainChunk)">
            <summary>
            生成光源数据
            </summary>
            <param name="lightSources">光源</param>
            <param name="chunk">区块</param>
        </member>
        <member name="M:Game.ModLoader.CalculateSmoothLight(Game.SubsystemTerrain,Engine.Vector3,System.Single@)">
            <summary>
            计算动物模型光照
            </summary>
            <param name="subsystemTerrain"></param>
            <param name="p">动物位置</param>
            <param name="num">原版计算出来的强度</param>
        </member>
        <member name="M:Game.ModLoader.WindowModeChanged(Engine.WindowMode)">
            <summary>
            当窗口模式改变时执行。
            </summary>
        </member>
        <member name="M:Game.ModLoader.DamageItem(Game.Block,System.Int32,System.Int32,GameEntitySystem.Entity,System.Boolean@)">
            <summary>
            在执行DamageItem得到方块掉耐久后，得到的新方块值时执行
            </summary>
            <param name="block"></param>
            <param name="oldValue">方块的旧值</param>
            <param name="damageCount">损害的耐久量</param>
            <param name="owner">方块的拥有者</param>
            <param name="skipVanilla">跳过原版执行逻辑</param>
            <returns></returns>
        </member>
        <member name="M:Game.ModLoader.OnProjectileHitTerrain(Game.Projectile,Game.TerrainRaycastResult,System.Boolean@,System.Boolean@,System.Single@,System.Boolean@,Engine.Vector3@,Engine.Vector3@)">
            <summary>
            当射弹击中方块时执行
            </summary>
            <param name="projectile">射弹</param>
            <param name="terrainRaycastResult">地形映射结果</param>
            <param name="triggerBlocksBehavior">是否执行被命中的方块行为</param>
            <param name="destroyCell">是否破坏被击中的方块</param>
            <param name="impactSoundLoudness">发出的声音大小</param>
            <param name="projectileGetStuck">射弹是否会被卡在方块里面</param>
            <param name="velocityAfterHit">在击中方块后，射弹的速度</param>
            <param name="angularVelocityAfterHit">在击中方块后，射弹的角速度</param>
        </member>
        <member name="M:Game.ModLoader.OnProjectileHitBody(Game.Projectile,Game.BodyRaycastResult,Game.Attackment@,Engine.Vector3@,Engine.Vector3@,System.Boolean@)">
            <summary>
            当射弹击中生物、船只等实体时执行
            </summary>
            <param name="projectile">射弹</param>
            <param name="bodyRaycastResult">实体映射结果</param>
            <param name="attackment">该射弹命中实体时，执行的攻击。可以调整attackment的攻击力等数据</param>
            <param name="velocityAfterAttack">在击中方块后，射弹的速度</param>
            <param name="angularVelocityAfterAttack">在击中方块后，射弹的角速度</param>
            <param name="ignoreBody">射弹行进直接穿过该生物。射弹后续的更新会忽略该生物，速度和角速度保持原状。攻击照常执行。</param>
        </member>
        <member name="M:Game.ModLoader.OnProjectileDraw(Game.Projectile,Game.SubsystemProjectiles,Game.Camera,System.Int32,System.Boolean@,System.Single@,Engine.Color@)">
            <summary>
            绘制射弹的时候执行
            </summary>
            <param name="projectile">射弹</param>
            <param name="subsystemProjectiles">该子系统，可以从中获取项目和其他子系统</param>
            <param name="camera"></param>
            <param name="drawOrder"></param>
            <param name="shouldDrawBlock">是否执行原版绘制方块的方法</param>
            <param name="drawBlockSize">绘制方块大小</param>
            <param name="drawBlockColor">绘制方块颜色</param>
        </member>
        <member name="M:Game.ModLoader.OnProjectileFlyOutOfLoadedChunks(Game.Projectile)">
            <summary>
            射弹离开加载区块的时候执行
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:Game.ModLoader.OnPickableDraw(Game.Pickable,Game.SubsystemPickables,Game.Camera,System.Int32,System.Boolean@,System.Single@,Engine.Color@)">
            <summary>
            绘制掉落物的时候执行
            </summary>
            <param name="pickable"></param>
            <param name="subsystemPickables"></param>
            <param name="camera"></param>
            <param name="drawOrder"></param>
            <param name="shouldDrawBlock">是否执行原版绘制方块的方法</param>
            <param name="drawBlockSize"></param>
            <param name="drawBlockColor"></param>
        </member>
        <member name="M:Game.ModLoader.UpdateComponentBody(Game.ComponentBody,System.Single,System.Boolean,System.Boolean@)">
            <summary>
            执行动物的Update操作。
            建议只在对自己模组的动物才进行带skip的覆盖原版的操作；对原版和其他模组的动物，请不要过多干涉覆盖原有的操作
            </summary>
            <param name="componentBody"></param>
            <param name="dt">动物位置</param>
            <param name="skipVanilla">跳过原版的更新操作</param>
            <param name="skippedByOtherMods">前面的mod已经执行了带skip操作的Update</param>
        </member>
        <member name="M:Game.ModLoader.BodyCountInRaycast(Game.ComponentBody,Engine.Ray3,System.Boolean@)">
            <summary>
            计算动物在Raycast下的表现。输出null表示这个body不计入Raycast结果；输出一个具体的数值表示Raycast计算出来的距离。
            </summary>
            <param name="componentBody"></param>
            <param name="ray">动物位置</param>
            <param name="skip">原版计算出来的强度</param>
        </member>
        <member name="M:Game.ModLoader.OnMovingBlockSetAdded(Game.SubsystemMovingBlocks.MovingBlockSet@,Game.SubsystemMovingBlocks,System.Boolean@,System.Boolean@)">
            <summary>
            在添加移动方块时触发
            </summary>
            <param name="movingBlockSet"></param>
            <param name="subsystemMovingBlocks"></param>
            <param name="testCollision">对应原方法的TestCollision部分</param>
            <param name="doNotAdd">取消添加移动方块</param>
        </member>
        <member name="M:Game.ModLoader.OnMovingBlockSetRemoved(Game.IMovingBlockSet,Game.SubsystemMovingBlocks)">
            <summary>
            移除移动方块时触发
            </summary>
            <param name="movingBlockSet"></param>
            <param name="subsystemMovingBlocks"></param>
        </member>
        <member name="M:Game.ModLoader.OnMovingBlockSetUpdate(Game.IMovingBlockSet,Game.SubsystemMovingBlocks,System.Boolean,System.Boolean@)">
            <summary>
            在移动方块更新时触发
            </summary>
            <param name="movingBlockSet"></param>
            <param name="subsystemMovingBlocks"></param>
            <param name="skippedByOtherMods">是否已被其他模组抢先执行更新</param>
            <param name="skipVanilla">是否跳过原版执行更新（抢先更新）</param>
        </member>
        <member name="M:Game.ModLoader.OnProjectileAdded(Game.SubsystemProjectiles,Game.Projectile@,TemplatesDatabase.ValuesDictionary)">
            <summary>
            游戏中添加射弹时触发
            </summary>
            <param name="subsystemProjectiles"></param>
            <param name="projectile"></param>
            <param name="loadValuesDictionary">如果是加载世界过程中首次添加，那么会提供该射弹的相关ValuesDictionary；如果是游戏进行过程中添加，则为null</param>
        </member>
        <member name="M:Game.ModLoader.OnPickableAdded(Game.SubsystemPickables,Game.Pickable@,TemplatesDatabase.ValuesDictionary)">
            <summary>
            游戏中添加掉落物时触发
            </summary>
            <param name="subsystemPickables"></param>
            <param name="pickable"></param>
            <param name="loadValuesDictionary">如果是加载世界过程中首次添加，那么会提供该射弹的相关ValuesDictionary；如果是游戏进行过程中添加，则为null</param>
        </member>
        <member name="M:Game.ModLoader.SaveProjectile(Game.SubsystemProjectiles,Game.Projectile,TemplatesDatabase.ValuesDictionary@)">
            <summary>
            保存世界时，存储射弹信息
            </summary>
            <param name="subsystemProjectiles"></param>
            <param name="projectile"></param>
            <param name="valuesDictionary">存储射弹信息的ValuesDictionaey</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Game.ModLoader.SavePickable(Game.SubsystemPickables,Game.Pickable,TemplatesDatabase.ValuesDictionary@)">
            <summary>
            保存世界时，存储掉落物信息
            </summary>
            <param name="subsystemPickables"></param>
            <param name="pickable"></param>
            <param name="valuesDictionary">存储掉落物信息的ValuesDictionary</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Game.ModLoader.OnBlockDug(Game.ComponentMiner,Game.BlockPlacementData,System.Int32,System.Int32@,System.Boolean@,System.Int32@)">
            <summary>
            在方块被挖掘完毕时执行
            </summary>
            <param name="componentMiner"></param>
            <param name="digValue"></param>
            <param name="DurabilityReduction">挖掘方块所消耗工具的耐久</param>
            <param name="mute">挖掘方块是否取消播放音效</param>
            <param name="PlayerDataDugAdd">是否增加玩家统计信息的挖掘方块计数</param>
        </member>
        <member name="M:Game.ModLoader.ChangeGameTimeDelta(Game.SubsystemTime,System.Single@)">
            <summary>
            改变SubsystemTime的时间推移速度，偏向底层，一般开发者不必了解
            </summary>
            <param name="subsystemTime"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Game.ModLoader.OnIUpdateableAddOrRemove(Game.SubsystemUpdate,Game.IUpdateable,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            在IUpdateable添加或删除时执行，用于模组接管IUpdateable的更新行为
            （如恒泰模组将动物放在多线程中进行更新，降低怪物数量多导致的卡顿）
            </summary>
            <param name="subsystemUpdate"></param>
            <param name="updateable"></param>
            <param name="ToAdd1OrRemove0">这个IUpdateable是准备添加的，该变量为1；这个IUpdateable是准备移除的，该变量为0</param>
            <param name="skippedByOtherMods">是否已经被其他模组接管</param>
            <param name="skip">宣布接管，则不会被原版的SubsystemUpdate执行Update()</param>
        </member>
        <member name="M:Game.ModLoader.OnIDrawableAdded(Game.SubsystemDrawing,Game.IDrawable,System.Boolean,System.Boolean@)">
            <summary>
            在IDrawable添加或删除时执行，用于模组接管IDrawable的绘制行为
            </summary>
            <param name="subsystemDrawing"></param>
            <param name="drawable"></param>
            <param name="skippedByOtherMods">是否已经被其他模组接管</param>
            <param name="skip">宣布接管，该IDrawable不会放入SubsystemDrawing.m_drawbles</param>
        </member>
        <member name="M:Game.ModLoader.OnFurnitureDesigned(Game.FurnitureDesign,System.Boolean,System.Int32@,System.Boolean@,System.Int32@)">
            <summary>
            在创建家具时执行
            </summary>
            <param name="furnitureDesign"></param>
            <param name="designedFromExistingFurniture">是否从已有家具方块创建，通常用于mod禁止家具复制</param>
            <param name="pickableCount">产生的掉落物数量</param>
            <param name="destroyDesignBlocks">是否移除搭建的建筑原型</param>
            <param name="toolDamageCount">家具锤消耗的耐久量，如果家具锤剩余耐久不足以支持消耗量，则玩家无法创建家具并弹出提示</param>
        </member>
        <member name="M:Game.ModLoader.OnInventorySlotWidgetDefined(Game.InventorySlotWidget,System.Collections.Generic.List{Game.Widget}@)">
            <summary>
            在创建InventorySlotWidget时执行，可以增加元素
            </summary>
            <param name="inventorySlotWidget"></param>
            <param name="childrenWidgetsToAdd">创建InventorySlotWidget时，返回增加的子Widget</param>
        </member>
        <member name="M:Game.ModLoader.InventorySlotWidgetMeasureOverride(Game.InventorySlotWidget,Engine.Vector2)">
            <summary>
            绘制物品格子的耐久条、食物条等元素
            </summary>
            <param name="inventorySlotWidget"></param>
            <param name="parentAvailableSize">其父widget的大小</param>
        </member>
        <member name="M:Game.ModLoader.HandleMoveInventoryItem(Game.InventorySlotWidget,Game.IInventory,System.Int32,Game.IInventory,System.Int32,System.Int32@,System.Boolean@)">
            <summary>
            当移动物品时执行。从sourceInventory的第sourceSlotIndex个格子，移动count个物品，到targetInventory的第targetSlotIndex个格子
            </summary>
            <param name="inventorySlotWidget"></param>
            <param name="count">留给后面模组和原版处理物品的数量</param>
            <param name="moved">是否完成移动操作，注意这个不影响跳过原版处理</param>
        </member>
        <member name="M:Game.ModLoader.HandleInventoryDragProcess(Game.InventorySlotWidget,Game.IInventory,System.Int32,Game.IInventory,System.Int32,System.Int32@)">
            <summary>
            在InventorySlotWidget.HandleDragDrop时执行，先执行物品的修改操作
            （比如原版火药拖到枪身上时执行上膛操作）
            </summary>
            <param name="inventorySlotWidget">目标格子的InventorySlotWidget</param>
            <param name="sourceInventory"></param>
            <param name="sourceSlotIndex"></param>
            <param name="targetInventory"></param>
            <param name="targetSlotIndex"></param>
            <param name="ProcessCapacity">目标格子接受物品的数量。设置为不大于0的数相当于跳过原版逻辑</param>
        </member>
        <member name="M:Game.ModLoader.HandleInventoryDragMove(Game.InventorySlotWidget,Game.IInventory,System.Int32,Game.IInventory,System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            在InventorySlotWidget.HandleDragDrop时执行，如果物品没有修改操作，则执行移动物品操作
            </summary>
            <param name="inventorySlotWidget">目标格子的InventorySlotWidget</param>
            <param name="sourceInventory"></param>
            <param name="sourceSlotIndex"></param>
            <param name="targetInventory"></param>
            <param name="targetSlotIndex"></param>
            <param name="skippedByOtherMods">执行逻辑是否已经被其他模组跳过</param>
            <param name="skip">跳过原版的执行逻辑</param>
        </member>
        <member name="M:Game.ModLoader.OnPlayerControlSteed(Game.ComponentPlayer,System.Boolean,System.Boolean@)">
            <summary>
            在玩家骑上坐骑时每帧执行，用于调整玩家骑行动物时的控制逻辑
            </summary>
            <param name="componentPlayer"></param>
            <param name="skippedByOtherMods">是否已经被其他模组跳过逻辑</param>
            <param name="skipVanilla">跳过原版执行操作</param>
        </member>
        <member name="M:Game.ModLoader.OnPlayerControlBoat(Game.ComponentPlayer,System.Boolean,System.Boolean@)">
            <summary>
            在玩家乘坐船时每帧执行，用于调整玩家乘船时的控制逻辑
            </summary>
            <param name="componentPlayer"></param>
            <param name="skippedByOtherMods">是否已经被其他模组跳过逻辑</param>
            <param name="skipVanilla">跳过原版执行操作</param>
        </member>
        <member name="M:Game.ModLoader.OnPlayerControlOtherMount(Game.ComponentPlayer,System.Boolean,System.Boolean@)">
            <summary>
            在玩家乘坐船、动物以外的物体时每帧执行，用于控制玩家骑模组坐骑的控制魔力
            </summary>
            <param name="componentPlayer"></param>
            <param name="skippedByOtherMods">是否已经被其他模组跳过逻辑</param>
            <param name="skipVanilla">跳过其他模组执行操作</param>
        </member>
        <member name="M:Game.ModLoader.OnPlayerControlWalk(Game.ComponentPlayer,System.Boolean,System.Boolean@)">
            <summary>
            当玩家既不在坐骑上，也不在船上时执行，用于控制玩家行走的控制逻辑
            </summary>
            <param name="componentPlayer"></param>
            <param name="skippedByOtherMods">是否已经被其他模组跳过逻辑</param>
            <param name="skipVanilla">跳过原版执行操作</param>
        </member>
        <member name="M:Game.ModLoader.OnPlayerInputInteract(Game.ComponentPlayer,System.Boolean@,System.Double@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            当玩家输入交互逻辑时执行的操作
            </summary>
            <param name="componentPlayer"></param>
            <param name="playerOperated">为true则停止之后的挖掘、攻击等操作</param>
            <param name="timeIntervalLastActionTime">距离上一次触发该操作距离的时长</param>
            <param name="priorityUse">控制使用优先级，使用优先级小于等于0则禁止玩家使用手中物品</param>
            <param name="priorityInteract">控制交互优先级，交互优先级小于等于0则禁止玩家交互方块</param>
            <param name="priorityPlace">控制放置优先级，放置优先级小于等于0则禁止玩家放置方块</param>
        </member>
        <member name="M:Game.ModLoader.UpdatePlayerInputAim(Game.ComponentPlayer,System.Boolean,System.Boolean@,System.Single@,System.Boolean,System.Boolean@)">
            <summary>
            在玩家正在瞄准时执行
            </summary>
            <param name="componentPlayer"></param>
            <param name="aiming">是否正在瞄准</param>
            <param name="playerOperated">为true则停止之后的挖掘、攻击等操作</param>
            <param name="timeIntervalAim">和上一次执行瞄准操作，要求的最小时间间隔</param>
            <param name="skippedByOtherMods">是否已经被其他模组跳过逻辑</param>
            <param name="skipVanilla">跳过原版执行操作（为了模组间兼容性，建议只在手持自己模组方块时这样做）</param>
        </member>
        <member name="M:Game.ModLoader.OnPlayerInputHit(Game.ComponentPlayer,System.Boolean@,System.Double@,System.Single@,System.Boolean,System.Boolean@)">
            <summary>
            在玩家执行“攻击”动作时执行，比如恒泰左键放箭，工业左键点击船
            </summary>
            <param name="componentPlayer"></param>
            <param name="playerOperated">为true则停止之后的挖掘操作</param>
            <param name="timeIntervalHit">和上一次输入攻击操作，要求的最小时间间隔，小于该间隔时输入无效。（注意和ComponentMiner.HitInterval作区分）</param>
            <param name="meleeAttackRange">近战攻击距离，小于等于0时表示不进行近战操作（比如手持弓时近战距离改为0，就不会拿着弓拍敌人）</param>
            <param name="skippedByOtherMods">是否已经被其他模组跳过逻辑</param>
            <param name="skipVanilla">跳过原版执行操作（为了模组间兼容性，建议只在手持自己模组方块时这样做）</param>
        </member>
        <member name="M:Game.ModLoader.UpdatePlayerInputDig(Game.ComponentPlayer,System.Boolean,System.Boolean@,System.Double@,System.Boolean,System.Boolean@)">
            <summary>
            在玩家执行“挖掘”动作时执行
            </summary>
            <param name="componentPlayer"></param>
            <param name="digging">玩家是否正在挖掘</param>
            <param name="playerOperated">为true则停止之后的创造模式中键选择物品等操作</param>
            <param name="timeIntervalDig">和上一次执行挖掘操作，要求的最小时间间隔。将该值降低可以像恒泰那样极速挖掘</param>
            <param name="skippedByOtherMods">是否已经被其他模组跳过逻辑</param>
            <param name="skipVanilla">跳过原版执行操作（为了模组间兼容性，建议只在手持自己模组方块时这样做）</param>
        </member>
        <member name="M:Game.ModLoader.OnPlayerInputDrop(Game.ComponentPlayer,System.Boolean,System.Boolean@)">
            <summary>
            在玩家电脑上“按Q释放剑弃”时执行
            </summary>
            <param name="componentPlayer"></param>
            <param name="skippedByOtherMods"></param>
            <param name="skipVanilla"></param>
        </member>
        <member name="M:Game.ModLoader.OnLightningStrike(Game.SubsystemSky,Engine.Vector3@,System.Boolean@,System.Single@,System.Boolean@)">
            <summary>
            在闪电劈下时执行
            </summary>
            <param name="subsystemSky"></param>
            <param name="targetPosition">闪电劈下的位置</param>
            <param name="strike">是否能成功执行</param>
            <param name="explosionPressure">闪电的爆炸威力</param>
            <param name="setBodyOnFire">是否点燃目标</param>
        </member>
        <member name="M:Game.ModLoader.OnTerrainBrushesCreated">
            <summary>
            用于调整原版已有矿物、水域、植物等地形地貌的生成，例如减少原版矿物生成量
            </summary>
        </member>
        <member name="M:Game.ModLoader.FindCoarseSpawnPosition(Game.ITerrainContentsGenerator,Engine.Vector3@)">
            <summary>
            在创建世界时寻找玩家的初步生成大致位置
            </summary>
            <param name="spawnPosition">玩家初步生成大致位置</param>
        </member>
        <member name="M:Game.ModLoader.OnChaseBehaviorAttacked(Game.ComponentChaseBehavior,System.Single,System.Single@,System.Boolean@,System.Boolean@)">
            <summary>
            在动物执行近战攻击命中目标时执行
            </summary>
            <param name="componentChaseBehavior"></param>
            <param name="chaseTimeBefore">在攻击之前的剩余追逐时间</param>
            <param name="chaseTime">在攻击之后的剩余追逐时间</param>
            <param name="hitBody">是否能够攻击</param>
            <param name="playAttackSound">是否发出攻击音效</param>
        </member>
        <member name="M:Game.ModLoader.OnChaseBehaviorAttackFailed(Game.ComponentChaseBehavior,System.Single@)">
            <summary>
            在动物执行近战攻击没有命中目标时执行
            </summary>
            <param name="componentChaseBehavior"></param>
            <param name="chaseTime">在攻击之后的剩余追逐时间</param>
        </member>
        <member name="M:Game.ModLoader.CalculateFallDamage(Game.ComponentHealth,System.Single@)">
            <summary>
            计算动物的坠落伤害
            </summary>
            <param name="componentHealth">生物的ComponentHealth，至于坠落速度等信息则从ComponentHealth出发寻找</param>
            <param name="damage">坠落伤害</param>
        </member>
        <member name="M:Game.ModLoader.OnLocomotionStopped(Game.ComponentLocomotion,System.Boolean@)">
            <summary>
            在动物晕眩或死亡时执行移动
            </summary>
            <param name="componentLocomotion"></param>
            <param name="fallsOnDeathOrStun">在晕眩或死亡时是否坠落</param>
        </member>
        <member name="M:Game.ModLoader.OnComponentLocomotionLoaded(Game.ComponentLocomotion,System.Single@,System.Single@,System.Single@,System.Boolean@)">
            <summary>
            在ComponentLocomotion加载时执行
            </summary>
            <param name="componentLocomotion"></param>
            <param name="mobWalkSpeedFactor">非玩家生物的移速乘数</param>
            <param name="mobFlySpeedFactor">非玩家生物的飞行速度乘数</param>
            <param name="mobSwimSpeedFactor">非玩家生物的游泳速度乘数</param>
            <param name="disableCreativeFlyInSurvivalMode">是否在生存模式中停止创造飞行（通常发生在创造模式切换到生存模式中）</param>
        </member>
        <member name="M:Game.ModLoader.OnDispenserDispensePickable(Game.ComponentDispenser,Game.Pickable@,System.Int32@)">
            <summary>
            在发射器投掷物品时执行
            </summary>
            <param name="componentDispenser">该发射器的Component</param>
            <param name="pickable">要发射的掉落物</param>
            <param name="RemoveSlotCount">移除发射器物品栏中物品数量</param>
        </member>
        <member name="M:Game.ModLoader.OnDispenserShoot(Game.ComponentDispenser,Game.Projectile@,System.Boolean@,System.Int32@)">
            <summary>
            在发射器弹射物品时执行
            </summary>
            <param name="componentDispenser">该发射器的Component</param>
            <param name="projectile">要发射的弹射物</param>
            <param name="canDispensePickable">发射失败时，是否以掉落物的方式发射（即使不发射也会消耗）</param>
            <param name="RemoveSlotCount">移除发射器物品栏中物品数量</param>
        </member>
        <member name="M:Game.ModLoader.DispenserChooseItemToDispense(Game.ComponentDispenser,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            发射器选择消耗哪一个物品进行发射
            </summary>
            <param name="componentDispenser"></param>
            <param name="slot">选择消耗哪一个格子的物品</param>
            <param name="value">选择发射什么物品</param>
            <param name="chosen">是否已经选择。若已经选择，则会跳过后面模组中执行。为了兼容性，仅推荐发射器在有自己模组方块的时候才执行</param>
        </member>
        <member name="M:Game.ModLoader.LoadWorldInfoWidget(Game.WorldInfo,System.Xml.Linq.XElement,Game.ContainerWidget@)">
            <summary>
            在世界选择列表时，调整存档的外观
            </summary>
            <param name="worldInfo">世界信息</param>
            <param name="savedWorldItemNode">存储世界信息的XElement</param>
            <param name="worldInfoWidget">要修改的Widget</param>
        </member>
        <member name="M:Game.ModLoader.EditBlockDescriptionScreen(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            在方块介绍页面中，增加或减少方块的属性字段
            </summary>
            <param name="blockProperties"></param>
        </member>
        <member name="M:Game.ModLoader.EditRecipeScreenWidget(Game.RecipaediaRecipesScreen)">
            <summary>
            在合成表页面时每帧更新时，编辑该页面
            </summary>
            <param name="screen"></param>
        </member>
        <member name="M:Game.ModLoader.UpdateCreaturePropertiesInBestiaryDescriptionScreen(Game.BestiaryDescriptionScreen,Game.BestiaryCreatureInfo,TemplatesDatabase.ValuesDictionary)">
            <summary>
            在生物图鉴页面每帧更新时，编辑该页面
            </summary>
            <param name="bestiaryDescriptionScreen"></param>
            <param name="bestiaryCreatureInfo">该生物的基础信息</param>
            <param name="entityValuesDictionary">该生物在Database中的ValuesDictionary</param>
        </member>
        <member name="M:Game.ModLoader.LoadCreatureInfoInBestiaryScreen(Game.BestiaryScreen,Game.ContainerWidget,Game.BestiaryCreatureInfo,TemplatesDatabase.ValuesDictionary)">
            <summary>
            在生物图鉴目录列表更新该条目时，编辑该条目
            </summary>
            <param name="bestiaryScreen"></param>
            <param name="creatureInfoWidget">可以更改的生物信息Widget</param>
            <param name="bestiaryCreatureInfo">该生物的基础信息</param>
            <param name="entityValuesDictionary">该生物在Database中的ValuesDictioanry</param>
        </member>
        <member name="M:Game.ModLoader.ResetOptionsForNonCreativeMode(Game.WorldSettings,Game.EnvironmentBehaviorMode,Game.TimeOfDayMode,System.Boolean,System.Boolean)">
            <summary>
            在进行世界设置时，如果不是创造模式，则会修改设定
            </summary>
            <param name="worldSettings">要修改的世界设置</param>
            <param name="environmentBehaviorModeBefore"></param>
            <param name="timeOfDayModeBefore"></param>
            <param name="areWeatherEffectsEnabledBefore"></param>
            <param name="areSurvivalMechanicsEnabledBefore"></param>
        </member>
        <member name="M:Game.ModLoader.CraftingRecipesManagerInitialize(System.Collections.Generic.List{Game.CraftingRecipe},System.Boolean@)">
            <summary>
            在配方表加载的时候执行，用于删除原版配方
            </summary>
            <param name="recipes">已经加载的配方</param>
            <param name="sort">是否在删除后重新排序</param>
        </member>
        <member name="M:Game.ModLoader.CraftingRecipesManagerInitialized">
            <summary>
            在配方表加载完成后执行，在排序完成后执行
            </summary>
        </member>
        <member name="M:Game.ModLoader.PlayInGameMusic">
            <summary>
            在游戏游玩过程中时放音乐
            </summary>
        </member>
        <member name="M:Game.ModLoader.UpdateDeathCameraWidget(Game.PlayerData,System.Boolean@,System.Boolean@)">
            <summary>
            在更新玩家死亡界面时执行
            </summary>
            <param name="playerData">具体死者</param>
            <param name="disableVanillaTapToRespawnAction">是否阻止原版点击任意键就执行复活等下一步的操作</param>
            <param name="respawn">是否复活</param>
        </member>
        <member name="M:Game.ModLoader.OnComponentBodyExplodedStart(Game.ComponentBody,Engine.Vector3,System.Single,System.Single@)">
            <summary>
            在爆炸开始，计算动物摇晃程度时执行。
            为了尽可能确保兼容性，建议只对属于自己模组的生物进行接管编辑
            </summary>
            <param name="componentBody">将要摇晃的动物</param>
            <param name="explosionCenter">爆炸中心地点</param>
            <param name="explosionPressure">爆炸强度</param>
            <param name="shakeStrength">动物摇晃的强度</param>
        </member>
        <member name="M:Game.ModLoader.GrowPlant(Game.SubsystemPlantBlockBehavior,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            在游戏执行植物生长判定时执行，为保证良好兼容性，建议只在处理属于自己模组的方块时改变控制
            </summary>
            <param name="subsystemPlantBlockBehavior">子系统，便于定位SubsystemTerrain等必要组件</param>
            <param name="x">植物的坐标x</param>
            <param name="y">植物的坐标y</param>
            <param name="z">植物的坐标z</param>
            <param name="pollPass">用途不确定</param>
            <param name="skipVanilla">是否跳过原版的执行进程，注意本接口不能跳过其他模组的执行进程</param>
        </member>
        <member name="M:Game.ModLoader.OnProjectileTurnIntoPickable(Game.Projectile,Game.Pickable@)">
            <summary>
            射弹转化为掉落物时执行
            </summary>
            <param name="projectile">即将被转化并删除的射弹</param>
            <param name="pickable">即将加入的掉落物</param>
        </member>
        <member name="M:Game.ModLoader.EntityComponentsInitialized(GameEntitySystem.Entity,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,GameEntitySystem.Component}})">
            <summary>
            在实体创建时执行，可用于移除实体的特定组件
            </summary>
            <param name="entity">被创建的实体</param>
            <param name="componentList">这个实体将会拥有的Component，KeyValuePair的第一个表示Component的加载顺序编号，第二个表示实体的Component</param>
        </member>
        <member name="M:Game.ModLoader.ProjectBeforeSubsystemsAndEntitiesLoad(GameEntitySystem.Project)">
            <summary>
            游戏Project创建时执行，可用于移除Subsystem、Entity、Entity.Component
            </summary>
            <param name="project"></param>
        </member>
        <member name="M:Game.ModLoader.OnScreenEntered(Game.Screen,System.Object[])">
            <summary>
            进入Screen时执行
            </summary>
            <param name="screen">进入的Screen</param>
            <param name="screenParameters">进入Screen时传入的参数，参数的详细信息需要去查阅对应screen的代码</param>
        </member>
        <member name="M:Game.ModLoader.OnScreenLeaved(Game.Screen)">
            <summary>
            离开Screen时执行
            </summary>
            <param name="screen">离开的Screen</param>
        </member>
        <member name="M:Game.ModLoader.BeforeWidgetUpdate(Game.Widget)">
            <summary>
            在Widget即将执行Update()时执行，能用于修改游戏中已有按钮的功能
            并且可以通过一定的操作，拦截原版按钮的功能
            </summary>
            <param name="widget"></param>
        </member>
        <member name="M:Game.ModLoader.AfterWidgetUpdate(Game.Widget)">
            <summary>
            在Widget完成Update()后立即执行，能用于修改游戏中已有按钮的功能
            </summary>
            <param name="widget"></param>
        </member>
        <member name="M:Game.ModLoader.ChaseBehaviorScoreTarget(Game.ComponentChaseBehavior,Game.ComponentCreature,System.Single@)">
            <summary>
            生物在选择追击对象时，对被追击对象的评分。评分越高，则会被选中。
            仅建议在该生物为本模组生物，或目标生物为本模组生物时，修改追击权重。
            </summary>
            <param name="chaseBehavior"></param>
            <param name="creatureToBeTarget">被评估的对象</param>
            <param name="score">给出的评分</param>
        </member>
        <member name="M:Game.ModLoader.DecideLoot(Game.ComponentLoot,System.Collections.Generic.List{Game.BlockDropValue})">
            <summary>
            修改生物的战利品。
            建议不要清空dropValues推倒重来，不利于模组兼容性。
            </summary>
            <param name="componentLoot"></param>
            <param name="dropValues">其中包含所有的战利品掉落物的方块值和数量</param>
        </member>
        <member name="M:Game.ModLoader.OnMainMenuScreenCreated(Game.MainMenuScreen,Game.StackPanelWidget,Game.StackPanelWidget)">
            <summary>
            在主界面初始化后执行，你可以通过这个给主界面加些你想要的按钮或者文字等
            不过建议开发者使用BeforeWidgetUpdate和AfterWidgetUpdate这两个接口实现
            </summary>
            <param name="mainMenuScreen">初始化完毕后的主界面</param>
            <param name="leftBottomBar">主界面左下角的按钮栏，里面有着API的切换语言和资源管理按钮</param>
            <param name="rightBottomBar">主界面右下角的按钮栏，Mod作者们可以在这里面放入想要的按钮（例如Mod设置按钮、Mod作者介绍按钮等）</param>
        </member>
        <member name="M:Game.ModLoader.OnMainMenuScreenUpdate(Game.MainMenuScreen,Game.StackPanelWidget,Game.StackPanelWidget)">
            <summary>
            在主界面更新
            </summary>
            <param name="leftBottomBar">主界面左下角的按钮栏，里面有着API的切换语言和资源管理按钮</param>
            <param name="rightBottomBar">主界面右下角的按钮栏，Mod作者们可以在这里面放入想要的按钮（例如Mod设置按钮、Mod作者介绍按钮等）</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Game.ModLoader.OnFactorsGenerate(Game.ComponentFactors)" -->
        <member name="M:Game.ModLoader.DecideArmorProtectionSequence(Game.ComponentClothing,Game.Attackment,System.Single,System.Collections.Generic.List{System.Int32})">
            <summary>
            计算护甲防御时，修改参与护甲防御的衣物列表
            </summary>
            <param name="componentClothing">挨打者的护甲组件</param>
            <param name="attackment">导致该护甲结算的攻击</param>
            <param name="randomNumber">原版用来计算损伤部位的随机数</param>
            <param name="clothesList">参与护甲防御的衣物列表</param>
        </member>
        <member name="M:Game.ModLoader.ApplyProtectionBeforeClothes(Game.ComponentClothing,Game.Attackment,System.Single@)">
            <summary>
            在计算护甲防御前，自定义新的结算
            例如：玩家携带力场护盾时，优先使用力场护盾进行防御
            </summary>
            <param name="componentClothing">挨打者的护甲组件</param>
            <param name="attackment">导致该护甲结算的攻击</param>
            <param name="attackPowerAfteProtection">结算护甲后的攻击力</param>
        </member>
        <member name="M:Game.ModLoader.ApplyProtectionAfterClothes(Game.ComponentClothing,Game.Attackment,System.Collections.Generic.List{System.Int32},System.Single@)">
            <summary>
            在计算护甲防御后，自定义新的结算
            </summary>
            <param name="componentClothing">挨打者的护甲组件</param>
            <param name="attackment">导致该护甲结算的攻击</param>
            <param name="attackPowerAfteProtection">结算护甲后的攻击力</param>
        </member>
        <member name="M:Game.ModLoader.InitializeClothingSlots">
            <summary>
            初始化ClothingSlot的时候执行。在此接口添加脖子、手臂等新的可穿戴部位。
            </summary>
        </member>
        <member name="M:Game.ModLoader.OnPlayerModelWidgetMeasureOverride(Game.PlayerModelWidget)">
            <summary>
            在绘制人物界面中的人物模型的时候执行，可以通过在playerModelWidget.m_modelWidget中增删元素来在人物界面绘制新模型
            </summary>
            <param name="playerModelWidget"></param>
        </member>
        <member name="P:Game.ModSettingsManager.ModSettingsCache">
            <summary>
            储存每一个没有使用到的Mod设置的键值对，键：Mod的包名，值：Mod的设置信息XElement
            </summary>
        </member>
        <member name="M:Game.OnlineJsonReader.GetJsonFromUrlAsync(System.String)">
            <summary>
            从链接获取 Json 文档
            </summary>
            <param name="url">Json文件链接</param>
            <returns>Json文档</returns>
        </member>
        <member name="T:Game.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Game.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Game.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="M:Game.HelpScreen.OnTopicsListItemClicked(System.Object)">
            <summary>
            点击帮助条目时执行
            </summary>
        </member>
        <member name="M:Game.PlayScreen.Play(System.Object)">
            <summary>
            
            </summary>
            <param name="item">实际类型为WorldInfo</param>
        </member>
        <member name="M:Game.RecipaediaScreen.OnBlocksListItemClicked(System.Object)">
            <summary>
            在方块项目被点击时执行
            改用实名方法，便于模组删除或禁用
            </summary>
            <param name="item"></param>
        </member>
        <member name="F:Game.SubsystemBlocksScanner.MaxShaftsToPollPerFrame">
            <summary>
            每帧会进行多少xz格的方块检查
            </summary>
        </member>
        <member name="F:Game.SubsystemExplosions.ExplosionData.ValuesDictionaryForMods">
            <summary>
            模组如果需要添加或使用额外信息，可以在这个ValuesDictionary读写元素
            </summary>
        </member>
        <member name="M:Game.SubsystemPlantBlockBehavior.OnNeighborBlockChanged(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            该方法进行封装，不再允许覆盖
            添加新的放置植物的逻辑：
            如果是添加新植物，则建议自己添加新的ModPlantBlockBehavior，只负责属于自己模组的植物的生长
            如果是添加新的能种植植物的土质（如黑土），则调整该土质方块的IsSuitableForPlants属性即可
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="neighborX"></param>
            <param name="neighborY"></param>
            <param name="neighborZ"></param>
        </member>
        <member name="F:Game.SubsystemTreasureGeneratorBlockBehavior.TreasureData.ValuesDictionaryForMods">
            <summary>
            模组如果需要添加或使用额外信息，可以在这个ValuesDictionary读写元素
            </summary>
        </member>
        <member name="T:Game.TextBoxWidget">
            <summary>
            <para>
            Survivalcraft Api 所添加的文本框
            （支持 Windows IME 输入法, Android IME 适配待开发）。
            </para>
            <para>
            A text box widget that added by Survivalcraft Api
            (Support Windows IME, and Android IME support is pending development).
            </para>
            </summary>
        </member>
        <member name="F:Game.TextBoxWidget.JustOpened">
            <summary>
            <para>
            已弃用。
            </para>
            <para>
            Deprecated.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.Description">
            <summary>
            <para>
            Android 文本框的 Description。
            </para>
            <para>
            This is the description of android text box.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.Title">
            <summary>
            <para>
            Android 文本框的 Title。
            </para>
            <para>
            This is the title of android text box.
            </para>
            </summary>
        </member>
        <member name="F:Game.TextBoxWidget.m_caretPosition">
            <summary>
            <para>
            旧版文本框的光标位置，现版本不再使用。
            </para>
            <para>
            Old caret position, now is deprecated.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.CaretPosition">
            <summary>
            <para>
            <see cref="T:Game.LegacyTextBoxWidget"/> 里的旧版 <see cref="P:Game.TextBoxWidget.Caret"/> 属性，现版本不再使用。
            </para>
            <para>
            Old property of <see cref="P:Game.TextBoxWidget.Caret"/> in <see cref="T:Game.LegacyTextBoxWidget"/>, now is deprecated.
            </para>
            </summary>
        </member>
        <member name="F:Game.TextBoxWidget.m_hasFocus">
            <summary>
            <para>
            <see cref="P:Game.LegacyTextBoxWidget.HasFocus"/> 的后台字段，现版本不再使用，请用 <see cref="P:Game.TextBoxWidget.HasFocus"/> 替代。
            </para>
            <para>
            The backend field of <see cref="P:Game.LegacyTextBoxWidget.HasFocus"/>, now is deprecated, use <see cref="P:Game.TextBoxWidget.HasFocus"/> instead.
            </para>
            </summary>
        </member>
        <member name="F:Game.TextBoxWidget.m_size">
            <summary>
            <para>
            <see cref="P:Game.LegacyTextBoxWidget.Size"/> 的后台字段，现版本不再使用。
            </para>
            <para>
            The backend field of old <see cref="P:Game.LegacyTextBoxWidget.Size"/>, now is deprecated.
            </para>
            </summary>
        </member>
        <member name="F:Game.TextBoxWidget.m_focusStartTime">
            <summary>
            <para>
            等效于 <see cref="P:Game.TextBoxWidget.FocusStartTime"/>，
            现版本不再使用，请用 <see cref="P:Game.TextBoxWidget.FocusStartTime"/> 替代。
            </para>
            <para>
            Is the same as <see cref="P:Game.TextBoxWidget.FocusStartTime"/>,
            now is deprecated, use <see cref="P:Game.TextBoxWidget.FocusStartTime"/> instead.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.SelectionString">
            <summary>
            <para>
            选中的字符，当 <see cref="P:Game.TextBoxWidget.SelectionLength"/> 为 0 时返回 null。
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.FullText">
            <summary>
            <para>
            文本框里包括 <see cref="P:Game.TextBoxWidget.Text"/> 和 <see cref="P:Game.TextBoxWidget.CompositionText"/> 的完整文本。
            </para>
            <para>
            The full text of this text box, including <see cref="P:Game.TextBoxWidget.CompositionText"/> and <see cref="P:Game.TextBoxWidget.Text"/>.
            </para>
            </summary>
        </member>
        <member name="F:Game.TextBoxWidget.m_text">
            <summary>
            <para>
            <see cref="P:Game.TextBoxWidget.Text"/> 的后台字段，
            不推荐直接使用，请使用 <see cref="P:Game.TextBoxWidget.Text"/>。
            </para>
            <para>
            The backend field of <see cref="P:Game.TextBoxWidget.Text"/>,
            it's not safe use it directly, please use <see cref="P:Game.TextBoxWidget.Text"/> instead.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.Text">
            <summary>
            <para>
            文本框里已经输入的文本。
            </para>
            <para>
            Text already inputted of this text box.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.CompositionText">
             <summary>
             <para>
             输入法 “组合窗” 的文本， 可能为 null。
             </para>
             <para>
             仅在 Windows 平台下可用（Android 平台始终为null）。
             </para>
             <para>
             IME composition text, may be null.
            </para>
             <para>
             Windows only (Always null on Android).
             </para>
             </summary>
        </member>
        <member name="P:Game.TextBoxWidget.CompositionTextCaret">
            <summary>
            <para>
            “组合窗” 中光标的位置，可被视为 <see cref="P:Game.TextBoxWidget.CompositionText"/> 的索引，
            等效于 <see cref="P:Game.TextBoxWidget.Caret"/>，但是对应的字符串从 <see cref="P:Game.TextBoxWidget.Text"/> 变为了 <see cref="P:Game.TextBoxWidget.CompositionText"/>，
            若需要使用相对于 <see cref="P:Game.TextBoxWidget.FullText"/> 的光标（字符索引），请将此值与 <see cref="P:Game.TextBoxWidget.Caret"/> 相加。
            </para>
            <para>
            仅在 Windows 平台下可用（Android 平台始终为 0）。
            </para>
            <para>
            IME composition text caret position, can be considered as the index of <see cref="P:Game.TextBoxWidget.CompositionText"/>,
            Is the same as <see cref="P:Game.TextBoxWidget.Caret"/>, but replaces <see cref="P:Game.TextBoxWidget.Text"/> to <see cref="P:Game.TextBoxWidget.CompositionText"/>,
            To get the index to <see cref="P:Game.TextBoxWidget.FullText"/>, add this value and <see cref="P:Game.TextBoxWidget.Caret"/>.
            </para>
            <para>
            Windows only.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.Caret">
            <summary>
            <para>
            光标的位置，可被视为 <see cref="P:Game.TextBoxWidget.Text"/> 的索引。
            绘制时位置为索引对应的字符的左侧，可以与 <see cref="P:Game.TextBoxWidget.Text"/> 的长度相等（表示光标在文本末尾）。
            </para>
            <para>
            Text caret, can be considered as the index of <see cref="P:Game.TextBoxWidget.Text"/>.
            The caret is drawn at the left of the character that corresponds to the index.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.SelectionLength">
            <summary>
            <para>
            当前选中的文本长度，为 0 则表示不选择任何文本，可以小于 0.
            </para>
            <para>
            The length of the selected text, 0 means no text is selected, can be less than 0.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.SelectionStarted">
            <summary>
            <para>
            是否选中文本。
            </para>
            <para>
            Whether the text is selected.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.ScrollStarted">
            <summary>
            <para>
            是否正在滚动。（注意：仅指 Drag 引发的滚动）
            </para>
            <para>
            Whether the text is scrolling.(NOTICE: Only means drag scroll)
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.FocusedTextBox">
            <summary>
            <para>
            当前获得焦点的文本框。
            </para>
            <para>
            The focused text box.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.FocusStartTime">
            <summary>
            <para>
            最后一次获取焦点的时间（<see cref="P:Engine.Time.RealTime"/>），
            用于绘制光标（请见<see cref="M:Game.TextBoxWidget.Draw(Game.Widget.DrawContext)"/>方法）。
            </para>
            <para>
            Last focus time(<see cref="P:Engine.Time.RealTime"/>),
            used to draw caret(see <see cref="M:Game.TextBoxWidget.Draw(Game.Widget.DrawContext)"/> method).
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.HasFocus">
            <summary>
            <para>
            当前文本框是否获得焦点。
            </para>
            <para>
            Whether this text box has focus.
            </para>
            </summary>
        </member>
        <member name="M:Game.TextBoxWidget.SplitStringAt(System.String,System.Int32)">
            <summary>
            <para>
            供 <see cref="T:Game.TextBoxWidget"/> 内部使用。
            </para>
            <para>
            For internal use by <see cref="T:Game.TextBoxWidget"/>.
            </para>
            </summary>
            <param name="str"></param>
            <param name="splitPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Game.TextBoxWidget.EnterCharacter(System.Char,System.Int32,System.Boolean)">
            <summary>
            <para>
            插入字符。
            </para>
            <para>
            Enter character.
            </para>
            </summary>
            <param name="value">
                <para>
                插入的字符。
                </para>
                <para>
                Character to enter.
                </para>
            </param>
            <param name="position">
                <para>
                插入的位置，默认为 -1 （-1 表示插入到光标位置）。
                </para>
                <para>
                Position to enter, default is -1 (-1 means insert at caret position)
                </para>
            </param>
            <param name="moveCaret">
                <para>
                是否移动光标。
                </para>
                <para>
                Whether to move caret.
                </para>
            </param>
        </member>
        <member name="M:Game.TextBoxWidget.DeleteSelection(System.Boolean)">
            <summary>
            <para>
            删除选中的字符。
            </para>
            <para>
            Delete selected text.
            </para>
            <param name="invokeTextChanged">
                <para>
                如果为 true，调用 <see cref="E:Game.TextBoxWidget.TextChanged"/> 事件。
                </para>
                <para>
                If true, invoke <see cref="E:Game.TextBoxWidget.TextChanged"/> event.
                </para>
            </param>
            </summary>
        </member>
        <member name="M:Game.TextBoxWidget.EnterText(System.String)">
            <summary>
            <para>
            在光标后插入字符串。
            </para>
            </summary>
        </member>
        <member name="M:Game.TextBoxWidget.EnterText(System.String,System.Int32)">
            <summary>
            <para>
            在指定位置插入字符串。
            </para>
            <para>
            Insert string at specified position.
            </para>
            </summary>
        </member>
        <member name="F:Game.TextBoxWidget.CharacterKindsMap">
            <summary>
            <para>
            字符分类表， 用于 <see cref="M:Game.TextBoxWidget.Delete(System.Nullable{System.Char},System.Int32)"/> 方法 和 <see cref="M:Game.TextBoxWidget.BackSpace(System.Nullable{System.Char},System.Int32,System.Boolean)"/>，
            每个元素都存储着某一类字符的所有字符。
            </para>
            <para>
            Characters table for <see cref="M:Game.TextBoxWidget.Delete(System.Nullable{System.Char},System.Int32)"/> and <see cref="M:Game.TextBoxWidget.BackSpace(System.Nullable{System.Char},System.Int32,System.Boolean)"/>,
            Every element stores all character of a character kind.
            </para>
            </summary>
        </member>
        <member name="M:Game.TextBoxWidget.BackSpace(System.Nullable{System.Char},System.Int32,System.Boolean)">
            <summary>
            <para>
            向左删除字符。
            </para>
            <para>
            Delete the character on the left of the caret.
            </para>
            </summary>
            <param name="character">
                <para>
                删除的字符，可为 null （为 null 则匹配所有字符）。
                </para>
                <para>
                Character to delete, can be null (if null then match all characters).
                </para>
            </param>
            <param name="count">
                <para>
                删除字符的数量 为 -1 则表示删除所有匹配字符
                </para>
                <para>
                Number of characters to delete, if -1 then delete all matching characters.
                </para>
            </param>
            <param name="moveCaret">
                <para>
                是否移动光标。
                </para>
                <para>
                Whether to move the caret.
                </para>
            </param>
        </member>
        <member name="M:Game.TextBoxWidget.Delete(System.Nullable{System.Char},System.Int32)">
            <summary>
            <para>
                向右删除字符。
            </para>
            <para>
                Delete character on the right of the caret.
            </para>
            </summary>
            <param name="character">
                <para>
                删除的字符，可为 null （为 null 则匹配所有字符）。
                </para>
                <para>
                Character to delete, can be null (if null then match all characters).
                </para>
            </param>
            <param name="count">
                <para>
                删除字符的数量 为 -1 则表示删除所有匹配字符.
                </para>
                <para>
                Number of characters to delete, if -1 then delete all matching characters.
                </para>
            </param>
        </member>
        <member name="P:Game.TextBoxWidget.DragStartTime">
            <summary>
            <para>
            Drag 操作开始时 <see cref="P:Engine.Time.RealTime"/> 的值。
            </para>
            <para>
            Value of <see cref="P:Engine.Time.RealTime"/> when drag started.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.LastDragPosition">
            <summary>
            <para>
            上一次 <see cref="M:Game.TextBoxWidget.Update"/> 方法被执行时 <see cref="P:Game.WidgetInput.Drag"/> 的值。
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.DragStartedInsideTextBox">
            <summary>
            <para>
            拖拽开始时是否位于文本框内。
            </para>
            <para>
            Whether the drag started inside the text box.
            </para>
            </summary>
        </member>
        <member name="M:Game.TextBoxWidget.ShowInputMethod">
            <summary>
            <para>
            显示 Windows 系统输入法
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.ShowCandidatesWindow">
            <summary>
            <para>
            是否显示候选窗。
            </para>
            <para>
            Whether to show the candidates window.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.IndentAsSpace">
            <summary>
            <para>
            是否把输入的制表符替换为空格
            （不会影响已经输入过的制表符）。
            </para>
            <para>
            注意：此属性和 <see cref="P:Game.TextBoxWidget.SwitchTextBoxWhenTabbed"/> 冲突，二者不能同时为 true，否则只有一个生效。
            </para>
            <para>
            Whether replace indent with spaces when typing
            (doesn't change the already inputted).
            </para>
            <para>
            NOTICE: This property conflicts with <see cref="P:Game.TextBoxWidget.SwitchTextBoxWhenTabbed"/>,
            they cannot be set to true at the same time, otherwise only one will take effect.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.IndentWidth">
            <summary>
            <para>
            当 <see cref="P:Game.TextBoxWidget.IndentAsSpace"/> 为 true 时，输入的制表符会被替换为空格，空格数量由 <see cref="P:Game.TextBoxWidget.IndentWidth"/> 决定。
            </para>
            <para>
            在绘制时，制表符会被视为这个数量的空格。
            </para>
            <para>
            When <see cref="P:Game.TextBoxWidget.IndentAsSpace"/> is true, inputted indents will be replaced with this number of spaces.
            </para>
            <para>
            When drawing, indents will be considered as this number of spaces.
            </para>
            </summary>
        </member>
        <member name="F:Game.TextBoxWidget.m_maximumLength">
            <summary>
            <para>
            <see cref="P:Game.TextBoxWidget.MaximumLength"/> 的后台字段，
            不推荐直接使用此值，请使用 <see cref="P:Game.TextBoxWidget.MaximumLength"/>。
            </para>
            <para>
            The backend field of <see cref="P:Game.TextBoxWidget.MaximumLength"/>,
            This is not safe to use this field directly, use <see cref="P:Game.TextBoxWidget.MaximumLength"/> instead
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.MaximumLength">
            <summary>
            <para>
            文本长度限制，设置此属性时会截断超过长度的文本，不可小于 0，若需要设置为无限，请使用 <see cref="F:System.Int32.MaxValue"/>。
            </para>
            <para>
            Maximum length of text, the text will be cut when it is longer than this value, the value cannot be less than 0,
            to set it to infinite, please use <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.PasswordMode">
            <summary>
            <para>
            密码模式，开启后所有文本都会被显示为 *（组合窗除外）。
            </para>
            <para>
            Password mode, all text but composition text ill be drawn as "*".
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.OverwriteMode">
            <summary>
            <para>
            为 true 时，文本框中输入的字符将覆盖已有文本。
            </para>
            <para>
            When true, characters inputted will overwrite existing text.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.SwitchTextBoxWhenTabbed">
            <summary>
            <para>
            当用户按下 Tab 键时，是否切换到下一个文本框
            </para>
            <para>
            注意：此属性和 <see cref="P:Game.TextBoxWidget.SwitchTextBoxWhenTabbed"/> 冲突，二者不能同时为 true，否则只有一个生效。
            </para>
            <para>
            If true, when the user presses the tab key, the focus will be switched to the next text box.
            </para>
            <para>
            NOTICE: This property conflicts with <see cref="P:Game.TextBoxWidget.SwitchTextBoxWhenTabbed"/>,
            they cannot be set to true at the same time, otherwise only one will take effect.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.OutlineColor">
            <summary>
            <para>
            文本框轮廓颜色。
            </para>
            <para>
            Text box outline color.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.CandidateSelectionColor">
            <summary>
            <para>
            候选窗选中项颜色。
            </para>
            <para>
            Candidate window selected item color.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.CandidateTextColor">
            <summary>
            <para>
            候选窗文本颜色。
            </para>
            <para>
            Candidate window text color.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.AutoSize">
            <summary>
            <para>
            如果为 true 则每帧都会由 <see cref="M:Game.TextBoxWidget.MeasureOverride(Engine.Vector2)"/> 自动确定 <see cref="P:Game.TextBoxWidget.Size"/> 的值。
            </para>
            <para>
            If true, the size will be set by <see cref="M:Game.TextBoxWidget.MeasureOverride(Engine.Vector2)"/> every frame.
            </para>
            </summary>
        </member>
        <member name="F:Game.TextBoxWidget.m_sizeValue">
            <summary>
            <para>
            <see cref="P:Game.TextBoxWidget.Size"/> 的后台字段。
            </para>
            <para>
            The backend field of <see cref="P:Game.TextBoxWidget.Size"/>.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.Size">
            <summary>
            <para>
            输入框大小（不一定是输入框的真实大小，真实大小请见 <see cref="P:Game.Widget.ActualSize"/>）。
            </para>
            <para>
            Text box size (may not be the actual size of the text box, the actual size is <see cref="P:Game.Widget.ActualSize"/>)
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.FontSpacing">
            <summary>
            <para>
            字体间距。
            </para>
            <para>
            Font spacing.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.FontScale">
            <summary>
            <para>
            字体缩放。
            </para>
            <para>
            Font scale.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.TextureLinearFilter">
            <summary>
            <para>
            如果为 true，则字体使用线性过滤。
            </para>
            <para>
            If true, font will use linear texture filtering.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.CandidateListOffset">
            <summary>
            <para>
            候选窗位置偏移量，
            原点为光标延长线与文本框下边缘的交点。
            </para>
            <para>
            Position offset of the candidate list,
            zero means the intersection point of the bottom outline and the extended line of caret.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.CandidatesSpacing">
            <summary>
            <para>
            候选词之间的间距。
            </para>
            <para>
            Candidates spacing.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.Font">
            <summary>
            <para>
            输入框字体。
            </para>
            <para>
            Text box font.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.CandidateWindowLength">
            <summary>
            <para>
            候选窗显示的长度。
            </para>
            <para>
            The length of the candidates window.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.CandidateWindowColor">
            <summary>
            <para>
            候选窗背景颜色。
            </para>
            <para>
            Candidate window background color.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.InputMethodEnabled">
            <summary>
            <para>
            是否启用输入法。
            </para>
            <para>
            Whether to enable input method.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.CandidatesList">
            <summary>
            <para>
            所有候选词。
            请结合 <see cref="P:Game.TextBoxWidget.CandidatesSelection"/> 和 <see cref="P:Game.TextBoxWidget.CandidatesPageSize"/> 以获取当前候选词页的候选词。
            </para>
            <para>
            All candidates.
            Please get current candidates page's candidates with <see cref="P:Game.TextBoxWidget.CandidatesSelection"/> and <see cref="P:Game.TextBoxWidget.CandidatesPageSize"/>.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.CandidatesSelection">
            <summary>
            <para>
            候选窗中当前选中的词。
            </para>
            <para>
            Current selected candidate.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.CandidatesPageSize">
            <summary>
            <para>
            候选窗中当前候选词页大小。
            </para>
            <para>
            Size of current selected candidates page.
            </para>
            </summary>
        </member>
        <member name="E:Game.TextBoxWidget.FocusLost">
            <summary>
            <para>
            输入框失去焦点时触发。
            </para>
            <para>
            Events will be call when text box loses focus.
            </para>
            </summary>
        </member>
        <member name="E:Game.TextBoxWidget.OnFocus">
            <summary>
            <para>
            输入框获得焦点时触发。
            </para>
            <para>
            Events will be call when text box gets focus.
            </para>
            </summary>
        </member>
        <member name="E:Game.TextBoxWidget.Enter">
            <summary>
            <para>
            按下回车时触发。
            </para>
            <para>
            Events will be call when pressing enter.
            </para>
            </summary>
        </member>
        <member name="E:Game.TextBoxWidget.Escape">
            <summary>
            <para>
            按下 Escape 时触发。
            </para>
            <para>
            Events will be call when pressing escape.
            </para>
            </summary>
        </member>
        <member name="E:Game.TextBoxWidget.TextChanged">
            <summary>
            <para>
            文本改变时触发。
            </para>
            <para>
            Events will be call when text changed.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.TextCaretPosition">
            <summary>
            <para>
            光标相对于 Widget 的显示位置。
            </para>
            <para>
            Position of text caret relative to widget.
            </para>
            </summary>
        </member>
        <member name="P:Game.TextBoxWidget.FullTextCaretPosition">
            <summary>
            <para>
            文本光标（包括 <see cref="P:Game.TextBoxWidget.CompositionText"/>）相对于 Widget 的显示位置。
            </para>
            <para>
            Position of text caret (including <see cref="P:Game.TextBoxWidget.CompositionText"/>) relative to widget.
            </para>
            </summary>
        </member>
        <member name="M:Game.TextBoxWidget.MeasureOverride(Engine.Vector2)">
            <inheritdoc/>
        </member>
        <member name="M:Game.Widget.DrawContext.DrawWidgetsHierarchy(Game.Widget)">
            <summary>
            绘制 rootWidget 及其子 Widget。
            </summary>
            <param name="rootWidget"></param>
        </member>
        <member name="M:Game.Widget.DrawContext.CollateDrawItems(Game.Widget,Engine.Rectangle)">
            <summary>
            根据 Widget 的层级关系 以及 Widget 的各项绘制有关的属性生成 DrawItem。
            </summary>
            <param name="widget">DrawItem 所属的 Widget。</param>
            <param name="scissorRectangle">Widget 父级的 ScissorRectangle。</param>
        </member>
        <member name="M:Game.Widget.DrawContext.AssignDrawItemsLayers">
            <summary>
            指定 DrawItem 的 Layer（层级）。
            </summary>
        </member>
        <member name="M:Game.Widget.DrawContext.RenderDrawItems">
            <summary>
            </summary>
        </member>
        <member name="M:Game.Widget.DrawContext.GetDrawItemFromCache">
            <summary>
            从缓存中获取一个 <see cref="T:Game.Widget.DrawItem"/> 实例，用于减少实例创建次数以缓解 GC 压力。
            </summary>
            <returns>搜索到的实例</returns>
        </member>
        <member name="M:Game.Widget.DrawContext.ReturnDrawItemsToCache">
            <summary>
            对 <see cref="T:Game.Widget.DrawItem"/> 进行复用，并存储到缓存列表内。
            </summary>
        </member>
        <member name="T:Game.Widget.DrawItem">
            <summary>
            绘制任务，有多种类型，绘制任务会按照 <see cref="F:Game.Widget.DrawItem.Layer"/> 进行排序。
            </summary>
        </member>
        <member name="F:Game.Widget.DrawItem.Layer">
            <summary>
            绘制任务所在的层级，值越小，绘制越靠前，绘制靠前的绘制任务会被靠后的覆盖。
            </summary>
        </member>
        <member name="F:Game.Widget.DrawItem.IsOverdraw">
            <summary>
            是否为 Overdraw 任务，绘制任务被定义为需要绘制 Widget 时，该值决定了 <see cref="M:Game.Widget.Draw(Game.Widget.DrawContext)"/> 或 <see cref="M:Game.Widget.Overdraw(Game.Widget.DrawContext)"/> 的调用
            （当 <see cref="F:Game.Widget.DrawItem.IsOverdraw"/> 为 true 时则调用 <see cref="M:Game.Widget.Overdraw(Game.Widget.DrawContext)"/>，否则调用 <see cref="M:Game.Widget.Draw(Game.Widget.DrawContext)"/>）。
            </summary>
        </member>
        <member name="F:Game.Widget.DrawItem.Widget">
            <summary>
            绘制任务所属的 Widget
            </summary>
        </member>
        <member name="F:Game.Widget.DrawItem.ScissorRectangle">
            <summary>
            绘制任务所绑定的 ScissorRectangle，可为空。
            </summary>
        </member>
        <member name="M:AccessLib.ModAccessUtil.CreateNestedGetter``2(System.String[])">
            <summary>
            创建快速普通读取器
            </summary>
            <typeparam name="T">目标类</typeparam>
            <typeparam name="TOut">目标变量类型</typeparam>
            <param name="fieldNames">路径</param>
            <returns>读取函数</returns>
        </member>
        <member name="M:AccessLib.ModAccessUtil.CreateNestedGetter``1(System.Type,System.String[])">
            <summary>
            创建快速通用读取器
            </summary>
            <typeparam name="TOut">目标变量类型</typeparam>
            <param name="type">目标类</param>
            <param name="fieldNames">路径</param>
            <returns>读取函数</returns>
        </member>
        <member name="M:AccessLib.ModAccessUtil.CreateNestedSetter``1(System.Type,System.String[])">
            <summary>
            创建快速通用写入器
            </summary>
            <typeparam name="TIn">写入变量类型</typeparam>
            <param name="type">目标类</param>
            <param name="fieldNames">路径</param>
            <returns>写入函数</returns>
        </member>
        <member name="M:AccessLib.ModAccessUtil.CreateNestedSetter``2(System.String[])">
            <summary>
            创建快速普通写入器
            </summary>
            <typeparam name="T">目标类</typeparam>
            <typeparam name="TIn">写入变量类型</typeparam>
            <param name="fieldNames">路径</param>
            <returns>写入函数</returns>
        </member>
        <member name="M:AccessLib.ModAccessUtil.CreateNestedMethodCaller``2(System.String[])">
            <summary>
            创建快速普通函数调用器
            </summary>
            <typeparam name="T">目标类</typeparam>
            <typeparam name="TOut">返回值类型</typeparam>
            <param name="fieldNames">路径</param>
            <returns>目标函数调用</returns>
        </member>
        <member name="M:AccessLib.ModAccessUtil.CreateNestedMethodCaller``1(System.Type,System.String[])">
            <summary>
            创建快速通用函数调用器
            </summary>
            <typeparam name="TOut">返回值类型</typeparam>
            <param name="type">目标类</param>
            <param name="fieldNames">路径</param>
            <returns>目标函数调用</returns>
        </member>
        <member name="M:GlassMod.BasicHook.OnGUIBackEvent(GameEntitySystem.Entity)">
            <returns>true: block vanilla </returns>
        </member>
        <member name="M:GlassMod.ModelBlock.GenerateTerrainVertices(Game.BlockGeometryGenerator,Game.TerrainGeometry,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Execute While Block Placed
            </summary>
        </member>
        <member name="M:GlassMod.ModelBlock.DrawBlock(Engine.Graphics.PrimitivesRenderer3D,System.Int32,Engine.Color,System.Single,Engine.Matrix@,Game.DrawBlockEnvironmentData)">
            <summary>
            Draw Item Block
            </summary>
        </member>
        <member name="M:GlassMod.Konata2048.DrawBlock(Engine.Graphics.PrimitivesRenderer3D,System.Int32,Engine.Color,System.Single,Engine.Matrix@,Game.DrawBlockEnvironmentData)">
            <summary>
            纯物品栏绘制
            </summary>
            <param name="primitivesRenderer"></param>
            <param name="value"></param>
            <param name="color"></param>
            <param name="size"></param>
            <param name="matrix"></param>
            <param name="environmentData"></param>
        </member>
        <member name="M:GlassMod.EntryHook.OnUpdateInputFromMouseAndKeyboard(Game.WidgetInput)">
            <summary>
            
            </summary>
            <returns>Whether to Contine Input</returns>
        </member>
        <member name="M:GlassMod.EntryHook.CreateSubsystemToInsert(System.Type)">
            <summary>
            初始化子系统
            </summary>
            <param name="subsystemType">typeof(Subsystem)</param>
            <returns>Subsystem Initialized</returns>
        </member>
        <member name="M:GlassMod.EntryHook.OnSubsystemAdded(GameEntitySystem.Project,System.Collections.Generic.Dictionary{System.String,GameEntitySystem.Subsystem},System.Collections.Generic.List{GameEntitySystem.Subsystem})">
            <summary>
            创建并插入子系统
            </summary>
            <param name="proj">项目</param>
            <param name="dictionary">xml字典</param>
            <param name="m_subsystems">Project子系统存储</param>
        </member>
        <member name="M:Engine.Media.BitmapFont2.Initialize(System.IO.Stream,System.IO.Stream,System.Nullable{Engine.Vector2})">
            <summary>
            纹理图
            </summary>
            <param name="TextureStream">图片文件的输入流</param>
            <param name="GlyphsStream">位图数据的输入流</param>
        </member>
        <member name="F:TVKeyboardMenu.KeyboardMenu.SingleKey.Position">
            <summary>
            Left Top Relative to Keybd
            </summary>
        </member>
        <member name="F:GMenuMod.PixelScreen.Div.ParentCalculateRequire">
            <summary>
            Upload to Parent while SelectingTargets
            </summary>
        </member>
        <member name="M:GMenuMod.PixelScreen.Div.ToRelativePos(System.Int32,System.Int32)">
            <summary>
            Must be used when cursor is in a element
            </summary>
            <param name="x">Mouse X</param>
            <param name="y">Mouse Y</param>
            <returns>Relative Pos</returns>
        </member>
        <member name="P:GMenuMod.PixelScreen.SelectionBar.CenterPoint">
            <summary>
            相对于外方块左上角
            </summary>
        </member>
        <member name="P:GMenuMod.PixelScreen.SelectionBar.InnerLeftTopPoint">
            <summary>
            相对于外方块左上角
            </summary>
        </member>
        <member name="M:GameEntitySystem.Entity.InternalLoadEntity(TemplatesDatabase.ValuesDictionary,GameEntitySystem.IdToEntityMap)">
            <summary>
            加载load方法
            </summary>
            <param name="valuesDictionary"></param>
            <param name="idToEntityMap"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:GameEntitySystem.Project.InitializeEntities(GameEntitySystem.EntityDataList)">
            <summary>
            创建空的Entity
            </summary>
            <param name="entityDataList"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ModsManager.HookAction(System.String,System.Func{Game.ModLoader,System.Boolean})">
            <summary>
            执行Hook
            </summary>
            <param name="HookName"></param>
            <param name="action"></param>
        </member>
        <member name="M:ModsManager.RegisterHook(System.String,Game.ModLoader)">
            <summary>
            注册Hook
            </summary>
            <param name="HookName"></param>
            <param name="modLoader"></param>
        </member>
        <member name="M:ModsManager.GetScmods(System.String)">
            <summary>
            获取所有文件
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:ModsManager.StreamToBytes(System.IO.Stream)">
            <summary>
            将 Stream 转成 byte[]
            </summary>
        </member>
        <member name="M:ModsManager.BytesToStream(System.Byte[])">
            <summary>
            将 byte[] 转成 Stream
            </summary>
        </member>
        <member name="M:ModsManager.StreamToFile(System.IO.Stream,System.String)">
            <summary>
            将 Stream 写入文件
            </summary>
        </member>
        <member name="M:ModsManager.FileToStream(System.String)">
            <summary>
            从文件读取 Stream
            </summary>
        </member>
        <member name="M:ModsManager.Cal_Normal_3D(Engine.Vector3,Engine.Vector3,Engine.Vector3)">
            <summary>
            计算三点成面的法向量
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <returns></returns>
        </member>
        <member name="T:WebSocketSharp.ByteOrder">
            <summary>
            Specifies the byte order.
            </summary>
        </member>
        <member name="F:WebSocketSharp.ByteOrder.Little">
            <summary>
            Specifies Little-endian.
            </summary>
        </member>
        <member name="F:WebSocketSharp.ByteOrder.Big">
            <summary>
            Specifies Big-endian.
            </summary>
        </member>
        <member name="T:WebSocketSharp.CloseEventArgs">
            <summary>
            Represents the event data for the <see cref="E:WebSocketSharp.WebSocket.OnClose"/> event.
            </summary>
            <remarks>
              <para>
              The close event occurs when the WebSocket connection has been closed.
              </para>
              <para>
              If you would like to get the reason for the connection close,
              you should access the <see cref="P:WebSocketSharp.CloseEventArgs.Code"/> or <see cref="P:WebSocketSharp.CloseEventArgs.Reason"/>
              property.
              </para>
            </remarks>
        </member>
        <member name="P:WebSocketSharp.CloseEventArgs.Code">
            <summary>
            Gets the status code for the connection close.
            </summary>
            <value>
              <para>
              A <see cref="T:System.UInt16"/> that represents the status code for
              the connection close.
              </para>
              <para>
              1005 (no status) if not present.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.CloseEventArgs.Reason">
            <summary>
            Gets the reason for the connection close.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the reason for
              the connection close.
              </para>
              <para>
              An empty string if not present.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.CloseEventArgs.WasClean">
            <summary>
            Gets a value indicating whether the connection has been closed cleanly.
            </summary>
            <value>
            <c>true</c> if the connection has been closed cleanly; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="T:WebSocketSharp.CloseStatusCode">
            <summary>
            Indicates the status code for the WebSocket connection close.
            </summary>
            <remarks>
              <para>
              The values of this enumeration are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
              <para>
              "Reserved value" cannot be sent as a status code in
              closing handshake by an endpoint.
              </para>
            </remarks>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.Normal">
            <summary>
            Equivalent to close status 1000. Indicates normal close.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.Away">
            <summary>
            Equivalent to close status 1001. Indicates that an endpoint is
            going away.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.ProtocolError">
            <summary>
            Equivalent to close status 1002. Indicates that an endpoint is
            terminating the connection due to a protocol error.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.UnsupportedData">
            <summary>
            Equivalent to close status 1003. Indicates that an endpoint is
            terminating the connection because it has received a type of
            data that it cannot accept.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.Undefined">
            <summary>
            Equivalent to close status 1004. Still undefined. A Reserved value.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.NoStatus">
            <summary>
            Equivalent to close status 1005. Indicates that no status code was
            actually present. A Reserved value.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.Abnormal">
            <summary>
            Equivalent to close status 1006. Indicates that the connection was
            closed abnormally. A Reserved value.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.InvalidData">
            <summary>
            Equivalent to close status 1007. Indicates that an endpoint is
            terminating the connection because it has received a message that
            contains data that is not consistent with the type of the message.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.PolicyViolation">
            <summary>
            Equivalent to close status 1008. Indicates that an endpoint is
            terminating the connection because it has received a message that
            violates its policy.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.TooBig">
            <summary>
            Equivalent to close status 1009. Indicates that an endpoint is
            terminating the connection because it has received a message that
            is too big to process.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.MandatoryExtension">
            <summary>
            Equivalent to close status 1010. Indicates that a client is
            terminating the connection because it has expected the server to
            negotiate one or more extension, but the server did not return
            them in the handshake response.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.ServerError">
            <summary>
            Equivalent to close status 1011. Indicates that a server is
            terminating the connection because it has encountered an unexpected
            condition that prevented it from fulfilling the request.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.TlsHandshakeFailure">
            <summary>
            Equivalent to close status 1015. Indicates that the connection was
            closed due to a failure to perform a TLS handshake. A Reserved value.
            </summary>
        </member>
        <member name="T:WebSocketSharp.CompressionMethod">
            <summary>
            Specifies the method for compression.
            </summary>
            <remarks>
            The methods are defined in
            <see href="https://tools.ietf.org/html/rfc7692">
            Compression Extensions for WebSocket</see>.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.CompressionMethod.None">
            <summary>
            Specifies no compression.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CompressionMethod.Deflate">
            <summary>
            Specifies DEFLATE.
            </summary>
        </member>
        <member name="T:WebSocketSharp.ErrorEventArgs">
            <summary>
            Represents the event data for the <see cref="E:WebSocketSharp.WebSocket.OnError"/> event.
            </summary>
            <remarks>
              <para>
              The error event occurs when the <see cref="T:WebSocketSharp.WebSocket"/> interface
              gets an error.
              </para>
              <para>
              If you would like to get the error message, you should access
              the <see cref="P:WebSocketSharp.ErrorEventArgs.Message"/> property.
              </para>
              <para>
              If the error is due to an exception, you can get it by accessing
              the <see cref="P:WebSocketSharp.ErrorEventArgs.Exception"/> property.
              </para>
            </remarks>
        </member>
        <member name="P:WebSocketSharp.ErrorEventArgs.Exception">
            <summary>
            Gets the exception that caused the error.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Exception"/> instance that represents
              the cause of the error.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.ErrorEventArgs.Message">
            <summary>
            Gets the error message.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the error message.
            </value>
        </member>
        <member name="T:WebSocketSharp.Ext">
            <summary>
            Provides a set of static methods for websocket-sharp.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Ext.GetDescription(WebSocketSharp.Net.HttpStatusCode)">
            <summary>
            Gets the description of the specified HTTP status code.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the description of
            the HTTP status code.
            </returns>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpStatusCode"/> enum values.
              </para>
              <para>
              It specifies the HTTP status code.
              </para>
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.GetStatusDescription(System.Int32)">
            <summary>
            Gets the description of the specified HTTP status code.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.String"/> that represents the description of
              the HTTP status code.
              </para>
              <para>
              An empty string if the description is not present.
              </para>
            </returns>
            <param name="code">
            An <see cref="T:System.Int32"/> that specifies the HTTP status code.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.IsCloseStatusCode(System.UInt16)">
            <summary>
            Determines whether the specified ushort is in the range of
            the status code for the WebSocket connection close.
            </summary>
            <remarks>
              <para>
              The ranges are the following:
              </para>
              <list type="bullet">
                <item>
                  <term>
                  1000-2999: These numbers are reserved for definition by
                  the WebSocket protocol.
                  </term>
                </item>
                <item>
                  <term>
                  3000-3999: These numbers are reserved for use by libraries,
                  frameworks, and applications.
                  </term>
                </item>
                <item>
                  <term>
                  4000-4999: These numbers are reserved for private use.
                  </term>
                </item>
              </list>
            </remarks>
            <returns>
            <c>true</c> if <paramref name="value"/> is in the range of
            the status code for the close; otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.UInt16"/> to test.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.IsEnclosedIn(System.String,System.Char)">
            <summary>
            Determines whether the specified string is enclosed in
            the specified character.
            </summary>
            <returns>
            <c>true</c> if <paramref name="value"/> is enclosed in
            <paramref name="c"/>; otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to test.
            </param>
            <param name="c">
            A <see cref="T:System.Char"/> to find.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.IsHostOrder(WebSocketSharp.ByteOrder)">
            <summary>
            Determines whether the specified byte order is host (this computer
            architecture) byte order.
            </summary>
            <returns>
            <c>true</c> if <paramref name="order"/> is host byte order; otherwise,
            <c>false</c>.
            </returns>
            <param name="order">
            One of the <see cref="T:WebSocketSharp.ByteOrder"/> enum values to test.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.IsLocal(System.Net.IPAddress)">
            <summary>
            Determines whether the specified IP address is a local IP address.
            </summary>
            <remarks>
            This local means NOT REMOTE for the current host.
            </remarks>
            <returns>
            <c>true</c> if <paramref name="address"/> is a local IP address;
            otherwise, <c>false</c>.
            </returns>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> to test.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether the specified string is <see langword="null"/> or
            an empty string.
            </summary>
            <returns>
            <c>true</c> if <paramref name="value"/> is <see langword="null"/> or
            an empty string; otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to test.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Retrieves a sub-array from the specified array. A sub-array starts at
            the specified index in the array.
            </summary>
            <returns>
            An array of T that receives a sub-array.
            </returns>
            <param name="array">
            An array of T from which to retrieve a sub-array.
            </param>
            <param name="startIndex">
            An <see cref="T:System.Int32"/> that specifies the zero-based index in the array
            at which retrieving starts.
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of elements to retrieve.
            </param>
            <typeparam name="T">
            The type of elements in the array.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="startIndex"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="startIndex"/> is greater than the end of the array.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is greater than the number of elements from
              <paramref name="startIndex"/> to the end of the array.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.SubArray``1(``0[],System.Int64,System.Int64)">
            <summary>
            Retrieves a sub-array from the specified array. A sub-array starts at
            the specified index in the array.
            </summary>
            <returns>
            An array of T that receives a sub-array.
            </returns>
            <param name="array">
            An array of T from which to retrieve a sub-array.
            </param>
            <param name="startIndex">
            A <see cref="T:System.Int64"/> that specifies the zero-based index in the array
            at which retrieving starts.
            </param>
            <param name="length">
            A <see cref="T:System.Int64"/> that specifies the number of elements to retrieve.
            </param>
            <typeparam name="T">
            The type of elements in the array.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="startIndex"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="startIndex"/> is greater than the end of the array.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is greater than the number of elements from
              <paramref name="startIndex"/> to the end of the array.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Executes the specified delegate <paramref name="n"/> times.
            </summary>
            <param name="n">
            An <see cref="T:System.Int32"/> that specifies the number of times to execute.
            </param>
            <param name="action">
              <para>
              An <c>Action&lt;int&gt;</c> delegate to execute.
              </para>
              <para>
              The <see cref="T:System.Int32"/> parameter is the zero-based count of iteration.
              </para>
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.Times(System.Int64,System.Action{System.Int64})">
            <summary>
            Executes the specified delegate <paramref name="n"/> times.
            </summary>
            <param name="n">
            A <see cref="T:System.Int64"/> that specifies the number of times to execute.
            </param>
            <param name="action">
              <para>
              An <c>Action&lt;long&gt;</c> delegate to execute.
              </para>
              <para>
              The <see cref="T:System.Int64"/> parameter is the zero-based count of iteration.
              </para>
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.ToHostOrder(System.Byte[],WebSocketSharp.ByteOrder)">
            <summary>
            Converts the order of elements in the specified byte array to
            host (this computer architecture) byte order.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.Byte"/> converted from
              <paramref name="source"/>.
              </para>
              <para>
              <paramref name="source"/> if the number of elements in
              it is less than 2 or <paramref name="sourceOrder"/> is
              same as host byte order.
              </para>
            </returns>
            <param name="source">
            An array of <see cref="T:System.Byte"/> to convert.
            </param>
            <param name="sourceOrder">
              <para>
              One of the <see cref="T:WebSocketSharp.ByteOrder"/> enum values.
              </para>
              <para>
              It specifies the order of elements in <paramref name="source"/>.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.ToString``1(``0[],System.String)">
            <summary>
            Converts the specified array to a string.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.String"/> converted by concatenating each element of
              <paramref name="array"/> across <paramref name="separator"/>.
              </para>
              <para>
              An empty string if <paramref name="array"/> is an empty array.
              </para>
            </returns>
            <param name="array">
            An array of T to convert.
            </param>
            <param name="separator">
            A <see cref="T:System.String"/> used to separate each element of
            <paramref name="array"/>.
            </param>
            <typeparam name="T">
            The type of elements in <paramref name="array"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.ToUri(System.String)">
            <summary>
            Converts the specified string to a <see cref="T:System.Uri"/>.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.Uri"/> converted from <paramref name="value"/>.
              </para>
              <para>
              <see langword="null"/> if the conversion has failed.
              </para>
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to convert.
            </param>
        </member>
        <member name="T:WebSocketSharp.Fin">
            <summary>
            Indicates whether a WebSocket frame is the final frame of a message.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.Fin.More">
            <summary>
            Equivalent to numeric value 0. Indicates more frames of a message follow.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Fin.Final">
            <summary>
            Equivalent to numeric value 1. Indicates the final frame of a message.
            </summary>
        </member>
        <member name="T:WebSocketSharp.LogData">
            <summary>
            Represents a log data used by the <see cref="T:WebSocketSharp.Logger"/> class.
            </summary>
        </member>
        <member name="P:WebSocketSharp.LogData.Caller">
            <summary>
            Gets the information of the logging method caller.
            </summary>
            <value>
            A <see cref="T:System.Diagnostics.StackFrame"/> that provides the information of
            the logging method caller.
            </value>
        </member>
        <member name="P:WebSocketSharp.LogData.Date">
            <summary>
            Gets the date and time when the log data was created.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the date and time when
            the log data was created.
            </value>
        </member>
        <member name="P:WebSocketSharp.LogData.Level">
            <summary>
            Gets the logging level of the log data.
            </summary>
            <value>
            One of the <see cref="T:WebSocketSharp.LogLevel"/> enum values that represents
            the logging level of the log data.
            </value>
        </member>
        <member name="P:WebSocketSharp.LogData.Message">
            <summary>
            Gets the message of the log data.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the message of the log data.
            </value>
        </member>
        <member name="M:WebSocketSharp.LogData.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current instance.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Logger">
            <summary>
            Provides a set of methods and properties for logging.
            </summary>
            <remarks>
              <para>
              If you output a log with lower than the current logging level,
              it cannot be outputted.
              </para>
              <para>
              The default output method writes a log to the standard output
              stream and the text file if it has a valid path.
              </para>
              <para>
              If you would like to use the custom output method, you should
              specify it with the constructor or the <see cref="P:WebSocketSharp.Logger.Output"/>
              property.
              </para>
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Logger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Logger"/> class.
            </summary>
            <remarks>
            This constructor initializes the logging level with the Error level.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Logger.#ctor(WebSocketSharp.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Logger"/> class with
            the specified logging level.
            </summary>
            <param name="level">
            One of the <see cref="T:WebSocketSharp.LogLevel"/> enum values that specifies
            the logging level.
            </param>
        </member>
        <member name="M:WebSocketSharp.Logger.#ctor(WebSocketSharp.LogLevel,System.String,System.Action{WebSocketSharp.LogData,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Logger"/> class with
            the specified logging level, path to the log file, and delegate
            used to output a log.
            </summary>
            <param name="level">
            One of the <see cref="T:WebSocketSharp.LogLevel"/> enum values that specifies
            the logging level.
            </param>
            <param name="file">
            A <see cref="T:System.String"/> that specifies the path to the log file.
            </param>
            <param name="output">
            An <see cref="T:System.Action{LogData, string}"/> that specifies
            the delegate used to output a log.
            </param>
        </member>
        <member name="P:WebSocketSharp.Logger.File">
            <summary>
            Gets or sets the path to the log file.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the path to the log file if any.
            </value>
        </member>
        <member name="P:WebSocketSharp.Logger.Level">
            <summary>
            Gets or sets the current logging level.
            </summary>
            <remarks>
            A log with lower than the value of this property cannot be outputted.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:WebSocketSharp.LogLevel"/> enum values.
              </para>
              <para>
              It represents the current logging level.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Logger.Output">
            <summary>
            Gets or sets the delegate used to output a log.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Action{LogData, string}"/> delegate.
              </para>
              <para>
              It references the method used to output a log.
              </para>
              <para>
              The string parameter passed to the delegate is the value of
              the <see cref="P:WebSocketSharp.Logger.File"/> property.
              </para>
              <para>
              If the value to set is <see langword="null"/>, the default
              output method is set.
              </para>
            </value>
        </member>
        <member name="M:WebSocketSharp.Logger.Debug(System.String)">
            <summary>
            Outputs the specified message as a log with the Debug level.
            </summary>
            <remarks>
            If the current logging level is higher than the Debug level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:WebSocketSharp.Logger.Error(System.String)">
            <summary>
            Outputs the specified message as a log with the Error level.
            </summary>
            <remarks>
            If the current logging level is higher than the Error level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:WebSocketSharp.Logger.Fatal(System.String)">
            <summary>
            Outputs the specified message as a log with the Fatal level.
            </summary>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:WebSocketSharp.Logger.Info(System.String)">
            <summary>
            Outputs the specified message as a log with the Info level.
            </summary>
            <remarks>
            If the current logging level is higher than the Info level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:WebSocketSharp.Logger.Trace(System.String)">
            <summary>
            Outputs the specified message as a log with the Trace level.
            </summary>
            <remarks>
            If the current logging level is higher than the Trace level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:WebSocketSharp.Logger.Warn(System.String)">
            <summary>
            Outputs the specified message as a log with the Warn level.
            </summary>
            <remarks>
            If the current logging level is higher than the Warn level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="T:WebSocketSharp.LogLevel">
            <summary>
            Specifies the logging level.
            </summary>
        </member>
        <member name="F:WebSocketSharp.LogLevel.Trace">
            <summary>
            Specifies the bottom logging level.
            </summary>
        </member>
        <member name="F:WebSocketSharp.LogLevel.Debug">
            <summary>
            Specifies the 2nd logging level from the bottom.
            </summary>
        </member>
        <member name="F:WebSocketSharp.LogLevel.Info">
            <summary>
            Specifies the 3rd logging level from the bottom.
            </summary>
        </member>
        <member name="F:WebSocketSharp.LogLevel.Warn">
            <summary>
            Specifies the 3rd logging level from the top.
            </summary>
        </member>
        <member name="F:WebSocketSharp.LogLevel.Error">
            <summary>
            Specifies the 2nd logging level from the top.
            </summary>
        </member>
        <member name="F:WebSocketSharp.LogLevel.Fatal">
            <summary>
            Specifies the top logging level.
            </summary>
        </member>
        <member name="F:WebSocketSharp.LogLevel.None">
            <summary>
            Specifies not to output logs.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Mask">
            <summary>
            Indicates whether the payload data of a WebSocket frame is masked.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.Mask.Off">
            <summary>
            Equivalent to numeric value 0. Indicates not masked.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Mask.On">
            <summary>
            Equivalent to numeric value 1. Indicates masked.
            </summary>
        </member>
        <member name="T:WebSocketSharp.MessageEventArgs">
            <summary>
            Represents the event data for the <see cref="E:WebSocketSharp.WebSocket.OnMessage"/> event.
            </summary>
            <remarks>
              <para>
              The message event occurs when the <see cref="T:WebSocketSharp.WebSocket"/> interface
              receives a message or a ping if the <see cref="P:WebSocketSharp.WebSocket.EmitOnPing"/>
              property is set to <c>true</c>.
              </para>
              <para>
              If you would like to get the message data, you should access
              the <see cref="P:WebSocketSharp.MessageEventArgs.Data"/> or <see cref="P:WebSocketSharp.MessageEventArgs.RawData"/> property.
              </para>
            </remarks>
        </member>
        <member name="P:WebSocketSharp.MessageEventArgs.Opcode">
            <summary>
            Gets the opcode for the message.
            </summary>
            <value>
            <see cref="F:WebSocketSharp.Opcode.Text"/>, <see cref="F:WebSocketSharp.Opcode.Binary"/>,
            or <see cref="F:WebSocketSharp.Opcode.Ping"/>.
            </value>
        </member>
        <member name="P:WebSocketSharp.MessageEventArgs.Data">
            <summary>
            Gets the message data as a <see cref="T:System.String"/>.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the message data
              if the message type is text or ping.
              </para>
              <para>
              <see langword="null"/> if the message type is binary or
              the message data could not be UTF-8-decoded.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.MessageEventArgs.IsBinary">
            <summary>
            Gets a value indicating whether the message type is binary.
            </summary>
            <value>
            <c>true</c> if the message type is binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.MessageEventArgs.IsPing">
            <summary>
            Gets a value indicating whether the message type is ping.
            </summary>
            <value>
            <c>true</c> if the message type is ping; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.MessageEventArgs.IsText">
            <summary>
            Gets a value indicating whether the message type is text.
            </summary>
            <value>
            <c>true</c> if the message type is text; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.MessageEventArgs.RawData">
            <summary>
            Gets the message data as an array of <see cref="T:System.Byte"/>.
            </summary>
            <value>
            An array of <see cref="T:System.Byte"/> that represents the message data.
            </value>
        </member>
        <member name="T:WebSocketSharp.Net.AuthenticationSchemes">
            <summary>
            Specifies the scheme for authentication.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.AuthenticationSchemes.None">
            <summary>
            No authentication is allowed.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.AuthenticationSchemes.Digest">
            <summary>
            Specifies digest authentication.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.AuthenticationSchemes.Basic">
            <summary>
            Specifies basic authentication.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.AuthenticationSchemes.Anonymous">
            <summary>
            Specifies anonymous authentication.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Net.ClientSslConfiguration">
            <summary>
            Stores the parameters for the <see cref="T:System.Net.Security.SslStream"/> used by clients.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.ClientSslConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.ClientSslConfiguration"/>
            class with the specified target host name.
            </summary>
            <param name="targetHost">
            A <see cref="T:System.String"/> that specifies the name of the server that
            will share a secure connection with a client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetHost"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="targetHost"/> is an empty string.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.ClientSslConfiguration.#ctor(WebSocketSharp.Net.ClientSslConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.ClientSslConfiguration"/>
            class copying from the specified configuration.
            </summary>
            <param name="configuration">
            A <see cref="T:WebSocketSharp.Net.ClientSslConfiguration"/> from which to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configuration"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.ClientSslConfiguration.CheckCertificateRevocation">
            <summary>
            Gets or sets a value indicating whether the certificate revocation
            list is checked during authentication.
            </summary>
            <value>
              <para>
              <c>true</c> if the certificate revocation list is checked during
              authentication; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ClientSslConfiguration.ClientCertificates">
            <summary>
            Gets or sets the collection of the certificates from which to select
            one to supply to the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> that contains
              the certificates from which to select.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ClientSslConfiguration.ClientCertificateSelectionCallback">
            <summary>
            Gets or sets the callback used to select the certificate to supply to
            the server.
            </summary>
            <remarks>
            No certificate is supplied if the callback returns <see langword="null"/>.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Net.Security.LocalCertificateSelectionCallback"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when a client selects
              the certificate.
              </para>
              <para>
              The default value is a delegate that invokes a method that only
              returns <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ClientSslConfiguration.EnabledSslProtocols">
            <summary>
            Gets or sets the enabled versions of the SSL/TLS protocols.
            </summary>
            <value>
              <para>
              Any of the <see cref="T:System.Security.Authentication.SslProtocols"/> enum values.
              </para>
              <para>
              It represents the enabled versions of the SSL/TLS protocols.
              </para>
              <para>
              The default value is <see cref="F:System.Security.Authentication.SslProtocols.None"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ClientSslConfiguration.ServerCertificateValidationCallback">
            <summary>
            Gets or sets the callback used to validate the certificate supplied by
            the server.
            </summary>
            <remarks>
            The certificate is valid if the callback returns <c>true</c>.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Net.Security.RemoteCertificateValidationCallback"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when a client validates
              the certificate.
              </para>
              <para>
              The default value is a delegate that invokes a method that only
              returns <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ClientSslConfiguration.TargetHost">
            <summary>
            Gets or sets the target host name.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the name of the server that
            will share a secure connection with a client.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation is an empty string.
            </exception>
        </member>
        <member name="T:WebSocketSharp.Net.Cookie">
            <summary>
            Provides a set of methods and properties used to manage an HTTP cookie.
            </summary>
            <remarks>
              <para>
              This class refers to the following specifications:
              </para>
              <list type="bullet">
                <item>
                  <term>
                  <see href="http://web.archive.org/web/20020803110822/http://wp.netscape.com/newsref/std/cookie_spec.html">
                  Netscape specification</see>
                  </term>
                </item>
                <item>
                  <term>
                  <see href="https://tools.ietf.org/html/rfc2109">RFC 2109</see>
                  </term>
                </item>
                <item>
                  <term>
                  <see href="https://tools.ietf.org/html/rfc2965">RFC 2965</see>
                  </term>
                </item>
                <item>
                  <term>
                  <see href="https://tools.ietf.org/html/rfc6265">RFC 6265</see>
                  </term>
                </item>
              </list>
              <para>
              This class cannot be inherited.
              </para>
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Net.Cookie.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.Cookie"/> class with
            the specified name and value.
            </summary>
            <param name="name">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the cookie.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> starts with a dollar sign.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> is a string not enclosed in double quotes
              although it contains a reserved character.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.Cookie.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.Cookie"/> class with
            the specified name, value, and path.
            </summary>
            <param name="name">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the cookie.
            </param>
            <param name="path">
            A <see cref="T:System.String"/> that specifies the value of the Path
            attribute of the cookie.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> starts with a dollar sign.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> is a string not enclosed in double quotes
              although it contains a reserved character.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.Cookie.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.Cookie"/> class with
            the specified name, value, path, and domain.
            </summary>
            <param name="name">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the cookie.
            </param>
            <param name="path">
            A <see cref="T:System.String"/> that specifies the value of the Path
            attribute of the cookie.
            </param>
            <param name="domain">
            A <see cref="T:System.String"/> that specifies the value of the Domain
            attribute of the cookie.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> starts with a dollar sign.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> is a string not enclosed in double quotes
              although it contains a reserved character.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Comment">
            <summary>
            Gets the value of the Comment attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the comment to document
              intended use of the cookie.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.CommentUri">
            <summary>
            Gets the value of the CommentURL attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URI that provides
              the comment to document intended use of the cookie.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Discard">
            <summary>
            Gets a value indicating whether the client discards the cookie
            unconditionally when the client terminates.
            </summary>
            <value>
              <para>
              <c>true</c> if the client discards the cookie unconditionally
              when the client terminates; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Domain">
            <summary>
            Gets or sets the value of the Domain attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the domain name that
              the cookie is valid for.
              </para>
              <para>
              An empty string if not necessary.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Expired">
            <summary>
            Gets or sets a value indicating whether the cookie has expired.
            </summary>
            <value>
              <para>
              <c>true</c> if the cookie has expired; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Expires">
            <summary>
            Gets or sets the value of the Expires attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.DateTime"/> that represents the date and time that
              the cookie expires on.
              </para>
              <para>
              <see cref="F:System.DateTime.MinValue"/> if not necessary.
              </para>
              <para>
              The default value is <see cref="F:System.DateTime.MinValue"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.HttpOnly">
            <summary>
            Gets or sets a value indicating whether non-HTTP APIs can access
            the cookie.
            </summary>
            <value>
              <para>
              <c>true</c> if non-HTTP APIs cannot access the cookie; otherwise,
              <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Name">
            <summary>
            Gets or sets the name of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation starts with a dollar sign.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Path">
            <summary>
            Gets or sets the value of the Path attribute of the cookie.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the subset of URI on
            the origin server that the cookie applies to.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Port">
            <summary>
            Gets the value of the Port attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the list of TCP ports
              that the cookie applies to.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Secure">
            <summary>
            Gets or sets a value indicating whether the security level of
            the cookie is secure.
            </summary>
            <remarks>
            When this property is <c>true</c>, the cookie may be included in
            the request only if the request is transmitted over HTTPS.
            </remarks>
            <value>
              <para>
              <c>true</c> if the security level of the cookie is secure;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.TimeStamp">
            <summary>
            Gets the time when the cookie was issued.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the time when
            the cookie was issued.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Value">
            <summary>
            Gets or sets the value of the cookie.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the cookie.
            </value>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation is a string not enclosed in
            double quotes although it contains a reserved character.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.Cookie.Version">
            <summary>
            Gets the value of the Version attribute of the cookie.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Int32"/> that represents the version of HTTP state
              management that the cookie conforms to.
              </para>
              <para>
              0 or 1.
              </para>
              <para>
              0 if not present.
              </para>
              <para>
              The default value is 0.
              </para>
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.Cookie.Equals(System.Object)">
            <summary>
            Determines whether the current cookie instance is equal to
            the specified <see cref="T:System.Object"/> instance.
            </summary>
            <param name="comparand">
              <para>
              An <see cref="T:System.Object"/> instance to compare with
              the current cookie instance.
              </para>
              <para>
              An reference to a <see cref="T:WebSocketSharp.Net.Cookie"/> instance.
              </para>
            </param>
            <returns>
            <c>true</c> if the current cookie instance is equal to
            <paramref name="comparand"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WebSocketSharp.Net.Cookie.GetHashCode">
            <summary>
            Gets a hash code for the current cookie instance.
            </summary>
            <returns>
            An <see cref="T:System.Int32"/> that represents the hash code.
            </returns>
        </member>
        <member name="M:WebSocketSharp.Net.Cookie.ToString">
            <summary>
            Returns a string that represents the current cookie instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that is suitable for the Cookie request header.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Net.CookieCollection">
            <summary>
            Provides a collection of instances of the <see cref="T:WebSocketSharp.Net.Cookie"/> class.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.CookieCollection"/> class.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.CookieCollection.Count">
            <summary>
            Gets the number of cookies in the collection.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of cookies in
            the collection.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.CookieCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value>
              <para>
              <c>true</c> if the collection is read-only; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.CookieCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the access to the collection is
            thread safe.
            </summary>
            <value>
              <para>
              <c>true</c> if the access to the collection is thread safe;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.CookieCollection.Item(System.Int32)">
            <summary>
            Gets the cookie at the specified index from the collection.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.Cookie"/> at the specified index in the collection.
            </value>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the cookie
            to find.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range for the collection.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.CookieCollection.Item(System.String)">
            <summary>
            Gets the cookie with the specified name from the collection.
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.Net.Cookie"/> with the specified name in the collection.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </value>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the cookie to find.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.CookieCollection.SyncRoot">
            <summary>
            Gets an object used to synchronize access to the collection.
            </summary>
            <value>
            An <see cref="T:System.Object"/> used to synchronize access to the collection.
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.Add(WebSocketSharp.Net.Cookie)">
            <summary>
            Adds the specified cookie to the collection.
            </summary>
            <param name="cookie">
            A <see cref="T:WebSocketSharp.Net.Cookie"/> to add.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.Add(WebSocketSharp.Net.CookieCollection)">
            <summary>
            Adds the specified cookies to the collection.
            </summary>
            <param name="cookies">
            A <see cref="T:WebSocketSharp.Net.CookieCollection"/> that contains the cookies to add.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookies"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.Clear">
            <summary>
            Removes all cookies from the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.Contains(WebSocketSharp.Net.Cookie)">
            <summary>
            Determines whether the collection contains the specified cookie.
            </summary>
            <returns>
            <c>true</c> if the cookie is found in the collection; otherwise,
            <c>false</c>.
            </returns>
            <param name="cookie">
            A <see cref="T:WebSocketSharp.Net.Cookie"/> to find.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.CopyTo(WebSocketSharp.Net.Cookie[],System.Int32)">
            <summary>
            Copies the elements of the collection to the specified array,
            starting at the specified index.
            </summary>
            <param name="array">
            An array of <see cref="T:WebSocketSharp.Net.Cookie"/> that specifies the destination of
            the elements copied from the collection.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index in
            the array at which copying starts.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            The space from <paramref name="index"/> to the end of
            <paramref name="array"/> is not enough to copy to.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator{Cookie}"/>
            instance that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.Remove(WebSocketSharp.Net.Cookie)">
            <summary>
            Removes the specified cookie from the collection.
            </summary>
            <returns>
              <para>
              <c>true</c> if the cookie is successfully removed; otherwise,
              <c>false</c>.
              </para>
              <para>
              <c>false</c> if the cookie is not found in the collection.
              </para>
            </returns>
            <param name="cookie">
            A <see cref="T:WebSocketSharp.Net.Cookie"/> to remove.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> instance that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Net.CookieException">
            <summary>
            The exception that is thrown when a <see cref="T:WebSocketSharp.Net.Cookie"/> gets an error.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.CookieException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.CookieException"/> class
            with the serialized data.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the source for
            the deserialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.CookieException"/> class.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.CookieException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with
            the data needed to serialize the current instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.CookieException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with
            the data needed to serialize the current instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:WebSocketSharp.Net.HttpBasicIdentity">
            <summary>
            Holds the username and password from an HTTP Basic authentication attempt.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.HttpBasicIdentity.Password">
            <summary>
            Gets the password from a basic authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the password.
            </value>
        </member>
        <member name="T:WebSocketSharp.Net.HttpDigestIdentity">
            <summary>
            Holds the username and other parameters from an HTTP Digest
            authentication attempt.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Algorithm">
            <summary>
            Gets the algorithm parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the algorithm parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Cnonce">
            <summary>
            Gets the cnonce parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the cnonce parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Nc">
            <summary>
            Gets the nc parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the nc parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Nonce">
            <summary>
            Gets the nonce parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the nonce parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Opaque">
            <summary>
            Gets the opaque parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the opaque parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Qop">
            <summary>
            Gets the qop parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the qop parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Realm">
            <summary>
            Gets the realm parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the realm parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Response">
            <summary>
            Gets the response parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the response parameter.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpDigestIdentity.Uri">
            <summary>
            Gets the uri parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the uri parameter.
            </value>
        </member>
        <member name="T:WebSocketSharp.Net.HttpListener">
            <summary>
            Provides a simple, programmatically controlled HTTP listener.
            </summary>
            <remarks>
              <para>
              The listener supports HTTP/1.1 version request and response.
              </para>
              <para>
              And the listener allows to accept WebSocket handshake requests.
              </para>
              <para>
              This class cannot be inherited.
              </para>
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.HttpListener"/> class.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.AuthenticationSchemes">
            <summary>
            Gets or sets the scheme used to authenticate the clients.
            </summary>
            <value>
              <para>
              One of the <see cref="T:WebSocketSharp.Net.AuthenticationSchemes"/>
              enum values.
              </para>
              <para>
              It represents the scheme used to authenticate the clients.
              </para>
              <para>
              The default value is
              <see cref="F:WebSocketSharp.Net.AuthenticationSchemes.Anonymous"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.AuthenticationSchemeSelector">
            <summary>
            Gets or sets the delegate called to select the scheme used to
            authenticate the clients.
            </summary>
            <remarks>
              <para>
              If this property is set, the listener uses the authentication
              scheme selected by the delegate for each request.
              </para>
              <para>
              Or if this property is not set, the listener uses the value of
              the <see cref="P:WebSocketSharp.Net.HttpListener.AuthenticationSchemes"/> property
              as the authentication scheme for all requests.
              </para>
            </remarks>
            <value>
              <para>
              A <c>Func&lt;<see cref="T:WebSocketSharp.Net.HttpListenerRequest"/>,
              <see cref="P:WebSocketSharp.Net.HttpListener.AuthenticationSchemes"/>&gt;</c> delegate or
              <see langword="null"/> if not needed.
              </para>
              <para>
              The delegate references the method used to select
              an authentication scheme.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.CertificateFolderPath">
            <summary>
            Gets or sets the path to the folder in which stores the certificate
            files used to authenticate the server on the secure connection.
            </summary>
            <remarks>
              <para>
              This property represents the path to the folder in which stores
              the certificate files associated with each port number of added
              URI prefixes.
              </para>
              <para>
              A set of the certificate files is a pair of &lt;port number&gt;.cer
              (DER) and &lt;port number&gt;.key (DER, RSA Private Key).
              </para>
              <para>
              If this property is <see langword="null"/> or an empty string,
              the result of <c>System.Environment.GetFolderPath (<see
              cref="F:System.Environment.SpecialFolder.ApplicationData"/>)</c>
              is used as the default path.
              </para>
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the path to the folder
              in which stores the certificate files.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.IgnoreWriteExceptions">
            <summary>
            Gets or sets a value indicating whether the listener returns
            exceptions that occur when sending the response to the client.
            </summary>
            <value>
              <para>
              <c>true</c> if the listener should not return those exceptions;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.IsListening">
            <summary>
            Gets a value indicating whether the listener has been started.
            </summary>
            <value>
            <c>true</c> if the listener has been started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.IsSupported">
            <summary>
            Gets a value indicating whether the listener can be used with
            the current operating system.
            </summary>
            <value>
            <c>true</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.Log">
            <summary>
            Gets the logging functions.
            </summary>
            <remarks>
              <para>
              The default logging level is <see cref="F:WebSocketSharp.LogLevel.Error"/>.
              </para>
              <para>
              If you would like to change it, you should set the <c>Log.Level</c>
              property to any of the <see cref="T:WebSocketSharp.LogLevel"/> enum values.
              </para>
            </remarks>
            <value>
            A <see cref="T:WebSocketSharp.Logger"/> that provides the logging functions.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.Prefixes">
            <summary>
            Gets the URI prefixes handled by the listener.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.HttpListenerPrefixCollection"/> that contains the URI
            prefixes.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.Realm">
            <summary>
            Gets or sets the name of the realm associated with the listener.
            </summary>
            <remarks>
            If this property is <see langword="null"/> or an empty string,
            "SECRET AREA" will be used as the name of the realm.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the realm.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.SslConfiguration">
            <summary>
            Gets the configuration for secure connection.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.ServerSslConfiguration"/> that represents the
            configuration used to provide secure connections.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.UnsafeConnectionNtlmAuthentication">
            <summary>
            Gets or sets a value indicating whether, when NTLM authentication is used,
            the authentication information of first request is used to authenticate
            additional requests on the same connection.
            </summary>
            <remarks>
            This property is not currently supported and always throws
            a <see cref="T:System.NotSupportedException"/>.
            </remarks>
            <value>
            <c>true</c> if the authentication information of first request is used;
            otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.NotSupportedException">
            Any use of this property.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListener.UserCredentialsFinder">
            <summary>
            Gets or sets the delegate called to find the credentials for
            an identity used to authenticate a client.
            </summary>
            <value>
              <para>
              A <c>Func&lt;<see cref="T:System.Security.Principal.IIdentity"/>,
              <see cref="T:WebSocketSharp.Net.NetworkCredential"/>&gt;</c> delegate or
              <see langword="null"/> if not needed.
              </para>
              <para>
              It references the method used to find the credentials.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.Abort">
            <summary>
            Shuts down the listener immediately.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)">
            <summary>
            Begins getting an incoming request asynchronously.
            </summary>
            <remarks>
              <para>
              This asynchronous operation must be completed by calling
              the EndGetContext method.
              </para>
              <para>
              Typically, the EndGetContext method is called by
              <paramref name="callback"/>.
              </para>
            </remarks>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that represents the status of
            the asynchronous operation.
            </returns>
            <param name="callback">
            An <see cref="T:System.AsyncCallback"/> delegate that references the method
            to invoke when the asynchronous operation completes.
            </param>
            <param name="state">
            An <see cref="T:System.Object"/> that specifies a user defined object to
            pass to <paramref name="callback"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This listener has not been started or is currently stopped.
              </para>
              <para>
              -or-
              </para>
              <para>
              This listener has no URI prefix on which listens.
              </para>
            </exception>
            <exception cref="T:WebSocketSharp.Net.HttpListenerException">
            This method is canceled.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.Close">
            <summary>
            Shuts down the listener.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.EndGetContext(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to get an incoming request.
            </summary>
            <remarks>
            This method completes an asynchronous operation started by
            calling the BeginGetContext method.
            </remarks>
            <returns>
            A <see cref="T:WebSocketSharp.Net.HttpListenerContext"/> that represents a request.
            </returns>
            <param name="asyncResult">
            An <see cref="T:System.IAsyncResult"/> instance obtained by calling
            the BeginGetContext method.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="asyncResult"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="asyncResult"/> was not obtained by calling
            the BeginGetContext method.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This listener has not been started or is currently stopped.
              </para>
              <para>
              -or-
              </para>
              <para>
              This method was already called for <paramref name="asyncResult"/>.
              </para>
            </exception>
            <exception cref="T:WebSocketSharp.Net.HttpListenerException">
            This method is canceled.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.GetContext">
            <summary>
            Gets an incoming request.
            </summary>
            <remarks>
            This method waits for an incoming request and returns when
            a request is received.
            </remarks>
            <returns>
            A <see cref="T:WebSocketSharp.Net.HttpListenerContext"/> that represents a request.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This listener has not been started or is currently stopped.
              </para>
              <para>
              -or-
              </para>
              <para>
              This listener has no URI prefix on which listens.
              </para>
            </exception>
            <exception cref="T:WebSocketSharp.Net.HttpListenerException">
            This method is canceled.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.Start">
            <summary>
            Starts receiving incoming requests.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.Stop">
            <summary>
            Stops receiving incoming requests.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListener.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by the listener.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Net.HttpListenerContext">
            <summary>
            Provides the access to the HTTP request and response objects used by
            the <see cref="T:WebSocketSharp.Net.HttpListener"/> class.
            </summary>
            <remarks>
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerContext.Request">
            <summary>
            Gets the HTTP request object that represents a client request.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.HttpListenerRequest"/> that represents the client request.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerContext.Response">
            <summary>
            Gets the HTTP response object used to send a response to the client.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.HttpListenerResponse"/> that represents a response to
            the client request.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerContext.AcceptWebSocket(System.String)">
            <summary>
            Accepts a WebSocket connection.
            </summary>
            <returns>
            A <see cref="T:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext"/> that represents
            the WebSocket handshake request.
            </returns>
            <param name="protocol">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the subprotocol
              supported on the WebSocket connection.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This method has already been done.
              </para>
              <para>
              -or-
              </para>
              <para>
              The client request is not a WebSocket handshake request.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="protocol"/> is empty.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocol"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerContext.AcceptWebSocket(System.String,System.Action{WebSocketSharp.WebSocket})">
            <summary>
            Accepts a WebSocket connection with initializing the WebSocket
            interface.
            </summary>
            <returns>
            A <see cref="T:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext"/> that represents
            the WebSocket handshake request.
            </returns>
            <param name="protocol">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the subprotocol
              supported on the WebSocket connection.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{WebSocket}"/> delegate.
              </para>
              <para>
              It specifies the delegate that invokes the method called when
              initializing a new WebSocket instance.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This method has already been done.
              </para>
              <para>
              -or-
              </para>
              <para>
              The client request is not a WebSocket handshake request.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="protocol"/> is empty.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocol"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="initializer"/> caused an exception.
              </para>
            </exception>
        </member>
        <member name="T:WebSocketSharp.Net.HttpListenerException">
            <summary>
            The exception that is thrown when an error occurs processing
            an HTTP request.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.HttpListenerException"/>
            class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            and <see cref="T:System.Runtime.Serialization.StreamingContext"/> classes.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains the serialized
            object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the source for
            the deserialization.
            </param>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.HttpListenerException"/>
            class.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.HttpListenerException"/>
            class with the specified error code.
            </summary>
            <param name="errorCode">
            An <see cref="T:System.Int32"/> that specifies the error code.
            </param>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.HttpListenerException"/>
            class with the specified error code and message.
            </summary>
            <param name="errorCode">
            An <see cref="T:System.Int32"/> that specifies the error code.
            </param>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message.
            </param>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerException.ErrorCode">
            <summary>
            Gets the error code that identifies the error that occurred.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Int32"/> that represents the error code.
              </para>
              <para>
              It is any of the Win32 error codes.
              </para>
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefix.#ctor(System.String,WebSocketSharp.Net.HttpListener)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.HttpListenerPrefix"/> class
            with the specified URI prefix and HTTP listener.
            </summary>
            <remarks>
            This constructor must be called after calling the CheckPrefix method.
            </remarks>
            <param name="uriPrefix">
            A <see cref="T:System.String"/> that specifies the URI prefix.
            </param>
            <param name="listener">
            A <see cref="T:WebSocketSharp.Net.HttpListener"/> that specifies the HTTP listener.
            </param>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefix.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified
            <see cref="T:System.Object"/> instance.
            </summary>
            <remarks>
            This method will be required to detect duplicates in any collection.
            </remarks>
            <param name="obj">
              <para>
              An <see cref="T:System.Object"/> instance to compare to the current instance.
              </para>
              <para>
              An reference to a <see cref="T:WebSocketSharp.Net.HttpListenerPrefix"/> instance.
              </para>
            </param>
            <returns>
            <c>true</c> if the current instance and <paramref name="obj"/> have
            the same URI prefix; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefix.GetHashCode">
            <summary>
            Gets the hash code for the current instance.
            </summary>
            <remarks>
            This method will be required to detect duplicates in any collection.
            </remarks>
            <returns>
            An <see cref="T:System.Int32"/> that represents the hash code.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Net.HttpListenerPrefixCollection">
            <summary>
            Provides a collection used to store the URI prefixes for a instance of
            the <see cref="T:WebSocketSharp.Net.HttpListener"/> class.
            </summary>
            <remarks>
            The <see cref="T:WebSocketSharp.Net.HttpListener"/> instance responds to the request which has
            a requested URI that the prefixes most closely match.
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerPrefixCollection.Count">
            <summary>
            Gets the number of prefixes in the collection.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of prefixes.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerPrefixCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the access to the collection is
            read-only.
            </summary>
            <value>
            Always returns <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerPrefixCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the access to the collection is
            synchronized.
            </summary>
            <value>
            Always returns <c>false</c>.
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefixCollection.Add(System.String)">
            <summary>
            Adds the specified URI prefix to the collection.
            </summary>
            <param name="uriPrefix">
              <para>
              A <see cref="T:System.String"/> that specifies the URI prefix to add.
              </para>
              <para>
              It must be a well-formed URI prefix with http or https scheme,
              and must end with a '/'.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uriPrefix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uriPrefix"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefixCollection.Clear">
            <summary>
            Removes all URI prefixes from the collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefixCollection.Contains(System.String)">
            <summary>
            Returns a value indicating whether the collection contains the
            specified URI prefix.
            </summary>
            <returns>
            <c>true</c> if the collection contains the URI prefix; otherwise,
            <c>false</c>.
            </returns>
            <param name="uriPrefix">
            A <see cref="T:System.String"/> that specifies the URI prefix to test.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uriPrefix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the contents of the collection to the specified array of string.
            </summary>
            <param name="array">
            An array of <see cref="T:System.String"/> that specifies the destination of
            the URI prefix strings copied from the collection.
            </param>
            <param name="offset">
            An <see cref="T:System.Int32"/> that specifies the zero-based index in
            the array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="offset"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            The space from <paramref name="offset"/> to the end of
            <paramref name="array"/> is not enough to copy to.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefixCollection.GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator{string}"/>
            instance that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefixCollection.Remove(System.String)">
            <summary>
            Removes the specified URI prefix from the collection.
            </summary>
            <returns>
            <c>true</c> if the URI prefix is successfully removed; otherwise,
            <c>false</c>.
            </returns>
            <param name="uriPrefix">
            A <see cref="T:System.String"/> that specifies the URI prefix to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uriPrefix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> instance that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Net.HttpListenerRequest">
            <summary>
            Represents an incoming HTTP request to a <see cref="T:WebSocketSharp.Net.HttpListener"/>
            instance.
            </summary>
            <remarks>
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.AcceptTypes">
            <summary>
            Gets the media types that are acceptable for the client.
            </summary>
            <value>
              <para>
              An array of <see cref="T:System.String"/> that contains the names of
              the media types specified in the value of the Accept header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.ClientCertificateError">
            <summary>
            Gets an error code that identifies a problem with the certificate
            provided by the client.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents an error code.
            </value>
            <exception cref="T:System.NotSupportedException">
            This property is not supported.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.ContentEncoding">
            <summary>
            Gets the encoding for the entity body data included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Text.Encoding"/> converted from the charset value of the
              Content-Type header.
              </para>
              <para>
              <see cref="P:System.Text.Encoding.UTF8"/> if the charset value is not available.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.ContentLength64">
            <summary>
            Gets the length in bytes of the entity body data included in the
            request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Int64"/> converted from the value of the Content-Length
              header.
              </para>
              <para>
              -1 if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.ContentType">
            <summary>
            Gets the media type of the entity body data included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Content-Type
              header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.Cookies">
            <summary>
            Gets the HTTP cookies included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.Net.CookieCollection"/> that contains the cookies.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.HasEntityBody">
            <summary>
            Gets a value indicating whether the request has the entity body data.
            </summary>
            <value>
            <c>true</c> if the request has the entity body data; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.Headers">
            <summary>
            Gets the HTTP headers included in the request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.HttpMethod">
            <summary>
            Gets the HTTP method specified by the client.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the HTTP method specified in
            the request line.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.InputStream">
            <summary>
            Gets a stream that contains the entity body data included in
            the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.IO.Stream"/> that contains the entity body data.
              </para>
              <para>
              <see cref="F:System.IO.Stream.Null"/> if the entity body data is not available.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.IsLocal">
            <summary>
            Gets a value indicating whether the request is sent from the
            local computer.
            </summary>
            <value>
            <c>true</c> if the request is sent from the same computer as
            the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.KeepAlive">
            <summary>
            Gets a value indicating whether a persistent connection is requested.
            </summary>
            <value>
            <c>true</c> if the request specifies that the connection is kept open;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.LocalEndPoint">
            <summary>
            Gets the endpoint to which the request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.ProtocolVersion">
            <summary>
            Gets the HTTP version specified by the client.
            </summary>
            <value>
            A <see cref="T:System.Version"/> that represents the HTTP version specified in
            the request line.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.QueryString">
            <summary>
            Gets the query string included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters.
              </para>
              <para>
              Each query parameter is decoded in UTF-8.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.RawUrl">
            <summary>
            Gets the raw URL specified by the client.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the request target specified in
            the request line.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.RemoteEndPoint">
            <summary>
            Gets the endpoint from which the request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.RequestTraceIdentifier">
            <summary>
            Gets the trace identifier of the request.
            </summary>
            <value>
            A <see cref="T:System.Guid"/> that represents the trace identifier.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.Url">
            <summary>
            Gets the URL requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URL parsed from the request.
              </para>
              <para>
              <see langword="null"/> if the URL cannot be parsed.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.UrlReferrer">
            <summary>
            Gets the URI of the resource from which the requested URL was obtained.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the value of the Referer header.
              </para>
              <para>
              <see langword="null"/> if the header value is not available.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.UserAgent">
            <summary>
            Gets the user agent from which the request is originated.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the User-Agent
              header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.UserHostAddress">
            <summary>
            Gets the IP address and port number to which the request is sent.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the server IP address and
            port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.UserHostName">
            <summary>
            Gets the server host name requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Host header.
              </para>
              <para>
              It includes the port number if provided.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerRequest.UserLanguages">
            <summary>
            Gets the natural languages that are acceptable for the client.
            </summary>
            <value>
              <para>
              An array of <see cref="T:System.String"/> that contains the names of the
              natural languages specified in the value of the Accept-Language
              header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)">
            <summary>
            Begins getting the certificate provided by the client asynchronously.
            </summary>
            <returns>
            An <see cref="T:System.IAsyncResult"/> instance that indicates the status of
            the operation.
            </returns>
            <param name="requestCallback">
            An <see cref="T:System.AsyncCallback"/> delegate that invokes the method called
            when the operation is complete.
            </param>
            <param name="state">
            An <see cref="T:System.Object"/> that specifies a user defined object to pass
            to the callback delegate.
            </param>
            <exception cref="T:System.NotSupportedException">
            This method is not supported.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to get the certificate provided by
            the client.
            </summary>
            <returns>
            A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> that represents an X.509 certificate
            provided by the client.
            </returns>
            <param name="asyncResult">
            An <see cref="T:System.IAsyncResult"/> instance returned when the operation
            started.
            </param>
            <exception cref="T:System.NotSupportedException">
            This method is not supported.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerRequest.GetClientCertificate">
            <summary>
            Gets the certificate provided by the client.
            </summary>
            <returns>
            A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> that represents an X.509 certificate
            provided by the client.
            </returns>
            <exception cref="T:System.NotSupportedException">
            This method is not supported.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerRequest.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the request line and headers
            included in the request.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Net.HttpListenerResponse">
            <summary>
            Represents an HTTP response to an HTTP request received by
            a <see cref="T:WebSocketSharp.Net.HttpListener"/> instance.
            </summary>
            <remarks>
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.ContentEncoding">
            <summary>
            Gets or sets the encoding for the entity body data included in
            the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Text.Encoding"/> that represents the encoding for
              the entity body data.
              </para>
              <para>
              <see langword="null"/> if no encoding is specified.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.ContentLength64">
            <summary>
            Gets or sets the number of bytes in the entity body data included in
            the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Int64"/> that represents the number of bytes in
              the entity body data.
              </para>
              <para>
              It is used for the value of the Content-Length header.
              </para>
              <para>
              The default value is zero.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is less than zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.ContentType">
            <summary>
            Gets or sets the media type of the entity body included in
            the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the media type of
              the entity body.
              </para>
              <para>
              It is used for the value of the Content-Type header.
              </para>
              <para>
              <see langword="null"/> if no media type is specified.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation contains
              an invalid character.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.Cookies">
            <summary>
            Gets or sets the collection of the HTTP cookies sent with the response.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.CookieCollection"/> that contains the cookies sent with
            the response.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.Headers">
            <summary>
            Gets or sets the collection of the HTTP headers sent to the client.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.WebHeaderCollection"/> that contains the headers sent to
            the client.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The value specified for a set operation is not valid for a response.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.KeepAlive">
            <summary>
            Gets or sets a value indicating whether the server requests
            a persistent connection.
            </summary>
            <value>
              <para>
              <c>true</c> if the server requests a persistent connection;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>true</c>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.OutputStream">
            <summary>
            Gets a stream instance to which the entity body data can be written.
            </summary>
            <value>
            A <see cref="T:System.IO.Stream"/> instance to which the entity body data can be
            written.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.ProtocolVersion">
            <summary>
            Gets the HTTP version used for the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Version"/> that represents the HTTP version used for
              the response.
              </para>
              <para>
              Always returns same as 1.1.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.RedirectLocation">
            <summary>
            Gets or sets the URL to which the client is redirected to locate
            a requested resource.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the absolute URL for
              the redirect location.
              </para>
              <para>
              It is used for the value of the Location header.
              </para>
              <para>
              <see langword="null"/> if no redirect location is specified.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation is not an absolute URL.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.SendChunked">
            <summary>
            Gets or sets a value indicating whether the response uses the chunked
            transfer encoding.
            </summary>
            <value>
              <para>
              <c>true</c> if the response uses the chunked transfer encoding;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.StatusCode">
            <summary>
            Gets or sets the HTTP status code returned to the client.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Int32"/> that represents the HTTP status code for
              the response to the request.
              </para>
              <para>
              The default value is 200. It indicates that the request has
              succeeded.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
            <exception cref="T:System.Net.ProtocolViolationException">
              <para>
              The value specified for a set operation is invalid.
              </para>
              <para>
              Valid values are between 100 and 999 inclusive.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.HttpListenerResponse.StatusDescription">
            <summary>
            Gets or sets the description of the HTTP status code returned to
            the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the description of
              the HTTP status code for the response to the request.
              </para>
              <para>
              The default value is
              the <see href="http://tools.ietf.org/html/rfc2616#section-10">
              RFC 2616</see> description for the <see cref="P:WebSocketSharp.Net.HttpListenerResponse.StatusCode"/>
              property value.
              </para>
              <para>
              An empty string if an RFC 2616 description does not exist.
              </para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation contains an invalid character.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.Abort">
            <summary>
            Closes the connection to the client without sending a response.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.AppendCookie(WebSocketSharp.Net.Cookie)">
            <summary>
            Appends an HTTP cookie to the cookies sent with the response.
            </summary>
            <param name="cookie">
            A <see cref="T:WebSocketSharp.Net.Cookie"/> to append.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.AppendHeader(System.String,System.String)">
            <summary>
            Appends an HTTP header with the specified name and value to
            the headers for the response.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to
            append.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to
            append.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current headers do not allow the header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.Close">
            <summary>
            Sends the response to the client and releases the resources used by
            this instance.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.Close(System.Byte[],System.Boolean)">
            <summary>
            Sends the response with the specified entity body data to the client
            and releases the resources used by this instance.
            </summary>
            <param name="responseEntity">
            An array of <see cref="T:System.Byte"/> that contains the entity body data.
            </param>
            <param name="willBlock">
            A <see cref="T:System.Boolean"/>: <c>true</c> if this method blocks execution while
            flushing the stream to the client; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="responseEntity"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.CopyFrom(WebSocketSharp.Net.HttpListenerResponse)">
            <summary>
            Copies some properties from the specified response instance to
            this instance.
            </summary>
            <param name="templateResponse">
            A <see cref="T:WebSocketSharp.Net.HttpListenerResponse"/> to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="templateResponse"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.Redirect(System.String)">
            <summary>
            Configures the response to redirect the client's request to
            the specified URL.
            </summary>
            <remarks>
            This method sets the <see cref="P:WebSocketSharp.Net.HttpListenerResponse.RedirectLocation"/> property to
            <paramref name="url"/>, the <see cref="P:WebSocketSharp.Net.HttpListenerResponse.StatusCode"/> property to
            302, and the <see cref="P:WebSocketSharp.Net.HttpListenerResponse.StatusDescription"/> property to "Found".
            </remarks>
            <param name="url">
            A <see cref="T:System.String"/> that specifies the absolute URL to which
            the client is redirected to locate a requested resource.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is not an absolute URL.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.SetCookie(WebSocketSharp.Net.Cookie)">
            <summary>
            Adds or updates an HTTP cookie in the cookies sent with the response.
            </summary>
            <param name="cookie">
            A <see cref="T:WebSocketSharp.Net.Cookie"/> to set.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="cookie"/> already exists in the cookies but
            it cannot be updated.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.SetHeader(System.String,System.String)">
            <summary>
            Adds or updates an HTTP header with the specified name and value in
            the headers for the response.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to set.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to set.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current headers do not allow the header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.HttpListenerResponse.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by this instance.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Net.HttpRequestHeader">
            <summary>
            Indicates the HTTP header that may be specified in a client request.
            </summary>
            <remarks>
            The headers of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc2616#section-14">RFC 2616</see> or
            <see href="http://tools.ietf.org/html/rfc6455#section-11.3">RFC 6455</see>.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.CacheControl">
            <summary>
            Indicates the Cache-Control header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Connection">
            <summary>
            Indicates the Connection header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Date">
            <summary>
            Indicates the Date header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.KeepAlive">
            <summary>
            Indicates the Keep-Alive header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Pragma">
            <summary>
            Indicates the Pragma header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Trailer">
            <summary>
            Indicates the Trailer header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.TransferEncoding">
            <summary>
            Indicates the Transfer-Encoding header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Upgrade">
            <summary>
            Indicates the Upgrade header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Via">
            <summary>
            Indicates the Via header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Warning">
            <summary>
            Indicates the Warning header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Allow">
            <summary>
            Indicates the Allow header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ContentLength">
            <summary>
            Indicates the Content-Length header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ContentType">
            <summary>
            Indicates the Content-Type header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ContentEncoding">
            <summary>
            Indicates the Content-Encoding header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ContentLanguage">
            <summary>
            Indicates the Content-Language header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ContentLocation">
            <summary>
            Indicates the Content-Location header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ContentMd5">
            <summary>
            Indicates the Content-MD5 header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ContentRange">
            <summary>
            Indicates the Content-Range header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Expires">
            <summary>
            Indicates the Expires header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.LastModified">
            <summary>
            Indicates the Last-Modified header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Accept">
            <summary>
            Indicates the Accept header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.AcceptCharset">
            <summary>
            Indicates the Accept-Charset header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.AcceptEncoding">
            <summary>
            Indicates the Accept-Encoding header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.AcceptLanguage">
            <summary>
            Indicates the Accept-Language header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Authorization">
            <summary>
            Indicates the Authorization header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Cookie">
            <summary>
            Indicates the Cookie header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Expect">
            <summary>
            Indicates the Expect header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.From">
            <summary>
            Indicates the From header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Host">
            <summary>
            Indicates the Host header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.IfMatch">
            <summary>
            Indicates the If-Match header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.IfModifiedSince">
            <summary>
            Indicates the If-Modified-Since header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.IfNoneMatch">
            <summary>
            Indicates the If-None-Match header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.IfRange">
            <summary>
            Indicates the If-Range header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.IfUnmodifiedSince">
            <summary>
            Indicates the If-Unmodified-Since header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.MaxForwards">
            <summary>
            Indicates the Max-Forwards header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.ProxyAuthorization">
            <summary>
            Indicates the Proxy-Authorization header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Referer">
            <summary>
            Indicates the Referer header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Range">
            <summary>
            Indicates the Range header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Te">
            <summary>
            Indicates the TE header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.Translate">
            <summary>
            Indicates the Translate header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.UserAgent">
            <summary>
            Indicates the User-Agent header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.SecWebSocketKey">
            <summary>
            Indicates the Sec-WebSocket-Key header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.SecWebSocketExtensions">
            <summary>
            Indicates the Sec-WebSocket-Extensions header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.SecWebSocketProtocol">
            <summary>
            Indicates the Sec-WebSocket-Protocol header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpRequestHeader.SecWebSocketVersion">
            <summary>
            Indicates the Sec-WebSocket-Version header.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Net.HttpResponseHeader">
            <summary>
            Indicates the HTTP header that can be specified in a server response.
            </summary>
            <remarks>
            The headers of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc2616#section-14">RFC 2616</see> or
            <see href="http://tools.ietf.org/html/rfc6455#section-11.3">RFC 6455</see>.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.CacheControl">
            <summary>
            Indicates the Cache-Control header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Connection">
            <summary>
            Indicates the Connection header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Date">
            <summary>
            Indicates the Date header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.KeepAlive">
            <summary>
            Indicates the Keep-Alive header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Pragma">
            <summary>
            Indicates the Pragma header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Trailer">
            <summary>
            Indicates the Trailer header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.TransferEncoding">
            <summary>
            Indicates the Transfer-Encoding header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Upgrade">
            <summary>
            Indicates the Upgrade header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Via">
            <summary>
            Indicates the Via header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Warning">
            <summary>
            Indicates the Warning header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Allow">
            <summary>
            Indicates the Allow header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ContentLength">
            <summary>
            Indicates the Content-Length header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ContentType">
            <summary>
            Indicates the Content-Type header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ContentEncoding">
            <summary>
            Indicates the Content-Encoding header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ContentLanguage">
            <summary>
            Indicates the Content-Language header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ContentLocation">
            <summary>
            Indicates the Content-Location header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ContentMd5">
            <summary>
            Indicates the Content-MD5 header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ContentRange">
            <summary>
            Indicates the Content-Range header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Expires">
            <summary>
            Indicates the Expires header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.LastModified">
            <summary>
            Indicates the Last-Modified header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.AcceptRanges">
            <summary>
            Indicates the Accept-Ranges header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Age">
            <summary>
            Indicates the Age header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ETag">
            <summary>
            Indicates the ETag header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Location">
            <summary>
            Indicates the Location header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.ProxyAuthenticate">
            <summary>
            Indicates the Proxy-Authenticate header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.RetryAfter">
            <summary>
            Indicates the Retry-After header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Server">
            <summary>
            Indicates the Server header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.SetCookie">
            <summary>
            Indicates the Set-Cookie header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.Vary">
            <summary>
            Indicates the Vary header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.WwwAuthenticate">
            <summary>
            Indicates the WWW-Authenticate header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.SecWebSocketExtensions">
            <summary>
            Indicates the Sec-WebSocket-Extensions header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.SecWebSocketAccept">
            <summary>
            Indicates the Sec-WebSocket-Accept header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.SecWebSocketProtocol">
            <summary>
            Indicates the Sec-WebSocket-Protocol header.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpResponseHeader.SecWebSocketVersion">
            <summary>
            Indicates the Sec-WebSocket-Version header.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Net.HttpStatusCode">
            <summary>
            Indicates the HTTP status code that can be specified in a server response.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc2616#section-10">RFC 2616</see>.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Continue">
            <summary>
            Equivalent to status code 100. Indicates that the client should continue
            with its request.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.SwitchingProtocols">
            <summary>
            Equivalent to status code 101. Indicates that the server is switching
            the HTTP version or protocol on the connection.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.OK">
            <summary>
            Equivalent to status code 200. Indicates that the client's request has
            succeeded.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Created">
            <summary>
            Equivalent to status code 201. Indicates that the client's request has
            been fulfilled and resulted in a new resource being created.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Accepted">
            <summary>
            Equivalent to status code 202. Indicates that the client's request has
            been accepted for processing, but the processing has not been completed.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.NonAuthoritativeInformation">
            <summary>
            Equivalent to status code 203. Indicates that the returned metainformation
            is from a local or a third-party copy instead of the origin server.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.NoContent">
            <summary>
            Equivalent to status code 204. Indicates that the server has fulfilled
            the client's request but does not need to return an entity-body.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.ResetContent">
            <summary>
            Equivalent to status code 205. Indicates that the server has fulfilled
            the client's request, and the user agent should reset the document view
            which caused the request to be sent.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.PartialContent">
            <summary>
            Equivalent to status code 206. Indicates that the server has fulfilled
            the partial GET request for the resource.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.MultipleChoices">
            <summary>
              <para>
              Equivalent to status code 300. Indicates that the requested resource
              corresponds to any of multiple representations.
              </para>
              <para>
              MultipleChoices is a synonym for Ambiguous.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Ambiguous">
            <summary>
              <para>
              Equivalent to status code 300. Indicates that the requested resource
              corresponds to any of multiple representations.
              </para>
              <para>
              Ambiguous is a synonym for MultipleChoices.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.MovedPermanently">
            <summary>
              <para>
              Equivalent to status code 301. Indicates that the requested resource
              has been assigned a new permanent URI and any future references to
              this resource should use one of the returned URIs.
              </para>
              <para>
              MovedPermanently is a synonym for Moved.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Moved">
            <summary>
              <para>
              Equivalent to status code 301. Indicates that the requested resource
              has been assigned a new permanent URI and any future references to
              this resource should use one of the returned URIs.
              </para>
              <para>
              Moved is a synonym for MovedPermanently.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Found">
            <summary>
              <para>
              Equivalent to status code 302. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              Found is a synonym for Redirect.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Redirect">
            <summary>
              <para>
              Equivalent to status code 302. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              Redirect is a synonym for Found.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.SeeOther">
            <summary>
              <para>
              Equivalent to status code 303. Indicates that the response to
              the request can be found under a different URI and should be
              retrieved using a GET method on that resource.
              </para>
              <para>
              SeeOther is a synonym for RedirectMethod.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.RedirectMethod">
            <summary>
              <para>
              Equivalent to status code 303. Indicates that the response to
              the request can be found under a different URI and should be
              retrieved using a GET method on that resource.
              </para>
              <para>
              RedirectMethod is a synonym for SeeOther.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.NotModified">
            <summary>
            Equivalent to status code 304. Indicates that the client has performed
            a conditional GET request and access is allowed, but the document has
            not been modified.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.UseProxy">
            <summary>
            Equivalent to status code 305. Indicates that the requested resource
            must be accessed through the proxy given by the Location field.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Unused">
            <summary>
            Equivalent to status code 306. This status code was used in a previous
            version of the specification, is no longer used, and is reserved for
            future use.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.TemporaryRedirect">
            <summary>
              <para>
              Equivalent to status code 307. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              TemporaryRedirect is a synonym for RedirectKeepVerb.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.RedirectKeepVerb">
            <summary>
              <para>
              Equivalent to status code 307. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              RedirectKeepVerb is a synonym for TemporaryRedirect.
              </para>
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.BadRequest">
            <summary>
            Equivalent to status code 400. Indicates that the client's request could
            not be understood by the server due to malformed syntax.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Unauthorized">
            <summary>
            Equivalent to status code 401. Indicates that the client's request
            requires user authentication.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.PaymentRequired">
            <summary>
            Equivalent to status code 402. This status code is reserved for future
            use.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Forbidden">
            <summary>
            Equivalent to status code 403. Indicates that the server understood
            the client's request but is refusing to fulfill it.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.NotFound">
            <summary>
            Equivalent to status code 404. Indicates that the server has not found
            anything matching the request URI.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.MethodNotAllowed">
            <summary>
            Equivalent to status code 405. Indicates that the method specified
            in the request line is not allowed for the resource identified by
            the request URI.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.NotAcceptable">
            <summary>
            Equivalent to status code 406. Indicates that the server does not
            have the appropriate resource to respond to the Accept headers in
            the client's request.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.ProxyAuthenticationRequired">
            <summary>
            Equivalent to status code 407. Indicates that the client must first
            authenticate itself with the proxy.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.RequestTimeout">
            <summary>
            Equivalent to status code 408. Indicates that the client did not produce
            a request within the time that the server was prepared to wait.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Conflict">
            <summary>
            Equivalent to status code 409. Indicates that the client's request could
            not be completed due to a conflict on the server.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.Gone">
            <summary>
            Equivalent to status code 410. Indicates that the requested resource is
            no longer available at the server and no forwarding address is known.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.LengthRequired">
            <summary>
            Equivalent to status code 411. Indicates that the server refuses to
            accept the client's request without a defined Content-Length.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.PreconditionFailed">
            <summary>
            Equivalent to status code 412. Indicates that the precondition given in
            one or more of the request headers evaluated to false when it was tested
            on the server.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.RequestEntityTooLarge">
            <summary>
            Equivalent to status code 413. Indicates that the entity of the client's
            request is larger than the server is willing or able to process.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.RequestUriTooLong">
            <summary>
            Equivalent to status code 414. Indicates that the request URI is longer
            than the server is willing to interpret.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.UnsupportedMediaType">
            <summary>
            Equivalent to status code 415. Indicates that the entity of the client's
            request is in a format not supported by the requested resource for the
            requested method.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.RequestedRangeNotSatisfiable">
            <summary>
            Equivalent to status code 416. Indicates that none of the range
            specifier values in a Range request header overlap the current
            extent of the selected resource.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.ExpectationFailed">
            <summary>
            Equivalent to status code 417. Indicates that the expectation given in
            an Expect request header could not be met by the server.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.InternalServerError">
            <summary>
            Equivalent to status code 500. Indicates that the server encountered
            an unexpected condition which prevented it from fulfilling the client's
            request.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.NotImplemented">
            <summary>
            Equivalent to status code 501. Indicates that the server does not
            support the functionality required to fulfill the client's request.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.BadGateway">
            <summary>
            Equivalent to status code 502. Indicates that a gateway or proxy server
            received an invalid response from the upstream server.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.ServiceUnavailable">
            <summary>
            Equivalent to status code 503. Indicates that the server is currently
            unable to handle the client's request due to a temporary overloading
            or maintenance of the server.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.GatewayTimeout">
            <summary>
            Equivalent to status code 504. Indicates that a gateway or proxy server
            did not receive a timely response from the upstream server or some other
            auxiliary server.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpStatusCode.HttpVersionNotSupported">
            <summary>
            Equivalent to status code 505. Indicates that the server does not
            support the HTTP version used in the client's request.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpUtility.htmlEncode(System.String,System.Boolean)">
            <summary>
            Converts the specified string to an HTML-encoded string.
            </summary>
            <remarks>
              <para>
              This method starts encoding with a NCR from the character code 160
              but does not stop at the character code 255.
              </para>
              <para>
              One reason is the unicode characters &#65308; and &#65310; that
              look like &lt; and &gt;.
              </para>
            </remarks>
            <returns>
            A <see cref="T:System.String"/> that represents an encoded string.
            </returns>
            <param name="s">
            A <see cref="T:System.String"/> to encode.
            </param>
            <param name="minimal">
            A <see cref="T:System.Boolean"/>: <c>true</c> if encodes without a NCR;
            otherwise, <c>false</c>.
            </param>
        </member>
        <member name="M:WebSocketSharp.Net.HttpUtility.initEntities">
            <summary>
            Initializes the _entities field.
            </summary>
            <remarks>
            This method builds a dictionary of HTML character entity references.
            This dictionary comes from the HTML 4.01 W3C recommendation.
            </remarks>
        </member>
        <member name="T:WebSocketSharp.Net.HttpVersion">
            <summary>
            Provides the HTTP version numbers.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpVersion.Version10">
            <summary>
            Provides a <see cref="T:System.Version"/> instance for the HTTP/1.0.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Net.HttpVersion.Version11">
            <summary>
            Provides a <see cref="T:System.Version"/> instance for the HTTP/1.1.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpVersion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.HttpVersion"/> class.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Net.NetworkCredential">
            <summary>
            Provides the credentials for the password-based authentication.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.NetworkCredential.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.NetworkCredential"/> class
            with the specified username and password.
            </summary>
            <param name="username">
            A <see cref="T:System.String"/> that specifies the username associated with
            the credentials.
            </param>
            <param name="password">
            A <see cref="T:System.String"/> that specifies the password for the username
            associated with the credentials.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="username"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is an empty string.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.NetworkCredential.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.NetworkCredential"/> class
            with the specified username, password, domain and roles.
            </summary>
            <param name="username">
            A <see cref="T:System.String"/> that specifies the username associated with
            the credentials.
            </param>
            <param name="password">
            A <see cref="T:System.String"/> that specifies the password for the username
            associated with the credentials.
            </param>
            <param name="domain">
            A <see cref="T:System.String"/> that specifies the domain associated with
            the credentials.
            </param>
            <param name="roles">
            An array of <see cref="T:System.String"/> that specifies the roles associated
            with the credentials if any.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="username"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is an empty string.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.NetworkCredential.Domain">
            <summary>
            Gets the domain associated with the credentials.
            </summary>
            <remarks>
            This property returns an empty string if the domain was initialized
            with <see langword="null"/>.
            </remarks>
            <value>
            A <see cref="T:System.String"/> that represents the domain name to which
            the username belongs.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.NetworkCredential.Password">
            <summary>
            Gets the password for the username associated with the credentials.
            </summary>
            <remarks>
            This property returns an empty string if the password was initialized
            with <see langword="null"/>.
            </remarks>
            <value>
            A <see cref="T:System.String"/> that represents the password.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.NetworkCredential.Roles">
            <summary>
            Gets the roles associated with the credentials.
            </summary>
            <remarks>
            This property returns an empty array if the roles were initialized
            with <see langword="null"/>.
            </remarks>
            <value>
            An array of <see cref="T:System.String"/> that represents the role names
            to which the username belongs.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.NetworkCredential.Username">
            <summary>
            Gets the username associated with the credentials.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the username.
            </value>
        </member>
        <member name="T:WebSocketSharp.Net.ServerSslConfiguration">
            <summary>
            Stores the parameters for the <see cref="T:System.Net.Security.SslStream"/> used by servers.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.ServerSslConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.ServerSslConfiguration"/>
            class.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.ServerSslConfiguration.#ctor(WebSocketSharp.Net.ServerSslConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.ServerSslConfiguration"/>
            class copying from the specified configuration.
            </summary>
            <param name="configuration">
            A <see cref="T:WebSocketSharp.Net.ServerSslConfiguration"/> from which to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configuration"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.ServerSslConfiguration.CheckCertificateRevocation">
            <summary>
            Gets or sets a value indicating whether the certificate revocation
            list is checked during authentication.
            </summary>
            <value>
              <para>
              <c>true</c> if the certificate revocation list is checked during
              authentication; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ServerSslConfiguration.ClientCertificateRequired">
            <summary>
            Gets or sets a value indicating whether the client is asked for
            a certificate for authentication.
            </summary>
            <value>
              <para>
              <c>true</c> if the client is asked for a certificate for
              authentication; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ServerSslConfiguration.ClientCertificateValidationCallback">
            <summary>
            Gets or sets the callback used to validate the certificate supplied by
            the client.
            </summary>
            <remarks>
            The certificate is valid if the callback returns <c>true</c>.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Net.Security.RemoteCertificateValidationCallback"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the server validates
              the certificate.
              </para>
              <para>
              The default value is a delegate that invokes a method that only
              returns <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ServerSslConfiguration.EnabledSslProtocols">
            <summary>
            Gets or sets the enabled versions of the SSL/TLS protocols.
            </summary>
            <value>
              <para>
              Any of the <see cref="T:System.Security.Authentication.SslProtocols"/> enum values.
              </para>
              <para>
              It represents the enabled versions of the SSL/TLS protocols.
              </para>
              <para>
              The default value is <see cref="F:System.Security.Authentication.SslProtocols.None"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.ServerSslConfiguration.ServerCertificate">
            <summary>
            Gets or sets the certificate used to authenticate the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> that represents an X.509 certificate.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="T:WebSocketSharp.Net.WebHeaderCollection">
            <summary>
            Provides a collection of the HTTP headers associated with a request or
            response.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.WebHeaderCollection"/> class
            from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and
            <see cref="T:System.Runtime.Serialization.StreamingContext"/> classes.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains the serialized
            object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the source for
            the deserialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the specified name is not found in
            <paramref name="serializationInfo"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.WebHeaderCollection"/>
            class.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.WebHeaderCollection.AllKeys">
            <summary>
            Gets all header names in the collection.
            </summary>
            <value>
            An array of <see cref="T:System.String"/> that contains all header names in
            the collection.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebHeaderCollection.Count">
            <summary>
            Gets the number of headers in the collection.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of headers in
            the collection.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebHeaderCollection.Item(WebSocketSharp.Net.HttpRequestHeader)">
            <summary>
            Gets or sets the specified request header.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the request header.
            </value>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to get or set.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.WebHeaderCollection.Item(WebSocketSharp.Net.HttpResponseHeader)">
            <summary>
            Gets or sets the specified response header.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the response header.
            </value>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to get or set.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.WebHeaderCollection.Keys">
            <summary>
            Gets a collection of header names in the collection.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"/> that contains
            all header names in the collection.
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.AddWithoutValidate(System.String,System.String)">
            <summary>
            Adds a header to the collection without checking if the header is on
            the restricted header list.
            </summary>
            <param name="headerName">
            A <see cref="T:System.String"/> that specifies the name of the header to add.
            </param>
            <param name="headerValue">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="headerName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="headerName"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerValue"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="headerValue"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Add(System.String)">
            <summary>
            Adds the specified header to the collection.
            </summary>
            <param name="header">
            A <see cref="T:System.String"/> that specifies the header to add,
            with the name and value separated by a colon character (':').
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="header"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="header"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> does not contain a colon character.
              </para>
              <para>
              -or-
              </para>
              <para>
              The name part of <paramref name="header"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The name part of <paramref name="header"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              The name part of <paramref name="header"/> contains an invalid
              character.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value part of <paramref name="header"/> contains an invalid
              character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the value part of <paramref name="header"/> is greater
            than 65,535 characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Add(WebSocketSharp.Net.HttpRequestHeader,System.String)">
            <summary>
            Adds the specified request header with the specified value to
            the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to add.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Add(WebSocketSharp.Net.HttpResponseHeader,System.String)">
            <summary>
            Adds the specified response header with the specified value to
            the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to add.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Add(System.String,System.String)">
            <summary>
            Adds a header with the specified name and value to the collection.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to add.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Clear">
            <summary>
            Removes all headers from the collection.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Get(System.Int32)">
            <summary>
            Get the value of the header at the specified index in the collection.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that receives the value of the header.
            </returns>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the header
            to find.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range of indexes for
            the collection.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Get(System.String)">
            <summary>
            Get the value of the header with the specified name in the collection.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.String"/> that receives the value of the header.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </returns>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to find.
            </param>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.GetEnumerator">
            <summary>
            Gets the enumerator used to iterate through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> instance used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.GetKey(System.Int32)">
            <summary>
            Get the name of the header at the specified index in the collection.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that receives the name of the header.
            </returns>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the header
            to find.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range of indexes for
            the collection.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.GetValues(System.Int32)">
            <summary>
            Get the values of the header at the specified index in the collection.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.String"/> that receives the values of
              the header.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
            </returns>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the header
            to find.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range of indexes for
            the collection.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.GetValues(System.String)">
            <summary>
            Get the values of the header with the specified name in the collection.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.String"/> that receives the values of
              the header.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
            </returns>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to find.
            </param>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data
            needed to serialize this instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with the data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.IsRestricted(System.String)">
            <summary>
            Determines whether the specified HTTP header can be set for the request.
            </summary>
            <returns>
            <c>true</c> if the header cannot be set; otherwise, <c>false</c>.
            </returns>
            <param name="headerName">
            A <see cref="T:System.String"/> that specifies the name of the header to test.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="headerName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="headerName"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.IsRestricted(System.String,System.Boolean)">
            <summary>
            Determines whether the specified HTTP header can be set for the request
            or the response.
            </summary>
            <returns>
            <c>true</c> if the header cannot be set; otherwise, <c>false</c>.
            </returns>
            <param name="headerName">
            A <see cref="T:System.String"/> that specifies the name of the header to test.
            </param>
            <param name="response">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the test is for the response;
            otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="headerName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="headerName"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.OnDeserialization(System.Object)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and raises
            the deserialization event when the deserialization is complete.
            </summary>
            <param name="sender">
            An <see cref="T:System.Object"/> instance that represents the source of
            the deserialization event.
            </param>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Remove(WebSocketSharp.Net.HttpRequestHeader)">
            <summary>
            Removes the specified request header from the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to remove.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="header"/> is a restricted header.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Remove(WebSocketSharp.Net.HttpResponseHeader)">
            <summary>
            Removes the specified response header from the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to remove.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="header"/> is a restricted header.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Remove(System.String)">
            <summary>
            Removes the specified header from the collection.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Set(WebSocketSharp.Net.HttpRequestHeader,System.String)">
            <summary>
            Sets the specified request header to the specified value.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to set.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the request header
            to set.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Set(WebSocketSharp.Net.HttpResponseHeader,System.String)">
            <summary>
            Sets the specified response header to the specified value.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to set.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the response header
            to set.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.Set(System.String,System.String)">
            <summary>
            Sets the specified header to the specified value.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to set.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to set.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.ToByteArray">
            <summary>
            Converts the current instance to an array of byte.
            </summary>
            <returns>
            An array of <see cref="T:System.Byte"/> converted from a string that represents
            the current instance.
            </returns>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents all headers in the collection.
            </returns>
        </member>
        <member name="M:WebSocketSharp.Net.WebHeaderCollection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data
            needed to serialize this instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with the data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext">
            <summary>
            Provides the access to the information in a WebSocket handshake request
            to a <see cref="T:WebSocketSharp.Net.HttpListener"/> instance.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.CookieCollection">
            <summary>
            Gets the HTTP cookies included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.Net.CookieCollection"/> that contains
              the cookies.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.Headers">
            <summary>
            Gets the HTTP headers included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.Host">
            <summary>
            Gets the value of the Host header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the server host name requested
              by the client.
              </para>
              <para>
              It includes the port number if provided.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsLocal">
            <summary>
            Gets a value indicating whether the handshake request is sent from
            the local computer.
            </summary>
            <value>
            <c>true</c> if the handshake request is sent from the same computer
            as the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the handshake request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.Origin">
            <summary>
            Gets the value of the Origin header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Origin header.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.QueryString">
            <summary>
            Gets the query string included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.RequestUri">
            <summary>
            Gets the URI requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URI parsed from the request.
              </para>
              <para>
              <see langword="null"/> if the URI cannot be parsed.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketKey">
            <summary>
            Gets the value of the Sec-WebSocket-Key header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of
              the Sec-WebSocket-Key header.
              </para>
              <para>
              The value is used to prove that the server received
              a valid WebSocket handshake request.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketProtocols">
            <summary>
            Gets the names of the subprotocols from the Sec-WebSocket-Protocol
            header included in the handshake request.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the names of the subprotocols.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketVersion">
            <summary>
            Gets the value of the Sec-WebSocket-Version header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the WebSocket protocol
              version specified by the client.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.ServerEndPoint">
            <summary>
            Gets the endpoint to which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.UserEndPoint">
            <summary>
            Gets the endpoint from which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.WebSocket">
            <summary>
            Gets the WebSocket interface used for two-way communication between
            the client and server.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the request line and headers
            included in the handshake request.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext">
            <summary>
            Provides the access to the information in a WebSocket handshake request
            to a <see cref="T:System.Net.Sockets.TcpListener"/> instance.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.CookieCollection">
            <summary>
            Gets the HTTP cookies included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.Net.CookieCollection"/> that contains
              the cookies.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.Headers">
            <summary>
            Gets the HTTP headers included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.Host">
            <summary>
            Gets the value of the Host header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the server host name requested
              by the client.
              </para>
              <para>
              It includes the port number if provided.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsLocal">
            <summary>
            Gets a value indicating whether the handshake request is sent from
            the local computer.
            </summary>
            <value>
            <c>true</c> if the handshake request is sent from the same computer
            as the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the handshake request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.Origin">
            <summary>
            Gets the value of the Origin header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Origin header.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.QueryString">
            <summary>
            Gets the query string included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.RequestUri">
            <summary>
            Gets the URI requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URI parsed from the request.
              </para>
              <para>
              <see langword="null"/> if the URI cannot be parsed.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.SecWebSocketKey">
            <summary>
            Gets the value of the Sec-WebSocket-Key header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of
              the Sec-WebSocket-Key header.
              </para>
              <para>
              The value is used to prove that the server received
              a valid WebSocket handshake request.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.SecWebSocketProtocols">
            <summary>
            Gets the names of the subprotocols from the Sec-WebSocket-Protocol
            header included in the handshake request.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the names of the subprotocols.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.SecWebSocketVersion">
            <summary>
            Gets the value of the Sec-WebSocket-Version header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the WebSocket protocol
              version specified by the client.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.ServerEndPoint">
            <summary>
            Gets the endpoint to which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.UserEndPoint">
            <summary>
            Gets the endpoint from which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.WebSocket">
            <summary>
            Gets the WebSocket interface used for two-way communication between
            the client and server.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="M:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the request line and headers
            included in the handshake request.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Net.WebSockets.WebSocketContext">
            <summary>
            Exposes the access to the information in a WebSocket handshake request.
            </summary>
            <remarks>
            This class is an abstract class.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Net.WebSockets.WebSocketContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.WebSockets.WebSocketContext"/> class.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.CookieCollection">
            <summary>
            Gets the HTTP cookies included in the handshake request.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.CookieCollection"/> that contains
            the cookies.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.Headers">
            <summary>
            Gets the HTTP headers included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.Host">
            <summary>
            Gets the value of the Host header included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the server host name requested
            by the client.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.IsLocal">
            <summary>
            Gets a value indicating whether the handshake request is sent from
            the local computer.
            </summary>
            <value>
            <c>true</c> if the handshake request is sent from the same computer
            as the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the handshake request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.Origin">
            <summary>
            Gets the value of the Origin header included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the Origin header.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.QueryString">
            <summary>
            Gets the query string included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query parameters.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.RequestUri">
            <summary>
            Gets the URI requested by the client.
            </summary>
            <value>
            A <see cref="T:System.Uri"/> that represents the URI parsed from the request.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.SecWebSocketKey">
            <summary>
            Gets the value of the Sec-WebSocket-Key header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of
              the Sec-WebSocket-Key header.
              </para>
              <para>
              The value is used to prove that the server received
              a valid WebSocket handshake request.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.SecWebSocketProtocols">
            <summary>
            Gets the names of the subprotocols from the Sec-WebSocket-Protocol
            header included in the handshake request.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the names of the subprotocols.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.SecWebSocketVersion">
            <summary>
            Gets the value of the Sec-WebSocket-Version header included in
            the handshake request.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the WebSocket protocol
            version specified by the client.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.ServerEndPoint">
            <summary>
            Gets the endpoint to which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
            A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
            authentication, and security roles for the client.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.UserEndPoint">
            <summary>
            Gets the endpoint from which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.WebSocket">
            <summary>
            Gets the WebSocket interface used for two-way communication between
            the client and server.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="T:WebSocketSharp.Opcode">
            <summary>
            Indicates the WebSocket frame type.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">
            Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.Opcode.Cont">
            <summary>
            Equivalent to numeric value 0. Indicates continuation frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Opcode.Text">
            <summary>
            Equivalent to numeric value 1. Indicates text frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Opcode.Binary">
            <summary>
            Equivalent to numeric value 2. Indicates binary frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Opcode.Close">
            <summary>
            Equivalent to numeric value 8. Indicates connection close frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Opcode.Ping">
            <summary>
            Equivalent to numeric value 9. Indicates ping frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Opcode.Pong">
            <summary>
            Equivalent to numeric value 10. Indicates pong frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.PayloadData.Empty">
            <summary>
            Represents the empty payload data.
            </summary>
        </member>
        <member name="F:WebSocketSharp.PayloadData.MaxLength">
            <summary>
            Represents the allowable max length of payload data.
            </summary>
            <remarks>
              <para>
              A <see cref="T:WebSocketSharp.WebSocketException"/> is thrown when the length of
              incoming payload data is greater than the value of this field.
              </para>
              <para>
              If you would like to change the value of this field, it must be
              a number between <see cref="F:WebSocketSharp.WebSocket.FragmentLength"/> and
              <see cref="F:System.Int64.MaxValue"/> inclusive.
              </para>
            </remarks>
        </member>
        <member name="T:WebSocketSharp.Rsv">
            <summary>
            Indicates whether each RSV (RSV1, RSV2, and RSV3) of a WebSocket frame is non-zero.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.Rsv.Off">
            <summary>
            Equivalent to numeric value 0. Indicates zero.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Rsv.On">
            <summary>
            Equivalent to numeric value 1. Indicates non-zero.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Server.HttpRequestEventArgs">
            <summary>
            Represents the event data for the HTTP request events of the
            <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
              <para>
              An HTTP request event occurs when the <see cref="T:WebSocketSharp.Server.HttpServer"/>
              instance receives an HTTP request.
              </para>
              <para>
              You should access the <see cref="P:WebSocketSharp.Server.HttpRequestEventArgs.Request"/> property if you would
              like to get the request data sent from a client.
              </para>
              <para>
              And you should access the <see cref="P:WebSocketSharp.Server.HttpRequestEventArgs.Response"/> property if you
              would like to get the response data to return to the client.
              </para>
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Server.HttpRequestEventArgs.Request">
            <summary>
            Gets the request data sent from a client.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.HttpListenerRequest"/> that provides the methods and
            properties for the request data.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpRequestEventArgs.Response">
            <summary>
            Gets the response data to return to the client.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.HttpListenerResponse"/> that provides the methods and
            properties for the response data.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpRequestEventArgs.User">
            <summary>
            Gets the information for the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance or <see langword="null"/>
              if not authenticated.
              </para>
              <para>
              That instance describes the identity, authentication scheme,
              and security roles for the client.
              </para>
            </value>
        </member>
        <member name="M:WebSocketSharp.Server.HttpRequestEventArgs.ReadFile(System.String)">
            <summary>
            Reads the specified file from the document folder of the
            <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.Byte"/> or <see langword="null"/>
              if it fails.
              </para>
              <para>
              That array receives the contents of the file.
              </para>
            </returns>
            <param name="path">
            A <see cref="T:System.String"/> that specifies a virtual path to
            find the file from the document folder.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> contains "..".
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpRequestEventArgs.TryReadFile(System.String,System.Byte[]@)">
            <summary>
            Tries to read the specified file from the document folder of
            the <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <returns>
            <c>true</c> if it succeeds to read; otherwise, <c>false</c>.
            </returns>
            <param name="path">
            A <see cref="T:System.String"/> that specifies a virtual path to find
            the file from the document folder.
            </param>
            <param name="contents">
              <para>
              When this method returns, an array of <see cref="T:System.Byte"/> or
              <see langword="null"/> if it fails.
              </para>
              <para>
              That array receives the contents of the file.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> contains "..".
              </para>
            </exception>
        </member>
        <member name="T:WebSocketSharp.Server.HttpServer">
            <summary>
            Provides a simple HTTP server.
            </summary>
            <remarks>
              <para>
              The server supports HTTP/1.1 version request and response.
              </para>
              <para>
              Also the server allows to accept WebSocket handshake requests.
              </para>
              <para>
              This class can provide multiple WebSocket services.
              </para>
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
            The new instance listens for incoming requests on
            <see cref="F:System.Net.IPAddress.Any"/> and port 80.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.HttpServer"/> class with
            the specified port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming requests on
              <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.HttpServer"/> class with
            the specified URL.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming requests on the IP address and
              port of <paramref name="url"/>.
              </para>
              <para>
              Either port 80 or 443 is used if <paramref name="url"/> includes
              no port. Port 443 is used if the scheme of <paramref name="url"/>
              is https; otherwise, port 80 is used.
              </para>
              <para>
              The new instance provides secure connections if the scheme of
              <paramref name="url"/> is https.
              </para>
            </remarks>
            <param name="url">
            A <see cref="T:System.String"/> that specifies the HTTP URL of the server.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is invalid.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.HttpServer"/> class with
            the specified port and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming requests on
            <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.HttpServer"/> class with
            the specified IP address and port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming requests on
              <paramref name="address"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.#ctor(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.HttpServer"/> class with
            the specified IP address, port, and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming requests on
            <paramref name="address"/> and <paramref name="port"/>.
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.Address">
            <summary>
            Gets the IP address of the server.
            </summary>
            <value>
            A <see cref="T:System.Net.IPAddress"/> that represents the local IP
            address on which to listen for incoming requests.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.AuthenticationSchemes">
            <summary>
            Gets or sets the scheme used to authenticate the clients.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:WebSocketSharp.Net.AuthenticationSchemes"/>
              enum values.
              </para>
              <para>
              It represents the scheme used to authenticate the clients.
              </para>
              <para>
              The default value is
              <see cref="F:WebSocketSharp.Net.AuthenticationSchemes.Anonymous"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.DocumentRootPath">
            <summary>
            Gets or sets the path to the document folder of the server.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents a path to the folder
              from which to find the requested file.
              </para>
              <para>
              '/' or '\' is trimmed from the end of the value if present.
              </para>
              <para>
              The default value is "./Public".
              </para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation is an absolute root.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation is an invalid path string.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.IsListening">
            <summary>
            Gets a value indicating whether the server has started.
            </summary>
            <value>
            <c>true</c> if the server has started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.IsSecure">
            <summary>
            Gets a value indicating whether the server provides secure connections.
            </summary>
            <value>
            <c>true</c> if the server provides secure connections; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.KeepClean">
            <summary>
            Gets or sets a value indicating whether the server cleans up
            the inactive sessions periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              <c>true</c> if the server cleans up the inactive sessions
              every 60 seconds; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.Log">
            <summary>
            Gets the logging function for the server.
            </summary>
            <remarks>
            The default logging level is <see cref="F:WebSocketSharp.LogLevel.Error"/>.
            </remarks>
            <value>
            A <see cref="T:WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.Port">
            <summary>
            Gets the port of the server.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the port on which
            to listen for incoming requests.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.Realm">
            <summary>
            Gets or sets the name of the realm associated with the server.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the realm.
              </para>
              <para>
              "SECRET AREA" is used as the name of the realm if the value is
              <see langword="null"/> or an empty string.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.ReuseAddress">
            <summary>
            Gets or sets a value indicating whether the server is allowed to
            be bound to an address that is already in use.
            </summary>
            <remarks>
              <para>
              You should set this property to <c>true</c> if you would like to
              resolve to wait for socket in TIME_WAIT state.
              </para>
              <para>
              The set operation works if the current state of the server is
              Ready or Stop.
              </para>
            </remarks>
            <value>
              <para>
              <c>true</c> if the server is allowed to be bound to an address
              that is already in use; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.SslConfiguration">
            <summary>
            Gets the configuration for secure connection.
            </summary>
            <remarks>
            The configuration is used when the server attempts to start,
            so it must be configured before the start method is called.
            </remarks>
            <value>
            A <see cref="T:WebSocketSharp.Net.ServerSslConfiguration"/> that represents the
            configuration used to provide secure connections.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The server does not provide secure connections.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.UserCredentialsFinder">
            <summary>
            Gets or sets the delegate used to find the credentials for an identity.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Func{IIdentity, NetworkCredential}"/>
              delegate.
              </para>
              <para>
              The delegate invokes the method called when the server finds
              the credentials used to authenticate a client.
              </para>
              <para>
              The method must return <see langword="null"/> if the credentials
              are not found.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 1 second.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.HttpServer.WebSocketServices">
            <summary>
            Gets the management function for the WebSocket services provided by
            the server.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Server.WebSocketServiceManager"/> that manages the WebSocket
            services provided by the server.
            </value>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnConnect">
            <summary>
            Occurs when the server receives an HTTP CONNECT request.
            </summary>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnDelete">
            <summary>
            Occurs when the server receives an HTTP DELETE request.
            </summary>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnGet">
            <summary>
            Occurs when the server receives an HTTP GET request.
            </summary>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnHead">
            <summary>
            Occurs when the server receives an HTTP HEAD request.
            </summary>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnOptions">
            <summary>
            Occurs when the server receives an HTTP OPTIONS request.
            </summary>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnPost">
            <summary>
            Occurs when the server receives an HTTP POST request.
            </summary>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnPut">
            <summary>
            Occurs when the server receives an HTTP PUT request.
            </summary>
        </member>
        <member name="E:WebSocketSharp.Server.HttpServer.OnTrace">
            <summary>
            Occurs when the server receives an HTTP TRACE request.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.AddWebSocketService``1(System.String)">
            <summary>
            Adds a WebSocket service with the specified behavior and path.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.AddWebSocketService``1(System.String,System.Action{``0})">
            <summary>
            Adds a WebSocket service with the specified behavior, path,
            and initializer.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{TBehavior}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the service
              initializes a new session instance.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.RemoveWebSocketService(System.String)">
            <summary>
            Removes a WebSocket service with the specified path.
            </summary>
            <remarks>
            The service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
            <returns>
            <c>true</c> if the service is successfully found and removed;
            otherwise, <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to remove.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.Start">
            <summary>
            Starts receiving incoming requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Ready or Stop.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              There is no server certificate for secure connection.
              </para>
              <para>
              -or-
              </para>
              <para>
              The underlying <see cref="T:WebSocketSharp.Net.HttpListener"/> has failed to start.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.HttpServer.Stop">
            <summary>
            Stops receiving incoming requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Start.
            </remarks>
        </member>
        <member name="T:WebSocketSharp.Server.IWebSocketSession">
            <summary>
            Exposes the access to the information in a WebSocket session.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Server.IWebSocketSession.ID">
            <summary>
            Gets the unique ID of the session.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the unique ID of the session.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.IWebSocketSession.StartTime">
            <summary>
            Gets the time that the session has started.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the time that the session
            has started.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.IWebSocketSession.WebSocket">
            <summary>
            Gets the WebSocket interface for the session.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="T:WebSocketSharp.Server.WebSocketBehavior">
            <summary>
            Exposes a set of methods and properties used to define the behavior of
            a WebSocket service provided by the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> or
            <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
            This class is an abstract class.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketBehavior"/> class.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.Headers">
            <summary>
            Gets the HTTP headers for a session.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers
            included in the WebSocket handshake request.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.IsAlive">
            <summary>
            Gets a value indicating whether the communication is possible for
            a session.
            </summary>
            <value>
            <c>true</c> if the communication is possible; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.QueryString">
            <summary>
            Gets the query string for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters included in the WebSocket handshake request.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.ReadyState">
            <summary>
            Gets the current state of the WebSocket interface for a session.
            </summary>
            <value>
              <para>
              One of the <see cref="T:WebSocketSharp.WebSocketState"/> enum values.
              </para>
              <para>
              It indicates the current state of the interface.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.Sessions">
            <summary>
            Gets the management function for the sessions in the service.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Server.WebSocketSessionManager"/> that manages the sessions in
            the service.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.User">
            <summary>
            Gets the client information for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.UserEndPoint">
            <summary>
            Gets the client endpoint for a session.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.CookiesValidator">
            <summary>
            Gets or sets the delegate used to validate the HTTP cookies.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Func{CookieCollection, CookieCollection, bool}"/>
              delegate.
              </para>
              <para>
              The delegate invokes the method called when the WebSocket interface
              for a session validates the handshake request.
              </para>
              <para>
              1st <see cref="T:WebSocketSharp.Net.CookieCollection"/> parameter passed to the method
              contains the cookies to validate.
              </para>
              <para>
              2nd <see cref="T:WebSocketSharp.Net.CookieCollection"/> parameter passed to the method
              receives the cookies to send to the client.
              </para>
              <para>
              The method must return <c>true</c> if the cookies are valid.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.EmitOnPing">
            <summary>
            Gets or sets a value indicating whether the message event is emitted
            when the WebSocket interface for a session receives a ping.
            </summary>
            <value>
              <para>
              <c>true</c> if the interface emits the message event when receives
              a ping; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.HostValidator">
            <summary>
            Gets or sets the delegate used to validate the Host header.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Func{string, bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the WebSocket interface
              for a session validates the handshake request.
              </para>
              <para>
              The <see cref="T:System.String"/> parameter passed to the method is the value
              of the Host header.
              </para>
              <para>
              The method must return <c>true</c> if the header value is valid.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.ID">
            <summary>
            Gets the unique ID of a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the unique ID of the session.
              </para>
              <para>
              <see langword="null"/> if the session has not started yet.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.IgnoreExtensions">
            <summary>
            Gets or sets a value indicating whether the WebSocket interface for
            a session ignores the Sec-WebSocket-Extensions header.
            </summary>
            <value>
              <para>
              <c>true</c> if the interface ignores the extensions requested
              from the client; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.OriginValidator">
            <summary>
            Gets or sets the delegate used to validate the Origin header.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Func{string, bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the WebSocket interface
              for a session validates the handshake request.
              </para>
              <para>
              The <see cref="T:System.String"/> parameter passed to the method is the value
              of the Origin header or <see langword="null"/> if the header is not
              present.
              </para>
              <para>
              The method must return <c>true</c> if the header value is valid.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.Protocol">
            <summary>
            Gets or sets the name of the WebSocket subprotocol for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the subprotocol.
              </para>
              <para>
              The value specified for a set operation must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
              <para>
              The default value is an empty string.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the session has already started.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation is not a token.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.StartTime">
            <summary>
            Gets the time that a session has started.
            </summary>
            <value>
              <para>
              A <see cref="T:System.DateTime"/> that represents the time that the session
              has started.
              </para>
              <para>
              <see cref="F:System.DateTime.MaxValue"/> if the session has not started yet.
              </para>
            </value>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Close">
            <summary>
            Closes the WebSocket connection for a session.
            </summary>
            <remarks>
            This method does nothing if the current state of the WebSocket
            interface is Closing or Closed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Close(System.UInt16,System.String)">
            <summary>
            Closes the WebSocket connection for a session with the specified
            code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the WebSocket
            interface is Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Close(WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the WebSocket connection for a session with the specified
            code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the WebSocket
            interface is Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.CloseAsync">
            <summary>
            Closes the WebSocket connection for a session asynchronously.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the WebSocket
              interface is Closing or Closed.
              </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.CloseAsync(System.UInt16,System.String)">
            <summary>
            Closes the WebSocket connection for a session asynchronously with
            the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the WebSocket
              interface is Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.CloseAsync(WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the WebSocket connection for a session asynchronously with
            the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the WebSocket
              interface is Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.OnClose(WebSocketSharp.CloseEventArgs)">
            <summary>
            Called when the WebSocket connection for a session has been closed.
            </summary>
            <param name="e">
            A <see cref="T:WebSocketSharp.CloseEventArgs"/> that represents the event data passed
            from a <see cref="E:WebSocketSharp.WebSocket.OnClose"/> event.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.OnError(WebSocketSharp.ErrorEventArgs)">
            <summary>
            Called when the WebSocket interface for a session gets an error.
            </summary>
            <param name="e">
            A <see cref="T:WebSocketSharp.ErrorEventArgs"/> that represents the event data passed
            from a <see cref="E:WebSocketSharp.WebSocket.OnError"/> event.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.OnMessage(WebSocketSharp.MessageEventArgs)">
            <summary>
            Called when the WebSocket interface for a session receives a message.
            </summary>
            <param name="e">
            A <see cref="T:WebSocketSharp.MessageEventArgs"/> that represents the event data passed
            from a <see cref="E:WebSocketSharp.WebSocket.OnMessage"/> event.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.OnOpen">
            <summary>
            Called when the WebSocket connection for a session has been established.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Ping">
            <summary>
            Sends a ping to the client for a session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Ping(System.String)">
            <summary>
            Sends a ping with the specified message to the client for a session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="message">
              <para>
              A <see cref="T:System.String"/> that specifies the message to send.
              </para>
              <para>
              Its size must be 125 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="message"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="message"/> is greater than 125 bytes.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Send(System.Byte[])">
            <summary>
            Sends the specified data to the client for a session.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Send(System.IO.FileInfo)">
            <summary>
            Sends the specified file to the client for a session.
            </summary>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Send(System.String)">
            <summary>
            Sends the specified data to the client for a session.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.Send(System.IO.Stream,System.Int32)">
            <summary>
            Sends the data from the specified stream instance to the client for
            a session.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.Byte[],System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client for a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.IO.FileInfo,System.Action{System.Boolean})">
            <summary>
            Sends the specified file to the client for a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client for a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.IO.Stream,System.Int32,System.Action{System.Boolean})">
            <summary>
            Sends the data from the specified stream instance to the client for
            a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketBehavior.WebSocketSharp#Server#IWebSocketSession#WebSocket">
            <summary>
            Gets the WebSocket interface for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.WebSocket"/> that represents
              the interface.
              </para>
              <para>
              <see langword="null"/> if the session has not started yet.
              </para>
            </value>
        </member>
        <member name="T:WebSocketSharp.Server.WebSocketServer">
            <summary>
            Provides a WebSocket protocol server.
            </summary>
            <remarks>
            This class can provide multiple WebSocket services.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> class.
            </summary>
            <remarks>
            The new instance listens for incoming handshake requests on
            <see cref="F:System.Net.IPAddress.Any"/> and port 80.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> class
            with the specified port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming handshake requests on
              <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> class
            with the specified URL.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming handshake requests on
              the IP address and port of <paramref name="url"/>.
              </para>
              <para>
              Either port 80 or 443 is used if <paramref name="url"/> includes
              no port. Port 443 is used if the scheme of <paramref name="url"/>
              is wss; otherwise, port 80 is used.
              </para>
              <para>
              The new instance provides secure connections if the scheme of
              <paramref name="url"/> is wss.
              </para>
            </remarks>
            <param name="url">
            A <see cref="T:System.String"/> that specifies the WebSocket URL of the server.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is invalid.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> class
            with the specified port and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming handshake requests on
            <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> class
            with the specified IP address and port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming handshake requests on
              <paramref name="address"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> class
            with the specified IP address, port, and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming handshake requests on
            <paramref name="address"/> and <paramref name="port"/>.
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.Address">
            <summary>
            Gets the IP address of the server.
            </summary>
            <value>
            A <see cref="T:System.Net.IPAddress"/> that represents the local IP
            address on which to listen for incoming handshake requests.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.AuthenticationSchemes">
            <summary>
            Gets or sets the scheme used to authenticate the clients.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:WebSocketSharp.Net.AuthenticationSchemes"/>
              enum values.
              </para>
              <para>
              It represents the scheme used to authenticate the clients.
              </para>
              <para>
              The default value is
              <see cref="F:WebSocketSharp.Net.AuthenticationSchemes.Anonymous"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.IsListening">
            <summary>
            Gets a value indicating whether the server has started.
            </summary>
            <value>
            <c>true</c> if the server has started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.IsSecure">
            <summary>
            Gets a value indicating whether the server provides secure connections.
            </summary>
            <value>
            <c>true</c> if the server provides secure connections; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.KeepClean">
            <summary>
            Gets or sets a value indicating whether the server cleans up
            the inactive sessions periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              <c>true</c> if the server cleans up the inactive sessions
              every 60 seconds; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.Log">
            <summary>
            Gets the logging function for the server.
            </summary>
            <remarks>
            The default logging level is <see cref="F:WebSocketSharp.LogLevel.Error"/>.
            </remarks>
            <value>
            A <see cref="T:WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.Port">
            <summary>
            Gets the port of the server.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the port on which
            to listen for incoming handshake requests.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.Realm">
            <summary>
            Gets or sets the name of the realm associated with the server.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the realm.
              </para>
              <para>
              "SECRET AREA" is used as the name of the realm if the value is
              <see langword="null"/> or an empty string.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.ReuseAddress">
            <summary>
            Gets or sets a value indicating whether the server is allowed to
            be bound to an address that is already in use.
            </summary>
            <remarks>
              <para>
              You should set this property to <c>true</c> if you would like to
              resolve to wait for socket in TIME_WAIT state.
              </para>
              <para>
              The set operation works if the current state of the server is
              Ready or Stop.
              </para>
            </remarks>
            <value>
              <para>
              <c>true</c> if the server is allowed to be bound to an address
              that is already in use; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.SslConfiguration">
            <summary>
            Gets the configuration for secure connection.
            </summary>
            <remarks>
            The configuration is used when the server attempts to start,
            so it must be configured before the start method is called.
            </remarks>
            <value>
            A <see cref="T:WebSocketSharp.Net.ServerSslConfiguration"/> that represents the
            configuration used to provide secure connections.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The server does not provide secure connections.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.UserCredentialsFinder">
            <summary>
            Gets or sets the delegate used to find the credentials for an identity.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Func{IIdentity, NetworkCredential}"/>
              delegate.
              </para>
              <para>
              The delegate invokes the method called when the server finds
              the credentials used to authenticate a client.
              </para>
              <para>
              The method must return <see langword="null"/> if the credentials
              are not found.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 1 second.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.WebSocketServices">
            <summary>
            Gets the management function for the WebSocket services provided by
            the server.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Server.WebSocketServiceManager"/> that manages the WebSocket
            services provided by the server.
            </value>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.AddWebSocketService``1(System.String)">
            <summary>
            Adds a WebSocket service with the specified behavior and path.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.AddWebSocketService``1(System.String,System.Action{``0})">
            <summary>
            Adds a WebSocket service with the specified behavior, path,
            and initializer.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{TBehavior}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the service
              initializes a new session instance.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.RemoveWebSocketService(System.String)">
            <summary>
            Removes a WebSocket service with the specified path.
            </summary>
            <remarks>
            The service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
            <returns>
            <c>true</c> if the service is successfully found and removed;
            otherwise, <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to remove.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.Start">
            <summary>
            Starts receiving incoming handshake requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Ready or Stop.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              There is no server certificate for secure connection.
              </para>
              <para>
              -or-
              </para>
              <para>
              The underlying <see cref="T:System.Net.Sockets.TcpListener"/> has failed to start.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.Stop">
            <summary>
            Stops receiving incoming handshake requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Start.
            </remarks>
        </member>
        <member name="T:WebSocketSharp.Server.WebSocketServiceHost">
            <summary>
            Exposes the methods and properties used to access the information in
            a WebSocket service provided by the <see cref="T:WebSocketSharp.Server.WebSocketServer"/> or
            <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
            This class is an abstract class.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost.#ctor(System.String,WebSocketSharp.Logger)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServiceHost"/>
            class with the specified path and logging function.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specifies the absolute path to
            the service.
            </param>
            <param name="log">
            A <see cref="T:WebSocketSharp.Logger"/> that specifies the logging function for
            the service.
            </param>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceHost.Log">
            <summary>
            Gets the logging function for the service.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceHost.KeepClean">
            <summary>
            Gets or sets a value indicating whether the service cleans up
            the inactive sessions periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            <c>true</c> if the service cleans up the inactive sessions every
            60 seconds; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceHost.Path">
            <summary>
            Gets the path to the service.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the absolute path to
            the service.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceHost.Sessions">
            <summary>
            Gets the management function for the sessions in the service.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Server.WebSocketSessionManager"/> that manages the sessions in
            the service.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceHost.BehaviorType">
            <summary>
            Gets the type of the behavior of the service.
            </summary>
            <value>
            A <see cref="T:System.Type"/> that represents the type of the behavior of
            the service.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceHost.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            A <see cref="T:System.TimeSpan"/> that represents the time to wait for
            the response.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost.CreateSession">
            <summary>
            Creates a new session for the service.
            </summary>
            <returns>
            A <see cref="T:WebSocketSharp.Server.WebSocketBehavior"/> instance that represents
            the new session.
            </returns>
        </member>
        <member name="T:WebSocketSharp.Server.WebSocketServiceManager">
            <summary>
            Provides the management function for the WebSocket services.
            </summary>
            <remarks>
            This class manages the WebSocket services provided by the
            <see cref="T:WebSocketSharp.Server.WebSocketServer"/> or <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceManager.Count">
            <summary>
            Gets the number of the WebSocket services.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the services.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceManager.Hosts">
            <summary>
            Gets the service host instances for the WebSocket services.
            </summary>
            <value>
              <para>
              An <c>IEnumerable&lt;WebSocketServiceHost&gt;</c> instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the service host instances.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceManager.Item(System.String)">
            <summary>
            Gets the service host instance for a WebSocket service with
            the specified path.
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.Server.WebSocketServiceHost"/> instance or
              <see langword="null"/> if not found.
              </para>
              <para>
              The service host instance provides the function to access
              the information in the service.
              </para>
            </value>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to find.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceManager.KeepClean">
            <summary>
            Gets or sets a value indicating whether the inactive sessions in
            the WebSocket services are cleaned up periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              <c>true</c> if the inactive sessions are cleaned up every 60
              seconds; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceManager.Paths">
            <summary>
            Gets the paths for the WebSocket services.
            </summary>
            <value>
              <para>
              An <c>IEnumerable&lt;string&gt;</c> instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the paths.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceManager.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 1 second.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceManager.AddService``1(System.String,System.Action{``0})">
            <summary>
            Adds a WebSocket service with the specified behavior, path,
            and initializer.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{TBehavior}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the service
              initializes a new session instance.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceManager.Clear">
            <summary>
            Removes all WebSocket services managed by the manager.
            </summary>
            <remarks>
            Each service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceManager.RemoveService(System.String)">
            <summary>
            Removes a WebSocket service with the specified path.
            </summary>
            <remarks>
            The service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
            <returns>
            <c>true</c> if the service is successfully found and removed;
            otherwise, <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to remove.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceManager.TryGetServiceHost(System.String,WebSocketSharp.Server.WebSocketServiceHost@)">
            <summary>
            Tries to get the service host instance for a WebSocket service with
            the specified path.
            </summary>
            <returns>
            <c>true</c> if the service is successfully found; otherwise,
            <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to find.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="host">
              <para>
              When this method returns, a <see cref="T:WebSocketSharp.Server.WebSocketServiceHost"/>
              instance or <see langword="null"/> if not found.
              </para>
              <para>
              The service host instance provides the function to access
              the information in the service.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
        </member>
        <member name="T:WebSocketSharp.Server.WebSocketSessionManager">
            <summary>
            Provides the management function for the sessions in a WebSocket service.
            </summary>
            <remarks>
            This class manages the sessions in a WebSocket service provided by the
            <see cref="T:WebSocketSharp.Server.WebSocketServer"/> or <see cref="T:WebSocketSharp.Server.HttpServer"/> class.
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.ActiveIDs">
            <summary>
            Gets the IDs for the active sessions in the WebSocket service.
            </summary>
            <value>
              <para>
              An <c>IEnumerable&lt;string&gt;</c> instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the IDs for the active sessions.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.Count">
            <summary>
            Gets the number of the sessions in the WebSocket service.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the sessions.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.IDs">
            <summary>
            Gets the IDs for the sessions in the WebSocket service.
            </summary>
            <value>
              <para>
              An <c>IEnumerable&lt;string&gt;</c> instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the IDs for the sessions.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.InactiveIDs">
            <summary>
            Gets the IDs for the inactive sessions in the WebSocket service.
            </summary>
            <value>
              <para>
              An <c>IEnumerable&lt;string&gt;</c> instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the IDs for the inactive sessions.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.Item(System.String)">
            <summary>
            Gets the session instance with the specified ID.
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.Server.IWebSocketSession"/> instance or <see langword="null"/>
              if not found.
              </para>
              <para>
              The session instance provides the function to access the information
              in the session.
              </para>
            </value>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to find.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.KeepClean">
            <summary>
            Gets or sets a value indicating whether the inactive sessions in
            the WebSocket service are cleaned up periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            <c>true</c> if the inactive sessions are cleaned up every 60 seconds;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.Sessions">
            <summary>
            Gets the session instances in the WebSocket service.
            </summary>
            <value>
              <para>
              An <c>IEnumerable&lt;IWebSocketSession&gt;</c> instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the session instances.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketSessionManager.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            A <see cref="T:System.TimeSpan"/> that represents the time to wait for
            the response.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.Broadcast(System.Byte[])">
            <summary>
            Sends the specified data to every client in the WebSocket service.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.Broadcast(System.String)">
            <summary>
            Sends the specified data to every client in the WebSocket service.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.Broadcast(System.IO.Stream,System.Int32)">
            <summary>
            Sends the data from the specified stream instance to every client in
            the WebSocket service.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.BroadcastAsync(System.Byte[],System.Action)">
            <summary>
            Sends the specified data to every client in the WebSocket service
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.BroadcastAsync(System.String,System.Action)">
            <summary>
            Sends the specified data to every client in the WebSocket service
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.BroadcastAsync(System.IO.Stream,System.Int32,System.Action)">
            <summary>
            Sends the data from the specified stream instance to every client in
            the WebSocket service asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.CloseSession(System.String)">
            <summary>
            Closes the session with the specified ID.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to close.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.CloseSession(System.String,System.UInt16,System.String)">
            <summary>
            Closes the session with the specified ID, code, and reason.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to close.
            </param>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.CloseSession(System.String,WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the session with the specified ID, code, and reason.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to close.
            </param>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.PingTo(System.String)">
            <summary>
            Sends a ping to the client using the specified session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.PingTo(System.String,System.String)">
            <summary>
            Sends a ping with the specified message to the client using
            the specified session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="message">
              <para>
              A <see cref="T:System.String"/> that specifies the message to send.
              </para>
              <para>
              Its size must be 125 bytes or less in UTF-8.
              </para>
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="message"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="message"/> is greater than 125 bytes.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.SendTo(System.Byte[],System.String)">
            <summary>
            Sends the specified data to the client using the specified session.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.SendTo(System.String,System.String)">
            <summary>
            Sends the specified data to the client using the specified session.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.SendTo(System.IO.Stream,System.Int32,System.String)">
            <summary>
            Sends the data from the specified stream instance to the client using
            the specified session.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.SendToAsync(System.Byte[],System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client using the specified session
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.SendToAsync(System.String,System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client using the specified session
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.SendToAsync(System.IO.Stream,System.Int32,System.String,System.Action{System.Boolean})">
            <summary>
            Sends the data from the specified stream instance to the client using
            the specified session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.Sweep">
            <summary>
            Cleans up the inactive sessions in the WebSocket service.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketSessionManager.TryGetSession(System.String,WebSocketSharp.Server.IWebSocketSession@)">
            <summary>
            Tries to get the session instance with the specified ID.
            </summary>
            <returns>
            <c>true</c> if the session instance is successfully found; otherwise,
            <c>false</c>.
            </returns>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to find.
            </param>
            <param name="session">
              <para>
              When this method returns, a <see cref="T:WebSocketSharp.Server.IWebSocketSession"/>
              instance or <see langword="null"/> if not found.
              </para>
              <para>
              The session instance provides the function to access
              the information in the session.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
        </member>
        <member name="T:WebSocketSharp.WebSocket">
            <summary>
            Implements the WebSocket interface.
            </summary>
            <remarks>
              <para>
              This class provides a set of methods and properties for two-way
              communication using the WebSocket protocol.
              </para>
              <para>
              The WebSocket protocol is defined in
              <see href="http://tools.ietf.org/html/rfc6455">RFC 6455</see>.
              </para>
            </remarks>
        </member>
        <member name="F:WebSocketSharp.WebSocket.EmptyBytes">
            <summary>
            Represents the empty array of <see cref="T:System.Byte"/> used internally.
            </summary>
        </member>
        <member name="F:WebSocketSharp.WebSocket.FragmentLength">
            <summary>
            Represents the length used to determine whether the data should
            be fragmented in sending.
            </summary>
            <remarks>
              <para>
              The data will be fragmented if its length is greater than
              the value of this field.
              </para>
              <para>
              If you would like to change the value, you must set it to
              a value between 125 and <c>Int32.MaxValue - 14</c> inclusive.
              </para>
            </remarks>
        </member>
        <member name="F:WebSocketSharp.WebSocket.RandomNumber">
            <summary>
            Represents the random number generator used internally.
            </summary>
        </member>
        <member name="M:WebSocketSharp.WebSocket.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.WebSocket"/> class with
            the specified URL and optionally subprotocols.
            </summary>
            <param name="url">
              <para>
              A <see cref="T:System.String"/> that specifies the URL to which to connect.
              </para>
              <para>
              The scheme of the URL must be ws or wss.
              </para>
              <para>
              The new instance uses a secure connection if the scheme is wss.
              </para>
            </param>
            <param name="protocols">
              <para>
              An array of <see cref="T:System.String"/> that specifies the names of
              the subprotocols if necessary.
              </para>
              <para>
              Each value of the array must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is an invalid WebSocket URL string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocols"/> contains a value that is not a token.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocols"/> contains a value twice.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Compression">
            <summary>
            Gets or sets the compression method used to compress a message.
            </summary>
            <remarks>
            The set operation works if the current state of the interface is
            New or Closed.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:WebSocketSharp.CompressionMethod"/> enum values.
              </para>
              <para>
              It indicates the compression method used to compress a message.
              </para>
              <para>
              The default value is <see cref="F:WebSocketSharp.CompressionMethod.None"/>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the interface is not for
            the client.
            </exception>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Cookies">
            <summary>
            Gets the HTTP cookies included in the handshake request/response.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{WebSocketSharp.Net.Cookie}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the cookies.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Credentials">
            <summary>
            Gets the credentials for the HTTP authentication (Basic/Digest).
            </summary>
            <value>
              <para>
              A <see cref="T:WebSocketSharp.Net.NetworkCredential"/> that represents the credentials
              used to authenticate the client.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.EmitOnPing">
            <summary>
            Gets or sets a value indicating whether the message event is
            emitted when the interface receives a ping.
            </summary>
            <value>
              <para>
              <c>true</c> if the interface emits the message event when
              receives a ping; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.EnableRedirection">
            <summary>
            Gets or sets a value indicating whether the URL redirection for
            the handshake request is allowed.
            </summary>
            <remarks>
            The set operation works if the current state of the interface is
            New or Closed.
            </remarks>
            <value>
              <para>
              <c>true</c> if the interface allows the URL redirection for
              the handshake request; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the interface is not for
            the client.
            </exception>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Extensions">
            <summary>
            Gets the extensions selected by the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents a list of the extensions
              negotiated between the client and server.
              </para>
              <para>
              An empty string if not specified or selected.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.IsAlive">
            <summary>
            Gets a value indicating whether the communication is possible.
            </summary>
            <value>
            <c>true</c> if the communication is possible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.IsSecure">
            <summary>
            Gets a value indicating whether the connection is secure.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Log">
            <summary>
            Gets the logging function.
            </summary>
            <remarks>
            The default logging level is <see cref="F:WebSocketSharp.LogLevel.Error"/>.
            </remarks>
            <value>
            A <see cref="T:WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Origin">
            <summary>
            Gets or sets the value of the HTTP Origin header to send with
            the handshake request.
            </summary>
            <remarks>
              <para>
              The HTTP Origin header is defined in
              <see href="http://tools.ietf.org/html/rfc6454#section-7">
              Section 7 of RFC 6454</see>.
              </para>
              <para>
              The interface sends the Origin header if this property has any.
              </para>
              <para>
              The set operation works if the current state of the interface is
              New or Closed.
              </para>
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Origin
              header to send.
              </para>
              <para>
              The syntax is &lt;scheme&gt;://&lt;host&gt;[:&lt;port&gt;].
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the interface is not for
            the client.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is not an absolute URI string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation includes the path segments.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Protocol">
            <summary>
            Gets the name of subprotocol selected by the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that will be one of the names of
              subprotocols specified by client.
              </para>
              <para>
              An empty string if not specified or selected.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.ReadyState">
            <summary>
            Gets the current state of the interface.
            </summary>
            <value>
              <para>
              One of the <see cref="T:WebSocketSharp.WebSocketState"/> enum values.
              </para>
              <para>
              It indicates the current state of the interface.
              </para>
              <para>
              The default value is <see cref="F:WebSocketSharp.WebSocketState.New"/>.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.SslConfiguration">
            <summary>
            Gets the configuration for secure connection.
            </summary>
            <remarks>
            The configuration is used when the interface attempts to connect,
            so it must be configured before any connect method is called.
            </remarks>
            <value>
            A <see cref="T:WebSocketSharp.Net.ClientSslConfiguration"/> that represents the
            configuration used to establish a secure connection.
            </value>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The interface is not for the client.
              </para>
              <para>
              -or-
              </para>
              <para>
              The interface does not use a secure connection.
              </para>
            </exception>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Url">
            <summary>
            Gets the URL to which to connect.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URL to which to connect.
              </para>
              <para>
              Also it represents the URL requested by the client if the interface
              is for the server.
              </para>
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the ping or close.
            </summary>
            <remarks>
            The set operation works if the current state of the interface is
            New or Closed.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 5 seconds if the interface is
              for the client.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="E:WebSocketSharp.WebSocket.OnClose">
            <summary>
            Occurs when the connection has been closed.
            </summary>
        </member>
        <member name="E:WebSocketSharp.WebSocket.OnError">
            <summary>
            Occurs when the interface gets an error.
            </summary>
        </member>
        <member name="E:WebSocketSharp.WebSocket.OnMessage">
            <summary>
            Occurs when the interface receives a message.
            </summary>
        </member>
        <member name="E:WebSocketSharp.WebSocket.OnOpen">
            <summary>
            Occurs when the connection has been established.
            </summary>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Close">
            <summary>
            Closes the connection.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Close(System.UInt16)">
            <summary>
            Closes the connection with the specified code.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="code"/> is less than 1000 or greater than 4999.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Close(WebSocketSharp.CloseStatusCode)">
            <summary>
            Closes the connection with the specified code.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Close(System.UInt16,System.String)">
            <summary>
            Closes the connection with the specified code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Close(WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the connection with the specified code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.CloseAsync">
            <summary>
            Closes the connection asynchronously.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
        </member>
        <member name="M:WebSocketSharp.WebSocket.CloseAsync(System.UInt16)">
            <summary>
            Closes the connection asynchronously with the specified code.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="code"/> is less than 1000 or greater than 4999.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.CloseAsync(WebSocketSharp.CloseStatusCode)">
            <summary>
            Closes the connection asynchronously with the specified code.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.CloseAsync(System.UInt16,System.String)">
            <summary>
            Closes the connection asynchronously with the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.CloseAsync(WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the connection asynchronously with the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Connect">
            <summary>
            Establishes a connection.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Connecting or Open.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The interface is not for the client.
              </para>
              <para>
              -or-
              </para>
              <para>
              A series of reconnecting has failed.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.ConnectAsync">
            <summary>
            Establishes a connection asynchronously.
            </summary>
            <remarks>
              <para>
              This method does not wait for the connect process to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Connecting or Open.
              </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The interface is not for the client.
              </para>
              <para>
              -or-
              </para>
              <para>
              A series of reconnecting has failed.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Ping">
            <summary>
            Sends a ping to the remote endpoint.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Ping(System.String)">
            <summary>
            Sends a ping with the specified message to the remote endpoint.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="message">
              <para>
              A <see cref="T:System.String"/> that specifies the message to send.
              </para>
              <para>
              Its size must be 125 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="message"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="message"/> is greater than 125 bytes.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Send(System.Byte[])">
            <summary>
            Sends the specified data to the remote endpoint.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Send(System.IO.FileInfo)">
            <summary>
            Sends the specified file to the remote endpoint.
            </summary>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Send(System.String)">
            <summary>
            Sends the specified data to the remote endpoint.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Send(System.IO.Stream,System.Int32)">
            <summary>
            Sends the data from the specified stream instance to the remote endpoint.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SendAsync(System.Byte[],System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the remote endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SendAsync(System.IO.FileInfo,System.Action{System.Boolean})">
            <summary>
            Sends the specified file to the remote endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SendAsync(System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the remote endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SendAsync(System.IO.Stream,System.Int32,System.Action{System.Boolean})">
            <summary>
            Sends the data from the specified stream instance to the remote
            endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SetCookie(WebSocketSharp.Net.Cookie)">
            <summary>
            Sets an HTTP cookie to send with the handshake request.
            </summary>
            <remarks>
            This method works if the current state of the interface is
            New or Closed.
            </remarks>
            <param name="cookie">
            A <see cref="T:WebSocketSharp.Net.Cookie"/> that specifies the cookie to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The interface is not for the client.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SetCredentials(System.String,System.String,System.Boolean)">
            <summary>
            Sets the credentials for the HTTP authentication (Basic/Digest).
            </summary>
            <remarks>
            This method works if the current state of the interface is
            New or Closed.
            </remarks>
            <param name="username">
              <para>
              A <see cref="T:System.String"/> that specifies the username associated
              with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if initializes
              the credentials.
              </para>
            </param>
            <param name="password">
              <para>
              A <see cref="T:System.String"/> that specifies the password for the
              username associated with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if not necessary.
              </para>
            </param>
            <param name="preAuth">
            A <see cref="T:System.Boolean"/>: <c>true</c> if sends the credentials for
            the Basic authentication in advance with the first handshake
            request; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The interface is not for the client.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="username"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="password"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SetProxy(System.String,System.String,System.String)">
            <summary>
            Sets the URL of the HTTP proxy server through which to connect and
            the credentials for the HTTP proxy authentication (Basic/Digest).
            </summary>
            <remarks>
            This method works if the current state of the interface is
            New or Closed.
            </remarks>
            <param name="url">
              <para>
              A <see cref="T:System.String"/> that specifies the URL of the proxy
              server through which to connect.
              </para>
              <para>
              The syntax is http://&lt;host&gt;[:&lt;port&gt;].
              </para>
              <para>
              <see langword="null"/> or an empty string if initializes
              the URL and the credentials.
              </para>
            </param>
            <param name="username">
              <para>
              A <see cref="T:System.String"/> that specifies the username associated
              with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if the credentials
              are not necessary.
              </para>
            </param>
            <param name="password">
              <para>
              A <see cref="T:System.String"/> that specifies the password for the
              username associated with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The interface is not for the client.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is not an absolute URI string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The scheme of <paramref name="url"/> is not http.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> includes the path segments.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="username"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="password"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.System#IDisposable#Dispose">
            <summary>
            Closes the connection and releases all associated resources.
            </summary>
            <remarks>
              <para>
              This method closes the connection with close status 1001 (going away).
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
        </member>
        <member name="T:WebSocketSharp.WebSocketException">
            <summary>
            The exception that is thrown when a fatal error occurs in
            the WebSocket communication.
            </summary>
        </member>
        <member name="P:WebSocketSharp.WebSocketException.Code">
            <summary>
            Gets the status code indicating the cause of the exception.
            </summary>
            <value>
              <para>
              A <see cref="T:System.UInt16"/> that represents the status code indicating
              the cause of the exception.
              </para>
              <para>
              It is one of the status codes for the WebSocket connection close.
              </para>
            </value>
        </member>
        <member name="T:WebSocketSharp.WebSocketState">
            <summary>
            Indicates the state of the WebSocket interface.
            </summary>
        </member>
        <member name="F:WebSocketSharp.WebSocketState.New">
            <summary>
            Equivalent to numeric value 0. Indicates that a new interface has
            been created.
            </summary>
        </member>
        <member name="F:WebSocketSharp.WebSocketState.Connecting">
            <summary>
            Equivalent to numeric value 1. Indicates that the connect process is
            in progress.
            </summary>
        </member>
        <member name="F:WebSocketSharp.WebSocketState.Open">
            <summary>
            Equivalent to numeric value 2. Indicates that the connection has
            been established and the communication is possible.
            </summary>
        </member>
        <member name="F:WebSocketSharp.WebSocketState.Closing">
            <summary>
            Equivalent to numeric value 3. Indicates that the close process is
            in progress.
            </summary>
        </member>
        <member name="F:WebSocketSharp.WebSocketState.Closed">
            <summary>
            Equivalent to numeric value 4. Indicates that the connection has
            been closed or could not be established.
            </summary>
        </member>
    </members>
</doc>
